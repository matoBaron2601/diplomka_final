{
	"content": [
		"BEGINNING\nReactJS Foundations\nBuilding User Interfaces with ReactJS",
		"BEGINNING\nReactJS Foundations\nBuilding User Interfaces with ReactJS\nAN APPROACHABLE GUIDE\nChris Minnick\nCopyright © 2022 by John Wiley & Sons, Inc. All rights reserved.\nPublished by John Wiley & Sons, Inc., Hoboken, New Jersey.\nPublished simultaneously in Canada.\nISBN: 978- 1-1 19- 68554- 8\nISBN: 978- 1-1 19- 68561- 6 (ebk)\nISBN: 978- 1-1 19- 68558- 6 (ebk)\nNo part of this publication may be reproduced, stored in a retrieval system, or transmitted in any form or by any means,\nelectronic, mechanical, photocopying, recording, scanning, or otherwise, except as permitted under Section 107 or 108 of\nthe 1976 United States Copyright Act, without either the prior written permission of the Publisher, or authorization through\npayment of the appropriate per- copy fee to the Copyright Clearance Center, Inc., 222 Rosewood Drive, Danvers, MA 01923,\n(978) 750-8 400, fax (978) 750-4 470, or on the web at www.copyright.com. Requests to the Publisher for permission",
		"the 1976 United States Copyright Act, without either the prior written permission of the Publisher, or authorization through\npayment of the appropriate per- copy fee to the Copyright Clearance Center, Inc., 222 Rosewood Drive, Danvers, MA 01923,\n(978) 750-8 400, fax (978) 750-4 470, or on the web at www.copyright.com. Requests to the Publisher for permission\nshould be addressed to the Permissions Department, John Wiley & Sons, Inc., 111 River Street, Hoboken, NJ 07030, (201)\n748-6 011, fax (201) 748-6 008, or online at http://www.wiley.com/go/permission.\nLimit of Liability/Disclaimer of Warranty: The publisher and the author make no representations or warranties with respect\nto the accuracy or completeness of the contents of this work and specifically disclaim all warranties, including without\nlimitation warranties of fitness for a particular purpose. No warranty may be created or extended by sales or promotional",
		"Limit of Liability/Disclaimer of Warranty: The publisher and the author make no representations or warranties with respect\nto the accuracy or completeness of the contents of this work and specifically disclaim all warranties, including without\nlimitation warranties of fitness for a particular purpose. No warranty may be created or extended by sales or promotional\nmaterials. The advice and strategies contained herein may not be suitable for every situation. This work is sold with the\nunderstanding that the publisher is not engaged in rendering legal, accounting, or other professional services. If professional\nassistance is required, the services of a competent professional person should be sought. Neither the publisher nor the author\nshall be liable for damages arising herefrom. The fact that an organization or Website is referred to in this work as a citation\nand/or a potential source of further information does not mean that the author or the publisher endorses the information",
		"assistance is required, the services of a competent professional person should be sought. Neither the publisher nor the author\nshall be liable for damages arising herefrom. The fact that an organization or Website is referred to in this work as a citation\nand/or a potential source of further information does not mean that the author or the publisher endorses the information\nthe organization or Website may provide or recommendations it may make. Further, readers should be aware the Internet\nWebsites listed in this work may have changed or disappeared between when this work was written and when it is read.\nFor general information on our other products and services or for technical support, please contact our Customer Care\nDepartment within the United States at (800) 762- 2974, outside the United States at (317) 572-3 993 or fax (317) 572- 4002.\nWiley also publishes its books in a variety of electronic formats. Some content that appears in print may not be available in",
		"For general information on our other products and services or for technical support, please contact our Customer Care\nDepartment within the United States at (800) 762- 2974, outside the United States at (317) 572-3 993 or fax (317) 572- 4002.\nWiley also publishes its books in a variety of electronic formats. Some content that appears in print may not be available in\nelectronic formats. For more information about Wiley products, visit our web site at www.wiley.com.\nLibrary of Congress Control Number: 2021949753\nTrademarks: Wiley, the Wiley logo, Wrox, the Wrox logo, Programmer to Programmer, and related trade dress are\ntrademarks or registered trademarks of John Wiley & Sons, Inc. and/or its affiliates, in the United States and other countries,\nand may not be used without written permission. All other trademarks are the property of their respective owners. John\nWiley & Sons, Inc. is not associated with any product or vendor mentioned in this book.",
		"trademarks or registered trademarks of John Wiley & Sons, Inc. and/or its affiliates, in the United States and other countries,\nand may not be used without written permission. All other trademarks are the property of their respective owners. John\nWiley & Sons, Inc. is not associated with any product or vendor mentioned in this book.\nCover image: © peshkov/Adobe Stock Photos\nCover design: Wiley\nFor Sam, who got such a kick out of being thanked in\nthe last book. How about this?",
		"ABOUT THE AUTHOR\nChris Minnick is a prolific author, blogger, trainer, speaker, and web developer. His company,\nWatzThis?, is dedicated to finding better ways to teach computer and programming skills to\nbeginners.\nChris has been a full-s tack developer for over 25 years and a trainer for over 10 years, and has taught\nweb development, ReactJS, and advanced JavaScript at many of the world’s largest companies as well\nas at public libraries, co-w orking spaces, and meetups.\nMinnick has authored or co- authored over a dozen technical books for adults and kids, including\nBeginning HTML5 and CSS3 for Dummies, Coding with JavaScript for Dummies, JavaScript for\nKids, Adventures in Coding, and Writing Computer Code.",
		"ABOUT THE TECHNICAL EDITOR\nRick Carlino is a full-s tack software developer from the greater Chicago area. He specializes in open\nsource tools such as React. Rick has over a decade of experience both teaching and implementing\nmodern web applications in React. During his time as a JavaScript instructor, he traveled the world to\nteach modern web application practices to countless students at large enterprises. He currently serves\nas the technical co- founder and lead software developer for FarmBot, an open source agricultural\nrobotics platform (and React application!) that helps gardeners automate food production. Outside of\nwork he volunteers his time as the co- founder of a makerspace that helps members of his community\nlearn and access technology.",
		"ACKNOWLEDGMENTS\nTHIS BOOK WOULD NOT HAVE been possible without the help, support, experience, and wisdom\nprovided by my friends, family, colleagues, and team. I’d especially like to thank the following people:\n➤➤ Carole Jelen and Maureen Maloney at Waterside Productions.\n➤➤ Project editor Kelly Talbot. It’s a real pleasure to work with as keen- eyed and experienced a\nprofessional as you.\n➤➤ Technical editor Rick Carlino. Rick, you’re a super-h ero. Your suggestions and correc-\ntions are always spot- on, and you’ve spared me from innumerable embarrassments and\nmea culpas.\n➤➤ Acquisitions editor Devon Lewis.\n➤➤ Associate Publisher Jim Minatel.\n➤➤ The rest of the team at Wiley (Saravanan Dakshinamurthy, Kim Cofer, Louise Watson). It\ntakes more people to publish a book than I even know, but I know that you’re all fantastic.\n➤➤ Jill McVarish, Paul Brady, Mike Machado, and Richard Hain for being readers and testers or",
		"mea culpas.\n➤➤ Acquisitions editor Devon Lewis.\n➤➤ Associate Publisher Jim Minatel.\n➤➤ The rest of the team at Wiley (Saravanan Dakshinamurthy, Kim Cofer, Louise Watson). It\ntakes more people to publish a book than I even know, but I know that you’re all fantastic.\n➤➤ Jill McVarish, Paul Brady, Mike Machado, and Richard Hain for being readers and testers or\nfor helping me figure it out, even if you didn’t know that’s what you were doing.\n➤➤ My mentors and teachers who taught me how to write, including Roger Smith, Ken Byers,\nConrad Vachon, and Steven Konopacki.\n➤➤ Everyone who has taken one of my classes or read my books.\n➤➤ The incredible React community, whose blog posts, tweets, articles, books, and videos have\nenlightened and inspired me.\n➤➤ My co- authors and co- conspirators over the years, especially Eva Holland and Ed Tittel.\n➤➤ Sam, who taught me how to make wine and rescued me when I was being electrocuted\n(accidentally, I think) by Zach.",
		"➤➤ Everyone who has taken one of my classes or read my books.\n➤➤ The incredible React community, whose blog posts, tweets, articles, books, and videos have\nenlightened and inspired me.\n➤➤ My co- authors and co- conspirators over the years, especially Eva Holland and Ed Tittel.\n➤➤ Sam, who taught me how to make wine and rescued me when I was being electrocuted\n(accidentally, I think) by Zach.\n➤➤ You, the reader, for placing your trust in me as you begin or continue your journey toward\nmastery of React.\n— Chris Minnick",
		"BEGINNING\nR JS FOUNDATIONS BUILDING USER\neact\nINTERFACES WITH R JS\neact\nINTRODUCTION  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii\nCHAPTER 1 Hello, World! .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\nCHAPTER 2 The Foundation of React  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\nCHAPTER 3 JSX  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\nCHAPTER 4 All About Components  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\nCHAPTER 5 React DevTools .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\nCHAPTER 6 React Data Flow .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\nCHAPTER 7 Events .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199",
		"CHAPTER 5 React DevTools .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\nCHAPTER 6 React Data Flow .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\nCHAPTER 7 Events .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\nCHAPTER 8 Forms  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221\nCHAPTER 9 Refs .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233\nCHAPTER 10 Styling React .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\nCHAPTER 11 Introducing Hooks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\nCHAPTER 12 Routing .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289",
		"CHAPTER 10 Styling React .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\nCHAPTER 11 Introducing Hooks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\nCHAPTER 12 Routing .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289\nCHAPTER 13 Error Boundaries .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319\nCHAPTER 14 Deploying React .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339\nCHAPTER 15 Initialize a React Project from Scratch .  . . . . . . . . . . . . . . . . . . . . . . 351\nCHAPTER 16 Fetching and Caching Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369\nCHAPTER 17 Context API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387",
		"CHAPTER 15 Initialize a React Project from Scratch .  . . . . . . . . . . . . . . . . . . . . . . 351\nCHAPTER 16 Fetching and Caching Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369\nCHAPTER 17 Context API  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387\nCHAPTER 18 React Portals .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399\nCHAPTER 19 Accessibility in React  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413\nCHAPTER 20 Going Further .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425\nINDEX  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437",
		"CONTENTS\nINTRODUCTION xxvii\nCHAPTER 1: HELLO, WORLD! 1\nReact without a Build Toolchain 1\nInteractive “Hello, World” with Create React App and JSX 7\nSummary 9\nCHAPTER 2: THE FOUNDATION OF REACT 11\nWhat’s in a Name? 11\nUI Layer 12\nVirtual DOM 13\nThe Philosophy of React 14\nThinking in Components 15\nComposition vs. Inheritance 15\nReact Is Declarative 16\nReact Is Idiomatic 17\nWhy Learn React? 17\nReact vs.... 18\nReact vs. Angular 18\nReact vs. Vue 19\nWhat React Is Not 19\nReact Is Not a Web Server 20\nReact Is Not a Programming Language 20\nReact Is Not a Database Server 21\nReact Is Not a Development Environment 21\nReact Is Not the Perfect Solution to Every Problem 21\nSummary 21\nCHAPTER 3: JSX 23\nJSX Is Not HTML 23\nWhat Is JSX? 30\nHow JSX Works 30\nTranspiler . . . Huh? 31\nCompilation vs. Transpilation 31\nJSX Transform 31\nCONTeNTS\nIntroducing Babel 31\nEliminating Browser Incompatibilities 33\nSyntax Basics of JSX 33\nJSX Is JavaScript XML 33\nBeware of Reserved Words 33\nJSX Uses camelCase 33",
		"React Is Not the Perfect Solution to Every Problem 21\nSummary 21\nCHAPTER 3: JSX 23\nJSX Is Not HTML 23\nWhat Is JSX? 30\nHow JSX Works 30\nTranspiler . . . Huh? 31\nCompilation vs. Transpilation 31\nJSX Transform 31\nCONTeNTS\nIntroducing Babel 31\nEliminating Browser Incompatibilities 33\nSyntax Basics of JSX 33\nJSX Is JavaScript XML 33\nBeware of Reserved Words 33\nJSX Uses camelCase 33\nPreface Custom Attributes in DOM Elements with data- 34\nJSX Boolean Attributes 34\nUse Curly Braces to Include Literal JavaScript 35\nRemember to Use Double Curly Braces with Objects 35\nPut Comments in Curly Braces 35\nWhen to Use JavaScript in JSX 36\nConditionals in JSX 36\nConditional Rendering with if/else and Element Variables 36\nConditional Rendering with the && Operator 37\nConditional Rendering with the Conditional Operator 38\nExpressions in JSX 38\nUsing Children in JSX 40\nReact Fragments 40\nSummary 41\nCHAPTER 4: ALL ABOUT COMPONENTS 43\nWhat Is a Component? 43\nComponents vs. elements 44",
		"When to Use JavaScript in JSX 36\nConditionals in JSX 36\nConditional Rendering with if/else and Element Variables 36\nConditional Rendering with the && Operator 37\nConditional Rendering with the Conditional Operator 38\nExpressions in JSX 38\nUsing Children in JSX 40\nReact Fragments 40\nSummary 41\nCHAPTER 4: ALL ABOUT COMPONENTS 43\nWhat Is a Component? 43\nComponents vs. elements 44\nComponents Define Elements 44\nElements Invoke Components 45\nBuilt-i n Components 47\nHTML Element Components 47\nAttributes vs. Props 52\nPassing Props 52\nAccessing Props 52\nStandard HTML Attributes 54\nNon-Standard Attributes 56\nCustom Attributes 56\nUser-D efined Components 56\nTypes of Components 56\nClass Components 57\nStepping through a React Class Component 68\nReact.Component 68\nImporting React.Component 68\nxvi\nCONTeNTS\nThe Class Header 69\nThe Constructor Function 69\nManaging State in Class Components 71\nThe Render Function 73\nCreating and Using Props 74\nFunction Components 76\nWhat Are Function Components? 79",
		"Custom Attributes 56\nUser-D efined Components 56\nTypes of Components 56\nClass Components 57\nStepping through a React Class Component 68\nReact.Component 68\nImporting React.Component 68\nxvi\nCONTeNTS\nThe Class Header 69\nThe Constructor Function 69\nManaging State in Class Components 71\nThe Render Function 73\nCreating and Using Props 74\nFunction Components 76\nWhat Are Function Components? 79\nHow to Write Function Components 79\nOptimizations and Function Component Shortcuts 80\nManaging State in Function Components 83\nDifferences between Function and Class Components 84\nReact Component Children 84\nthis.props.children 85\nManipulating Children 86\nReact.Children 86\nisValidElement 87\ncloneElement 87\nThe Component Lifecycle 89\nMounting 90\nconstructor() 90\nstatic getDerivedStateFromProps 90\nrender 90\ncomponentDidMount() 90\nUpdating 90\nshouldComponentUpdate 91\ngetSnapshotBeforeUpdate 91\ncomponentDidUpdate 92\nUnmounting 92\ncomponentWillUnmount 92\nError Handling 92\ngetDerivedStateFromError 92",
		"this.props.children 85\nManipulating Children 86\nReact.Children 86\nisValidElement 87\ncloneElement 87\nThe Component Lifecycle 89\nMounting 90\nconstructor() 90\nstatic getDerivedStateFromProps 90\nrender 90\ncomponentDidMount() 90\nUpdating 90\nshouldComponentUpdate 91\ngetSnapshotBeforeUpdate 91\ncomponentDidUpdate 92\nUnmounting 92\ncomponentWillUnmount 92\nError Handling 92\ngetDerivedStateFromError 92\ncomponentDidCatch 92\nImproving Performance and Avoiding Errors 92\nAvoiding Memory Leaks 93\nReact.PureComponent 96\nReact.memo 97\nReact.StrictMode 98\nRendering Components 98\nRendering with ReactDOM 98\nVirtual DOM 100\nOther Rendering Engines 101\nxvii\nCONTeNTS\nReact Native 101\nReactDOMServer 102\nReact Konsul 103\nreact-p df 103\nComponent Terminology 103\nSummary 104\nCHAPTER 5: REACT DEVTOOLS 105\nInstallation and Getting Started 105\nInspecting Components 107\nWorking with the Component Tree 108\nSearching for Components 110\nUsing the Search Input Box 110\nUsing Regular Expressions 110",
		"Virtual DOM 100\nOther Rendering Engines 101\nxvii\nCONTeNTS\nReact Native 101\nReactDOMServer 102\nReact Konsul 103\nreact-p df 103\nComponent Terminology 103\nSummary 104\nCHAPTER 5: REACT DEVTOOLS 105\nInstallation and Getting Started 105\nInspecting Components 107\nWorking with the Component Tree 108\nSearching for Components 110\nUsing the Search Input Box 110\nUsing Regular Expressions 110\nFiltering Components 112\nSelecting Components 114\nediting Component Data in DevTools 114\nWorking with Additional DevTools Functionality 118\nProfiling 119\nSummary 121\nCHAPTER 6: REACT DATA FLOW 123\nOne- Way Data Flow 123\nUnderstanding One- Way Data Flow 124\nWhy One- Way Data Flow? 125\nProps 126\nComponents Receive Props 126\nProps Can Be Any Data Type 126\nProps Are Read- Only 127\nValidating Incoming Props with PropTypes 129\nWhat Is PropTypes? 130\nGetting Started with PropTypes 131\nWhat Can PropTypes Validate? 133\nDefault Props 141\nReact State 145\nWhat Is state? 146\nInitializing state 146",
		"One- Way Data Flow 123\nUnderstanding One- Way Data Flow 124\nWhy One- Way Data Flow? 125\nProps 126\nComponents Receive Props 126\nProps Can Be Any Data Type 126\nProps Are Read- Only 127\nValidating Incoming Props with PropTypes 129\nWhat Is PropTypes? 130\nGetting Started with PropTypes 131\nWhat Can PropTypes Validate? 133\nDefault Props 141\nReact State 145\nWhat Is state? 146\nInitializing state 146\nInitializing state in Class Components 146\nInitializing State in Function Components 147\nxviii\nCONTeNTS\nThe Difference between state and props 149\nUpdating state 149\nUpdating a Class Component’s state with setState 150\nUpdating state with Function Components 154\nWhat to Put in State 161\nBuilding the Reminders App 161\nWhat Not to Put in State 168\nWhere to Put State 168\nLifting State Up 170\nAbout the key Prop 177\nFiltering the Reminders 183\nImplementing the isComplete Changing Functionality 188\nConverting to Class Components 190\nSummary 198\nCHAPTER 7: EVENTS 199\nHow events Work in React 199",
		"Updating state with Function Components 154\nWhat to Put in State 161\nBuilding the Reminders App 161\nWhat Not to Put in State 168\nWhere to Put State 168\nLifting State Up 170\nAbout the key Prop 177\nFiltering the Reminders 183\nImplementing the isComplete Changing Functionality 188\nConverting to Class Components 190\nSummary 198\nCHAPTER 7: EVENTS 199\nHow events Work in React 199\nWhat Is Syntheticevent? 201\nUsing event Listener Attributes 202\nThe event Object 203\nSupported events 204\nevent Handler Functions 211\nWriting Inline Event Handlers 211\nWriting Event Handlers in Function Components 212\nWriting Event Handlers in Class Components 213\nBinding Event Handler Functions 214\nUsing bind 215\nUsing Arrow Functions 216\nPassing Data to Event Handlers 218\nSummary 219\nCHAPTER 8: FORMS 221\nForms Have State 221\nControlled Inputs vs. Uncontrolled Inputs 222\nUpdating a Controlled Input 223\nControlling an Input in a Function Component 224\nControlling an Input in a Class Component 224",
		"Writing Event Handlers in Class Components 213\nBinding Event Handler Functions 214\nUsing bind 215\nUsing Arrow Functions 216\nPassing Data to Event Handlers 218\nSummary 219\nCHAPTER 8: FORMS 221\nForms Have State 221\nControlled Inputs vs. Uncontrolled Inputs 222\nUpdating a Controlled Input 223\nControlling an Input in a Function Component 224\nControlling an Input in a Class Component 224\nLifting Up Input State 226\nUsing Uncontrolled Inputs 228\nUsing Different Form elements 229\nxix\nCONTeNTS\nControlling the Input Element 230\nControlling a textarea 230\nControlling a Select Element 231\nPreventing Default Actions 231\nSummary 232\nCHAPTER 9: REFS 233\nWhat Refs Are 233\nHow to Create a Ref in a Class Component 234\nHow to Create a Ref in a Function Component 234\nUsing Refs 234\nCreating a Callback Ref 236\nWhen to Use Refs 238\nWhen Not to Use Refs 238\nexamples 239\nManaging Focus 239\nAutomatically Selecting Text 239\nControlling Media Playback 241\nSetting Scroll Position 241\nSummary 242",
		"Preventing Default Actions 231\nSummary 232\nCHAPTER 9: REFS 233\nWhat Refs Are 233\nHow to Create a Ref in a Class Component 234\nHow to Create a Ref in a Function Component 234\nUsing Refs 234\nCreating a Callback Ref 236\nWhen to Use Refs 238\nWhen Not to Use Refs 238\nexamples 239\nManaging Focus 239\nAutomatically Selecting Text 239\nControlling Media Playback 241\nSetting Scroll Position 241\nSummary 242\nCHAPTER 10: STYLING REACT 243\nThe Importance of Styles 243\nImporting CSS into the HTML File 244\nUsing Plain Old CSS in Components 245\nWriting Inline Styles 247\nJavaScript Style Syntax 248\nWhy to Use Inline Styles 249\nWhy Not to Use Inline Styles 249\nImproving Inline Styles with Style Modules 249\nCSS Modules 250\nNaming CSS Module Files 251\nAdvanced CSS Modules Functionality 252\nGlobal Classes 252\nClass Composition 252\nCSS- in- JS and Styled Components 253\nSummary 255\nxx\nCONTeNTS\nCHAPTER 11: INTRODUCING HOOKS 257\nWhat Are Hooks? 257\nWhy Were Hooks Introduced? 257\nRules of Hooks 259",
		"Why to Use Inline Styles 249\nWhy Not to Use Inline Styles 249\nImproving Inline Styles with Style Modules 249\nCSS Modules 250\nNaming CSS Module Files 251\nAdvanced CSS Modules Functionality 252\nGlobal Classes 252\nClass Composition 252\nCSS- in- JS and Styled Components 253\nSummary 255\nxx\nCONTeNTS\nCHAPTER 11: INTRODUCING HOOKS 257\nWhat Are Hooks? 257\nWhy Were Hooks Introduced? 257\nRules of Hooks 259\nThe Built-in Hooks 259\nManaging State with useState 260\nSetting the Initial State 262\nUsing the Setter Function 262\nPassing a Value to a Setter 263\nPassing a Function to a Setter 263\nSetter Function Value Comparison 264\nHooking into the Lifecycle with useEffect 264\nUsing the Default useEffect Behavior 265\nCleaning Up After Effects 265\nCustomizing useEffect 266\nRunning Asynchronous Code with useEffect 270\nSubscribing to Global Data with useContext 272\nCombining Logic and State with useReducer 273\nMemoized Callbacks with useCallback 275\nCaching Computed Values with useMemo 278",
		"Setter Function Value Comparison 264\nHooking into the Lifecycle with useEffect 264\nUsing the Default useEffect Behavior 265\nCleaning Up After Effects 265\nCustomizing useEffect 266\nRunning Asynchronous Code with useEffect 270\nSubscribing to Global Data with useContext 272\nCombining Logic and State with useReducer 273\nMemoized Callbacks with useCallback 275\nCaching Computed Values with useMemo 278\nSolving Unnecessary Renders 278\nSolving Performance Problems 279\nAccessing Children Imperatively with useRef 279\nCustomizing Exposed Values with useImperativeHandle 280\nUpdating the DOM Synchronously with useLayoutEffect 281\nWriting Custom Hooks 281\nLabeling Custom Hooks with useDebugValue 283\nFinding and Using Custom Hooks 285\nuse-h ttp 285\nreact-f etch-h ook 286\naxios-h ooks 286\nreact-h ook-f orm 286\n@rehooks/local-s torage 287\nuse-l ocal-s torage-s tate 287\nOther Fun Hooks 288\nLists of Hooks 288\nSummary 288\nxxi\nCONTeNTS\nCHAPTER 12: ROUTING 289\nWhat Is Routing? 289",
		"Writing Custom Hooks 281\nLabeling Custom Hooks with useDebugValue 283\nFinding and Using Custom Hooks 285\nuse-h ttp 285\nreact-f etch-h ook 286\naxios-h ooks 286\nreact-h ook-f orm 286\n@rehooks/local-s torage 287\nuse-l ocal-s torage-s tate 287\nOther Fun Hooks 288\nLists of Hooks 288\nSummary 288\nxxi\nCONTeNTS\nCHAPTER 12: ROUTING 289\nWhat Is Routing? 289\nHow Routing Works in React 291\nUsing React Router 293\nInstalling and Importing react- router- dom 293\nThe Router Component 294\nSelecting a Router 294\nUsing the Router Component 295\nLinking to Routes 296\nInternal Linking with Link 296\nInternal Navigation with NavLink 298\nAutomatic Linking with Redirect 302\nCreating Routes 302\nRestricting Path Matching 304\nUsing URL Parameters 304\nThe component Prop 305\nRender Props 306\nSwitching Routes 307\nRendering a Default Route 308\nRouting with Redirect 308\nBehind the Scenes: location, history, and match 309\nThe history Object 310\nThe location Object 313\nThe match Object 313\nReact Router Hooks 317",
		"Automatic Linking with Redirect 302\nCreating Routes 302\nRestricting Path Matching 304\nUsing URL Parameters 304\nThe component Prop 305\nRender Props 306\nSwitching Routes 307\nRendering a Default Route 308\nRouting with Redirect 308\nBehind the Scenes: location, history, and match 309\nThe history Object 310\nThe location Object 313\nThe match Object 313\nReact Router Hooks 317\nuseHistory 317\nuseLocation 317\nuseParams 317\nuseRouteMatch 317\nSummary 318\nCHAPTER 13: ERROR BOUNDARIES 319\nThe Best Laid Plans 319\nWhat Is an error Boundary? 320\nImplementing an error Boundary 323\nBuilding Your Own ErrorBoundary Component 323\ngetDerivedStateFromErrors Is a Static Method 324\ngetDerivedStateFromErrors Runs During the Render Phase 325\ngetDerivedStateFromErrors Receives the Error as a Parameter 325\nxxii\nCONTeNTS\ngetDerivedStateFromErrors Should Return an Object for\nUpdating State 325\nTesting Your Boundary 326\nLogging Errors with ComponentDidCatch() 327\nUsing a Logging Service 328\nResetting the State 333",
		"getDerivedStateFromErrors Is a Static Method 324\ngetDerivedStateFromErrors Runs During the Render Phase 325\ngetDerivedStateFromErrors Receives the Error as a Parameter 325\nxxii\nCONTeNTS\ngetDerivedStateFromErrors Should Return an Object for\nUpdating State 325\nTesting Your Boundary 326\nLogging Errors with ComponentDidCatch() 327\nUsing a Logging Service 328\nResetting the State 333\nInstalling a Pre- Built ErrorBoundary Component 334\nWhat Can’t an error Boundary Catch? 336\nCatching Errors in Error Boundaries with try/catch 336\nCatching Errors in Event Handlers with react- error- boundary 337\nSummary 338\nCHAPTER 14: DEPLOYING REACT 339\nWhat Is Deployment? 339\nBuilding an App 339\nRunning the build Script 340\nExamining the build Directory 340\nThe Built index.html 341\nThe static Directory 342\nasset-m anifest.json 342\nWhat’s in a Name? 343\nHow Is a Deployed App Different? 343\nDevelopment Mode vs. Production 343\nPutting It on the Web 344\nWeb Server Hosting 344\nNode Hosting 345",
		"Summary 338\nCHAPTER 14: DEPLOYING REACT 339\nWhat Is Deployment? 339\nBuilding an App 339\nRunning the build Script 340\nExamining the build Directory 340\nThe Built index.html 341\nThe static Directory 342\nasset-m anifest.json 342\nWhat’s in a Name? 343\nHow Is a Deployed App Different? 343\nDevelopment Mode vs. Production 343\nPutting It on the Web 344\nWeb Server Hosting 344\nNode Hosting 345\nDeploying with Netlify 345\nEnabling Routing with Netlify 347\nEnabling Custom Domains and HTTPS 348\nSummary 349\nCHAPTER 15: INITIALIZE A REACT PROJECT FROM SCRATCH 351\nBuilding Your Own Toolchain 351\nInitializing Your Project 352\nThe HTML Document 352\nThe Main JavaScript File 353\nThe Root Component 353\nRunning in the Browser 354\nHow Webpack Works 357\nLoaders 358\nPlugins 358\nxxiii\nCONTeNTS\nAutomating Your Build Process 358\nMaking an HTML Template 359\nDevelopment Server and Hot Reloading 360\nTesting Tools 360\nInstalling and Configuring ESLint 360\nESLint Configuration 361\nHow to Fix Errors 362",
		"Initializing Your Project 352\nThe HTML Document 352\nThe Main JavaScript File 353\nThe Root Component 353\nRunning in the Browser 354\nHow Webpack Works 357\nLoaders 358\nPlugins 358\nxxiii\nCONTeNTS\nAutomating Your Build Process 358\nMaking an HTML Template 359\nDevelopment Server and Hot Reloading 360\nTesting Tools 360\nInstalling and Configuring ESLint 360\nESLint Configuration 361\nHow to Fix Errors 362\nTesting with Jest 363\nCreating NPM Scripts 364\nStructuring Your Source Directory 365\nGrouping by File Type 366\nGrouping by Features 367\nSummary 367\nCHAPTER 16: FETCHING AND CACHING DATA 369\nAsynchronous Code: It’s All About Timing 369\nJavaScript Never Sleeps 370\nWhere to Run Async Code in React 374\nWays to Fetch 376\nGetting Data with Fetch 377\nGetting Data with Axios 377\nUsing Web Storage 379\nTwo Types of Web Storage 379\nWhen to Use Web Storage 380\nWhen Not to Use Web Storage 380\nWeb Storage Is Synchronous 380\nWorking with localStorage 381\nStoring Data with localStorage 381",
		"Asynchronous Code: It’s All About Timing 369\nJavaScript Never Sleeps 370\nWhere to Run Async Code in React 374\nWays to Fetch 376\nGetting Data with Fetch 377\nGetting Data with Axios 377\nUsing Web Storage 379\nTwo Types of Web Storage 379\nWhen to Use Web Storage 380\nWhen Not to Use Web Storage 380\nWeb Storage Is Synchronous 380\nWorking with localStorage 381\nStoring Data with localStorage 381\nReading Data from localStorage 382\nRemoving Data from localStorage 384\nSummary 385\nCHAPTER 17: CONTEXT API 387\nWhat Is Prop Drilling? 387\nHow Context API Solves the Problem 388\nCreating a Context 388\nCreating a Provider 389\nConsuming a Context 390\nUsing Context in a Class Component 390\nUsing Context in a Function Component 391\nxxiv\nCONTeNTS\nCommon Use Cases for Context 391\nWhen Not to Use Context 392\nComposition as an Alternative to Context 392\nexample App: User Preferences 396\nSummary 398\nCHAPTER 18: REACT PORTALS 399\nWhat Is a Portal? 399\nHow to Make a Portal 399",
		"Creating a Context 388\nCreating a Provider 389\nConsuming a Context 390\nUsing Context in a Class Component 390\nUsing Context in a Function Component 391\nxxiv\nCONTeNTS\nCommon Use Cases for Context 391\nWhen Not to Use Context 392\nComposition as an Alternative to Context 392\nexample App: User Preferences 396\nSummary 398\nCHAPTER 18: REACT PORTALS 399\nWhat Is a Portal? 399\nHow to Make a Portal 399\nWhy Not Just Render Multiple Component Trees? 403\nCommon Use Cases 403\nRendering and Interacting with a Modal Dialog 404\nManaging Keyboard Focus with Modals 409\nSummary 411\nCHAPTER 19: ACCESSIBILITY IN REACT 413\nWhy Is Accessibility Important? 413\nAccessibility Basics 414\nWeb Content Accessibility Guidelines (WCAG) 414\nWeb Accessibility Initiative - Accessible Rich Internet\nApplications (WAI-A RIA) 415\nImplementing Accessibility in React Components 415\nARIA Attributes in React 416\nSemantic HTML 416\nForm Accessibility 417\nFocus Control in React 418\nSkip Links 418\nManaging Focus Programmatically 419",
		"Why Is Accessibility Important? 413\nAccessibility Basics 414\nWeb Content Accessibility Guidelines (WCAG) 414\nWeb Accessibility Initiative - Accessible Rich Internet\nApplications (WAI-A RIA) 415\nImplementing Accessibility in React Components 415\nARIA Attributes in React 416\nSemantic HTML 416\nForm Accessibility 417\nFocus Control in React 418\nSkip Links 418\nManaging Focus Programmatically 419\nMedia Queries in React 420\nMedia Queries in Included CSS 421\nUsing useMediaQuery 422\nSummary 422\nCHAPTER 20: GOING FURTHER 425\nTesting 425\nMocha 426\nEnzyme 426\nChai 427\nAssert 427\nExpect 428\nShould 428\nxxv\nCONTeNTS\nKarma 428\nNightwatch.js 428\nServer-S ide Rendering 429\nFlux 430\nRedux 430\nGraphQL 432\nApollo 433\nReact Native 434\nNext.js 434\nGatsby 434\nPeople to Follow 435\nUseful Links and Resources 435\nSummary 436\nINDEX 437\nxxvi\nINTRODUCTION\nSINCE ITS CREATION BY FACEBOOK IN 2013, REACTJS has become one of the most popular and",
		"Mocha 426\nEnzyme 426\nChai 427\nAssert 427\nExpect 428\nShould 428\nxxv\nCONTeNTS\nKarma 428\nNightwatch.js 428\nServer-S ide Rendering 429\nFlux 430\nRedux 430\nGraphQL 432\nApollo 433\nReact Native 434\nNext.js 434\nGatsby 434\nPeople to Follow 435\nUseful Links and Resources 435\nSummary 436\nINDEX 437\nxxvi\nINTRODUCTION\nSINCE ITS CREATION BY FACEBOOK IN 2013, REACTJS has become one of the most popular and\nwidely used front- end user interface libraries on the web. With the creation of React Native in 2015,\nReactJS has become one of the most widely used libraries for mobile app development as well.\nReactJS has always been a bit of a moving target. It has gone through several major changes over the\nyears, but through it all, the core principles of React have remained the same.\nIf you want to learn to develop next-g eneration cross- platform web and mobile apps using the latest\nsyntax and the latest tools, you’ve come to the right place. My goal with this book is to save you",
		"ReactJS has always been a bit of a moving target. It has gone through several major changes over the\nyears, but through it all, the core principles of React have remained the same.\nIf you want to learn to develop next-g eneration cross- platform web and mobile apps using the latest\nsyntax and the latest tools, you’ve come to the right place. My goal with this book is to save you\nfrom the countless hours of trial and error that were my experience with trying to piece together bits\nof old and new information from the web and books.\nWhether you’re coming to React as a mobile developer, a web developer, or as any other kind of soft-\nware developer, this book is for you. If you have experience with ReactJS as it existed in the earlier\ndays (before about version 16), this book is for you too!\nIn this book, I’ve attempted not only to give the most up- to- date syntax and patterns for developing\nReactJS applications, but also to give enough background and timeless information for it to remain",
		"ware developer, this book is for you. If you have experience with ReactJS as it existed in the earlier\ndays (before about version 16), this book is for you too!\nIn this book, I’ve attempted not only to give the most up- to- date syntax and patterns for developing\nReactJS applications, but also to give enough background and timeless information for it to remain\nrelevant for years to come.\nSo, welcome to ReactJS.\nWHY THIS BOOK?\nThank you for choosing to begin, or continue, your React journey with me. My aim with this book\nis to provide an up- to- date and thorough explanation of React and the React ecosystem along with\nhands- on code that will prepare you to quickly start using React productively in the real world.\nI’m thrilled to be writing this book at this time for a number of reasons:\n1. I have the experience and knowledge to do it right.\n2. React is one of the most popular JavaScript libraries today.\n3. I believe React will be even more popular in the future.",
		"hands- on code that will prepare you to quickly start using React productively in the real world.\nI’m thrilled to be writing this book at this time for a number of reasons:\n1. I have the experience and knowledge to do it right.\n2. React is one of the most popular JavaScript libraries today.\n3. I believe React will be even more popular in the future.\n4. Existing online resources and books too often give incomplete and/or outdated information\nabout how to program with React.\nLet’s take a quick look at each of these points, starting with a little bit about who I am and how I\ncame to React and this book.\nIntroductIon\nAbout Me\nI’ve been a web developer since 1997, and I’ve been programming in JavaScript since 1998. I’ve\nbuilt or managed the building of web applications for some of the world’s largest companies over\nthe years. As a web developer, writer, and teacher, I’ve had to learn and use plenty of languages and",
		"came to React and this book.\nIntroductIon\nAbout Me\nI’ve been a web developer since 1997, and I’ve been programming in JavaScript since 1998. I’ve\nbuilt or managed the building of web applications for some of the world’s largest companies over\nthe years. As a web developer, writer, and teacher, I’ve had to learn and use plenty of languages and\nJavaScript frameworks. There’s a difference between learning something and applying it, and I’ve\nbeen working on projects with React and doing React consulting for several years now.\nI’ve been teaching web development and JavaScript online and in person since 2000, and I’ve been\nteaching React since 2015. In the years that I’ve been teaching React, I’ve written three weeklong\ncourses designed for in- person delivery, numerous short video courses, and two longer video courses.\nI’ve taught React on three continents, and my students have been web developers, Java and C pro-",
		"I’ve been teaching web development and JavaScript online and in person since 2000, and I’ve been\nteaching React since 2015. In the years that I’ve been teaching React, I’ve written three weeklong\ncourses designed for in- person delivery, numerous short video courses, and two longer video courses.\nI’ve taught React on three continents, and my students have been web developers, Java and C pro-\ngrammers, COBOL programmers, database administrators, network administrators, project manag-\ners, graphic designers, and college students.\nAs I’m writing, the global COVID-1 9 pandemic has decimated the in-p erson training industry. While\nthis situation has given me more time at home with the pets, it’s also given me time to think deeply\nabout React and about the React book that I wish existed today. This book is the result of my looking\nat all of the top React books, looking at the current state of how React is being used, and looking at\nwhat React is likely to look like in the future.",
		"this situation has given me more time at home with the pets, it’s also given me time to think deeply\nabout React and about the React book that I wish existed today. This book is the result of my looking\nat all of the top React books, looking at the current state of how React is being used, and looking at\nwhat React is likely to look like in the future.\nReact Is Popular\nReact is a JavaScript library that was born out of Facebook’s need to create scalable and fast user\ninterfaces. Ever since Facebook released it to the world as an open source project, it has been one of\nthe most widely used ways to build dynamic web and mobile applications.\nOne popular game among JavaScript developers is to think of a noun, add “.js”, and search GitHub\nto find the JavaScript framework with that name. In a time when new JavaScript frameworks and\nlibraries pop up and die off with shocking regularity, React is one of three libraries released since",
		"the most widely used ways to build dynamic web and mobile applications.\nOne popular game among JavaScript developers is to think of a noun, add “.js”, and search GitHub\nto find the JavaScript framework with that name. In a time when new JavaScript frameworks and\nlibraries pop up and die off with shocking regularity, React is one of three libraries released since\n2010 that have stuck around and gained the kind of developer usage that will guarantee that they will\nbe supported and in widespread use for a long time to come.\nReact Is Both Progressive and Conservative\nReact has been able to stick around so long and gain so many users because it’s always been a\nforward- looking framework that’s not afraid to make big changes to adapt to new features in\nJavaScript, new ways of writing user interfaces, and feedback from developers. Over the years, React\nhas gone through several major changes in how the basic unit of a React application, the component,",
		"React has been able to stick around so long and gain so many users because it’s always been a\nforward- looking framework that’s not afraid to make big changes to adapt to new features in\nJavaScript, new ways of writing user interfaces, and feedback from developers. Over the years, React\nhas gone through several major changes in how the basic unit of a React application, the component,\nis written. But, amidst all this change, React has stuck to a central paradigm and each major change\nto React has maintained compatibility with previous versions.\nDon’t Believe Everything on the Internet\nWhile the end result of all this change is that React has gotten easier to write and more robust over\nthe years, it’s also caused a pileup of outdated and often wrong example code and tutorials on the\nxxviii\nIntroductIon\ninternet and in books. If you’ve done any research on React prior to buying this book, you’ve surely",
		"Don’t Believe Everything on the Internet\nWhile the end result of all this change is that React has gotten easier to write and more robust over\nthe years, it’s also caused a pileup of outdated and often wrong example code and tutorials on the\nxxviii\nIntroductIon\ninternet and in books. If you’ve done any research on React prior to buying this book, you’ve surely\nnoticed this, and you’ve likely been confused by it. Perhaps you bought this book after having a frus-\ntrating experience with learning React online only to learn that you learned about an old version of it.\nThis book aims to be a solid and complete guide to all of the most important (and some less impor-\ntant) features, concepts, and syntaxes used in React.\nWHAT’S COVERED IN THIS BOOK?\nThis book covers everything you need to know to write high- quality React code. You’ll learn about\nReact components using the functional method of writing them as well as the class method. You’ll",
		"This book aims to be a solid and complete guide to all of the most important (and some less impor-\ntant) features, concepts, and syntaxes used in React.\nWHAT’S COVERED IN THIS BOOK?\nThis book covers everything you need to know to write high- quality React code. You’ll learn about\nReact components using the functional method of writing them as well as the class method. You’ll\nlearn about managing the state of your application using several different methods, including with\nReact Hooks and with the setState method. You’ll learn how to put components together to make\ncomplete and dynamic user interfaces. You’ll learn how to fetch data from an external data source\nand use it in your application. And, you’ll learn how to store data in the user’s web browser to\nimprove the performance and usability of your application. Speaking of usability, you’ll learn about\nbest practices for making your application work on mobile devices as well as on the desktop, and",
		"complete and dynamic user interfaces. You’ll learn how to fetch data from an external data source\nand use it in your application. And, you’ll learn how to store data in the user’s web browser to\nimprove the performance and usability of your application. Speaking of usability, you’ll learn about\nbest practices for making your application work on mobile devices as well as on the desktop, and\nyou’ll also learn how to make sure that your application will be accessible.\nBecause React takes advantage of many of the latest and greatest improvements and enhancements to\nthe underlying JavaScript language, I’ll be giving you JavaScript lessons throughout the book. Some\nof the new JavaScript syntax can be a little confusing to those of us who first learned the language\nin its early days, but I’ll provide plenty of simple and real-w orld examples to explain each new bit of\nsyntax or shortcut.\nWHAT’S NOT COVERED?",
		"the underlying JavaScript language, I’ll be giving you JavaScript lessons throughout the book. Some\nof the new JavaScript syntax can be a little confusing to those of us who first learned the language\nin its early days, but I’ll provide plenty of simple and real-w orld examples to explain each new bit of\nsyntax or shortcut.\nWHAT’S NOT COVERED?\nAlthough React is a JavaScript library, this is not a book for newcomers to JavaScript or to web\nprogramming. I expect that you’ve had at least some experience with JavaScript. If you’re not famil-\niar with the latest additions and revisions to JavaScript, that’s not a problem. But, if you’re new to\nJavaScript or to programming in general, I recommend that you learn the basics of programming with\nJavaScript before you tackle React.\nSimilarly, this is not a web design book. I assume that you’re familiar with HTML and CSS and feel\ncomfortable writing both. I also assume a basic knowledge of how web browsers work and how web",
		"JavaScript or to programming in general, I recommend that you learn the basics of programming with\nJavaScript before you tackle React.\nSimilarly, this is not a web design book. I assume that you’re familiar with HTML and CSS and feel\ncomfortable writing both. I also assume a basic knowledge of how web browsers work and how web\npages are rendered in browsers.\nFinally, this book is intended to teach the fundamentals of React to anyone who wants to gain the\nability to write React applications. Although it does cover many of the most commonly used patterns\nand conventions in React development, and many of the more advanced topics in React are covered\nas well, there are many topics that will only be mentioned in passing or that had to be omitted for\nthe sake of space. To cover everything having to do with more advanced React development would\nrequire several volumes, which would all need to be updated every couple of months.\nxxix\nIntroductIon",
		"and conventions in React development, and many of the more advanced topics in React are covered\nas well, there are many topics that will only be mentioned in passing or that had to be omitted for\nthe sake of space. To cover everything having to do with more advanced React development would\nrequire several volumes, which would all need to be updated every couple of months.\nxxix\nIntroductIon\nOnce you understand the fundamentals of React as taught in this book, you’ll be more than qualified\nto explore the vast React online ecosystem and find tutorials, documentation, and example code to\ncontinue your React education.\nSome of the more advanced topics that are beyond the scope of this book are: unit testing, building\nmobile applications with React Native, Redux, and isomorphic/universal React. If all that sounds like\na bunch of nonsense jargon at this point, you came to the right place! You may not know everything",
		"continue your React education.\nSome of the more advanced topics that are beyond the scope of this book are: unit testing, building\nmobile applications with React Native, Redux, and isomorphic/universal React. If all that sounds like\na bunch of nonsense jargon at this point, you came to the right place! You may not know everything\nabout how to implement all these more advanced things by the end of the book, but you’ll certainly\nknow what they are and how to get started with them.\nPREREQUISITES\nProgramming React can feel like assembling a complex piece of furniture from a Swedish furnish-\ning store. There are a lot of parts that don’t make much sense individually, but when you follow the\ninstructions and put them together in the right way, the simplicity and beauty of the whole thing may\nsurprise you.\nInternet Connection and Computer\nI assume that you have a connection to the internet and a reasonably modern desktop or laptop com-",
		"ing store. There are a lot of parts that don’t make much sense individually, but when you follow the\ninstructions and put them together in the right way, the simplicity and beauty of the whole thing may\nsurprise you.\nInternet Connection and Computer\nI assume that you have a connection to the internet and a reasonably modern desktop or laptop com-\nputer. Writing code on tablets or smartphones is possible, but it’s not easy. My examples and screen-\nshots will be from the perspective of a desktop and/or laptop computer, and I can’t guarantee that\nmy example code will all be usable on a smaller device. Furthermore, some of the tools that you’ll be\nusing to build React applications simply won’t run on a smartphone or tablet.\nWeb Development Basics\nAs previously mentioned, an understanding of HTML, CSS, and JavaScript is essential before begin-\nning your study of React. If your experience is mostly with copying and pasting code that others",
		"my example code will all be usable on a smaller device. Furthermore, some of the tools that you’ll be\nusing to build React applications simply won’t run on a smartphone or tablet.\nWeb Development Basics\nAs previously mentioned, an understanding of HTML, CSS, and JavaScript is essential before begin-\nning your study of React. If your experience is mostly with copying and pasting code that others\nhave written, but you feel comfortable with making changes and looking up things that you don’t yet\nknow, you’ll do fine with this book.\nCode Editor\nYou’ll need a code editor. The one I currently use and recommend is Microsoft Visual Studio Code.\nIt’s available for free on MacOS, Linux, and Windows. If you’re more comfortable using another code\neditor, that’s fine too. I’ve used many different code editors over the years, and I believe that which-\never code editor a developer chooses to use and can be most effective with is the right one.\nBrowser",
		"It’s available for free on MacOS, Linux, and Windows. If you’re more comfortable using another code\neditor, that’s fine too. I’ve used many different code editors over the years, and I believe that which-\never code editor a developer chooses to use and can be most effective with is the right one.\nBrowser\nYou’ll also need a modern web browser. Although Mozilla Firefox, Google Chrome, and Windows\nEdge will all work for our purposes, my screenshots throughout the book were taken in Google\nChrome on MacOS. Feel free to use whichever of the three modern web browsers you prefer, but\nxxx\nIntroductIon\nunderstand that your experience may differ slightly from the screenshots in the book and that some\nof the React developer tools are currently only available for Chrome and Firefox.\nINSTALLING REQUIRED DEPENDENCIES\nAlthough it is possible to write and run React applications with nothing more than a text editor and",
		"xxx\nIntroductIon\nunderstand that your experience may differ slightly from the screenshots in the book and that some\nof the React developer tools are currently only available for Chrome and Firefox.\nINSTALLING REQUIRED DEPENDENCIES\nAlthough it is possible to write and run React applications with nothing more than a text editor and\na web browser on a computer connected to the internet, if you want to build any applications that\nwill be deployed to the public web you’ll need to install some additional software packages on your\ncomputer. These packages, when combined, are what web developers refer to as a toolchain.\nAll of the tools in the React toolchain are free, open source, and easy to download and install. In the\nfollowing pages, I’ll take you step by step through installing and configuring your toolchain and I’ll\nshow you some of the things you’ll be able to do with your new tools to help you efficiently build,",
		"computer. These packages, when combined, are what web developers refer to as a toolchain.\nAll of the tools in the React toolchain are free, open source, and easy to download and install. In the\nfollowing pages, I’ll take you step by step through installing and configuring your toolchain and I’ll\nshow you some of the things you’ll be able to do with your new tools to help you efficiently build,\ncompile, and deploy React applications in a modern, standard, and professional way.\nIntroducing Visual Studio Code\nIn my more than 25 years as a web developer, I’ve used many different code editors, and I still switch\ncode editors from time to time depending on the project or the type of code I’m writing.\nHowever, there always seems to be a “popular” code editor that the majority of web developers use.\nWhich editor is the popular one has changed several times over the years, but as of this writing, the",
		"In my more than 25 years as a web developer, I’ve used many different code editors, and I still switch\ncode editors from time to time depending on the project or the type of code I’m writing.\nHowever, there always seems to be a “popular” code editor that the majority of web developers use.\nWhich editor is the popular one has changed several times over the years, but as of this writing, the\ncode editor that seems to be most widely used for writing front- end web code is Microsoft’s Visual\nStudio Code (aka VS Code), shown in Figure I-1.\nFIGURE I- 1: VS Code xxxi\nIntroductIon\nVisual Studio Code is free and open source, and it’s available for Windows, Linux, and MacOS. It\nfeatures built- in support for React development and many plugins have been developed for it that can\nbe helpful for writing and debugging React projects.\nFor these reasons, I’ll be using the latest version of Visual Studio Code in this book, and my screen-",
		"FIGURE I- 1: VS Code xxxi\nIntroductIon\nVisual Studio Code is free and open source, and it’s available for Windows, Linux, and MacOS. It\nfeatures built- in support for React development and many plugins have been developed for it that can\nbe helpful for writing and debugging React projects.\nFor these reasons, I’ll be using the latest version of Visual Studio Code in this book, and my screen-\nshots and step-b y- step instructions may be specific to Visual Studio Code in some places. If you\nchoose to use a different code editor, be aware that you’ll need to translate a few specific instructions\nto your environment.\nIf you don’t already have Visual Studio Code installed, follow these steps to get it:\n1. Open code.visualstudio.com in your web browser and click the download link for your\noperating system (Figure I-2).\nFIGURE I- 2: Download VS Code\nxxxii\nIntroductIon\n2. Double- click the downloaded file to start the installation process.",
		"to your environment.\nIf you don’t already have Visual Studio Code installed, follow these steps to get it:\n1. Open code.visualstudio.com in your web browser and click the download link for your\noperating system (Figure I-2).\nFIGURE I- 2: Download VS Code\nxxxii\nIntroductIon\n2. Double- click the downloaded file to start the installation process.\n3. Accept the default options if you’re presented with any options during installation.\nOnce you have Visual Studio Code, launch it. If this is the first time you’ve used it, you’ll see the\nwelcome screen, as shown in Figure I-3.\nFIGURE I- 3: The VS Code welcome screen\nIf you’d like to open the welcome screen at any point, you can do so by selecting Get Started from the\nHelp menu.\nThe first and most important thing to learn about VS Code is how to use the Command Palette. The\nCommand Palette gives you quick access to all of VS Code’s commands. Follow these steps to become\nfamiliar with the Command Palette:",
		"FIGURE I- 3: The VS Code welcome screen\nIf you’d like to open the welcome screen at any point, you can do so by selecting Get Started from the\nHelp menu.\nThe first and most important thing to learn about VS Code is how to use the Command Palette. The\nCommand Palette gives you quick access to all of VS Code’s commands. Follow these steps to become\nfamiliar with the Command Palette:\n1. Open the Command Palette by selecting it from the View menu, or by pressing\nCommand+Shift+P (on MacOS) or CTRL+Shift+P (on Windows). An input box will appear\nat the top of the VS Code interface, as shown in Figure I-4.\nNOTE Since you’re likely going to be using the Command Palette regularly,\ntake a moment to memorize that keyboard shortcut.\nxxxiii\nIntroductIon\nFIGURE I- 4: The VS Code Command Palette\n2. Type new file into the Command Palette input field. As you type, you’ll see a list of available\ncommands below your input.",
		"at the top of the VS Code interface, as shown in Figure I-4.\nNOTE Since you’re likely going to be using the Command Palette regularly,\ntake a moment to memorize that keyboard shortcut.\nxxxiii\nIntroductIon\nFIGURE I- 4: The VS Code Command Palette\n2. Type new file into the Command Palette input field. As you type, you’ll see a list of available\ncommands below your input.\n3. When you see File: New Untitled File at the top of the Command Palette (as shown in\nFigure I-5), press Enter. A new untitled file will be created.\nFIGURE I- 5: Creating a new file using the Command Palette\nxxxiv\nIntroductIon\n4. Open the Command Palette again and start typing save. When File: Save is highlighted, press\nEnter to save your file. Give it a name ending with .html (such as index.html).\n5. Type ! on the first line of your new file and then press the Tab key. The scaffolding for a\nnew HTML file will be written for you, which will look like Figure I-6. This magical code-",
		"xxxiv\nIntroductIon\n4. Open the Command Palette again and start typing save. When File: Save is highlighted, press\nEnter to save your file. Give it a name ending with .html (such as index.html).\n5. Type ! on the first line of your new file and then press the Tab key. The scaffolding for a\nnew HTML file will be written for you, which will look like Figure I-6. This magical code-\ngenerating feature is called Emmet. Emmet can be used to automate many routine tasks and\nspeed the writing of code, and it would be a great idea to start getting familiar with it and\npracticing the use of it right away.\n6. Use CTRL+s or the Command Palette to save your new file.\nFIGURE I- 6: Using Emmet to save typing\nNode.js\nNode.js started as a way to run JavaScript on web servers. The benefits of doing this are that, using\nNode.js (also known as just “Node”), programmers can use the same language on the client side (in",
		"practicing the use of it right away.\n6. Use CTRL+s or the Command Palette to save your new file.\nFIGURE I- 6: Using Emmet to save typing\nNode.js\nNode.js started as a way to run JavaScript on web servers. The benefits of doing this are that, using\nNode.js (also known as just “Node”), programmers can use the same language on the client side (in\nthe web browser) as they use on the web server (aka “server side”). Not only does this reduce the\nnumber of programming languages that a programmer or a team of programmers needs to be fluent\nin, but Node.js also makes communication between the server and web browsers easier because both\nare speaking the same language.\nFigure I-7 shows a basic web application with Node.js running on the server and JavaScript running\nin a web browser.\nxxxv\nIntroductIon\nReact.js Node.js\nPOST\nusername: cminnick\nusername = cminnick&password=xxxxxx\npassword: xxxxxx\nlogin.js\nRESPONSE\nLogin\n{\"id\" : \"1\",\n\"fname\" : \"Chris\",\n\"1name\" : \"Minnick\"}\nClient Server",
		"are speaking the same language.\nFigure I-7 shows a basic web application with Node.js running on the server and JavaScript running\nin a web browser.\nxxxv\nIntroductIon\nReact.js Node.js\nPOST\nusername: cminnick\nusername = cminnick&password=xxxxxx\npassword: xxxxxx\nlogin.js\nRESPONSE\nLogin\n{\"id\" : \"1\",\n\"fname\" : \"Chris\",\n\"1name\" : \"Minnick\"}\nClient Server\nFIGURE I- 7: Client- side React and server-s ide Node\nAs Node.js became popular, people also started to run it on their own computers as a way to run\nJavaScript programs outside of web browsers. Specifically, web developers used Node.js to run tools for\nautomating many of the complex tasks involved in modern web development, as shown in Figure I-8.\n</>\nDEVELOPMENT\n• VS Code\n• Node.js\n• version control\nSERVER\n• Node.js\n• database\nCLIENT\n• Web Browser\nJavaScript\n• ReactJS\nFIGURE I- 8: Development, client- side, and server- side\nxxxvi\nIntroductIon\nCommon tasks that take place in development and that can be aided by Node.js include:",
		"automating many of the complex tasks involved in modern web development, as shown in Figure I-8.\n</>\nDEVELOPMENT\n• VS Code\n• Node.js\n• version control\nSERVER\n• Node.js\n• database\nCLIENT\n• Web Browser\nJavaScript\n• ReactJS\nFIGURE I- 8: Development, client- side, and server- side\nxxxvi\nIntroductIon\nCommon tasks that take place in development and that can be aided by Node.js include:\n➤➤ Minification: The process of removing spaces, line breaks, comments, and other code that’s\nnot required for the program to run, but that is helpful for people who work on the program.\nMinification makes scripts, web pages, and stylesheets more efficient and faster. Figure I-9\nshows the difference between JavaScript code as it’s written by a programmer and min-\nified code.\nFIGURE I- 9: Minification\n➤➤ Transpiling: The process of converting programming code from one version of a program-\nming language into another version. This is necessary in web development because not all",
		"Minification makes scripts, web pages, and stylesheets more efficient and faster. Figure I-9\nshows the difference between JavaScript code as it’s written by a programmer and min-\nified code.\nFIGURE I- 9: Minification\n➤➤ Transpiling: The process of converting programming code from one version of a program-\nming language into another version. This is necessary in web development because not all\nweb browsers support the same set of new JavaScript features, but they do all support some\ncore subset of JavaScript features. By using a JavaScript transpiler, programmers can write\ncode using the latest version of JavaScript and then the transpiled code can be run in any web\nbrowser. Figure I-10 shows an example use of JavaScript template strings, which were intro-\nduced in ES2015, along with their equivalent in an earlier version of JavaScript.\nxxxvii\nIntroductIon\nFIGURE I- 10: Transpiling example\n➤➤ Module bundling: A typical website can make use of hundreds of individual JavaScript",
		"browser. Figure I-10 shows an example use of JavaScript template strings, which were intro-\nduced in ES2015, along with their equivalent in an earlier version of JavaScript.\nxxxvii\nIntroductIon\nFIGURE I- 10: Transpiling example\n➤➤ Module bundling: A typical website can make use of hundreds of individual JavaScript\nprograms. If a web browser had to download each of these different programs individually, it\nwould significantly slow down web pages due to the overhead involved with requesting files\nfrom web servers. The main job of a module bundler is to combine (or “bundle”) the\nJavaScript and other code involved in a web application to make serving the application\nfaster. Because a bundler has to do work to all of the files in a program, it also is a good\ncentral place for tasks like minification and transpiling to take place, through the use of\nplugins. Figure I-11 illustrates the process of module bundling.\nxxxviii\nIntroductIon\n.js .png\nbundle.js .css\n.css .js\n.png .png\nModule Bundler",
		"faster. Because a bundler has to do work to all of the files in a program, it also is a good\ncentral place for tasks like minification and transpiling to take place, through the use of\nplugins. Figure I-11 illustrates the process of module bundling.\nxxxviii\nIntroductIon\n.js .png\nbundle.js .css\n.css .js\n.png .png\nModule Bundler\n.png .css\nModules Static Files\nFIGURE I- 11: Module bundling\n➤➤ Package management: With so many different programs involved in JavaScript development,\njust installing, upgrading, and keeping track of them can be quite complex. A package man-\nager is a program that helps you with tasks related to the management of all these programs\n(which are also known as “packages” in Node.js lingo).\n➤➤ CSS preprocessor: A CSS preprocessor, such as SASS or LESS, allows you to write style\nsheets for your web application using a superset of CSS (such as SCSS) that supports the pro-\ngrammatic features that CSS lacks— things like variables, mathematic operations, functions,",
		"(which are also known as “packages” in Node.js lingo).\n➤➤ CSS preprocessor: A CSS preprocessor, such as SASS or LESS, allows you to write style\nsheets for your web application using a superset of CSS (such as SCSS) that supports the pro-\ngrammatic features that CSS lacks— things like variables, mathematic operations, functions,\nscope, and nesting. A CSS preprocessor produces standard CSS from code written using an\nalternative syntax.\n➤➤ Testing frameworks: Testing is an essential part of any web project. Properly written tests can\ntell you whether each piece of your application is working as it was designed. The process of\nwriting logic to test whether your application works as it should is also a powerful tool for\nhelping you to write better code.\n➤➤ Build automation: If you had to run each of the different tools involved in compiling a\nmodern web app every time you wanted to test it out and deploy it to the web, you would",
		"writing logic to test whether your application works as it should is also a powerful tool for\nhelping you to write better code.\n➤➤ Build automation: If you had to run each of the different tools involved in compiling a\nmodern web app every time you wanted to test it out and deploy it to the web, you would\nhave a very complex series of steps to follow and use to train anyone else who might work on\nthe code. Build automation is the process of writing a program or script that runs all of the\ndifferent tools for you in the right order to quickly and reliably optimize, compile, test, and\ndeploy applications.\nThese are just a few of the different types of tools that are written in JavaScript and run in Node.js\nthat front- end developers use on a regular basis. If you’d like to explore the vast universe of Node.js\npackages, visit the npm Package Repository at https://npmjs.com, or continue to the next section\nto learn about managing and installing Node.js packages.\nxxxix\nIntroductIon",
		"These are just a few of the different types of tools that are written in JavaScript and run in Node.js\nthat front- end developers use on a regular basis. If you’d like to explore the vast universe of Node.js\npackages, visit the npm Package Repository at https://npmjs.com, or continue to the next section\nto learn about managing and installing Node.js packages.\nxxxix\nIntroductIon\nGetting Started with Node.js\nThe most common way of interacting with Node.js is through commands typed into a UNIX- style\nterminal. You can access a terminal from within Visual Studio Code using three different methods:\n1. By selecting New Terminal from the Terminal menu.\n2. By right-c licking a folder in VS Code’s file explorer and selecting Open in Inte-\ngrated Terminal.\n3. By using the keyboard shortcut CTRL+~.\nWhichever way you choose (and I recommend getting comfortable with the keyboard shortcut to save\nyourself from having to switch to using your mouse), a window will open at the bottom of VS Code",
		"1. By selecting New Terminal from the Terminal menu.\n2. By right-c licking a folder in VS Code’s file explorer and selecting Open in Inte-\ngrated Terminal.\n3. By using the keyboard shortcut CTRL+~.\nWhichever way you choose (and I recommend getting comfortable with the keyboard shortcut to save\nyourself from having to switch to using your mouse), a window will open at the bottom of VS Code\nthat looks like Figure I-12.\nFIGURE I- 12: The VS Code Terminal\nThe first step in learning to use Node.js is to make sure that it’s installed on your computer. If you\nhave a computer running MacOS or Linux, chances are good that it’s already installed, but you may\nneed to upgrade to a newer version. On Windows, it may not be installed, but that’s easy to fix.\nFollow these steps to check whether you have Node.js installed, see what version is installed, and\nupgrade to the latest version:\n1. Open the Terminal in Visual Studio Code.\nxl\nIntroductIon",
		"have a computer running MacOS or Linux, chances are good that it’s already installed, but you may\nneed to upgrade to a newer version. On Windows, it may not be installed, but that’s easy to fix.\nFollow these steps to check whether you have Node.js installed, see what version is installed, and\nupgrade to the latest version:\n1. Open the Terminal in Visual Studio Code.\nxl\nIntroductIon\n2. In the Terminal, type node - v. If Node.js is installed, it will return a version number. If the\nversion number is lower than 14.0, you’ll need to upgrade. Proceed to step 4. If your version\nof Node.js is greater than 14.0, you may still want to proceed to step 4 and upgrade to the\nlatest version of Node.js, but it’s not required.\n3. If Node.js is not installed, you’ll get a message that node is an unknown command. Proceed\nto step 4.\n4. Go to https://nodejs.org in your web browser and click the link to download the current\nLTS version of Node.js.",
		"of Node.js is greater than 14.0, you may still want to proceed to step 4 and upgrade to the\nlatest version of Node.js, but it’s not required.\n3. If Node.js is not installed, you’ll get a message that node is an unknown command. Proceed\nto step 4.\n4. Go to https://nodejs.org in your web browser and click the link to download the current\nLTS version of Node.js.\n5. When the Node.js installer finishes downloading, double- click it and follow the instructions\nto install it.\n6. If you have a Terminal window open in Visual Studio Code, close it and then re-o pen it.\n7. Type node - v into your Terminal. You should now see that you have the latest version of\nNode.js installed.\nNode.js Package Management with yarn or npm\nNow that you have Node.js installed, the next step is to learn to use a package manager to install and\nupgrade Node.js packages. When you installed Node.js, you also installed a package manager called",
		"7. Type node - v into your Terminal. You should now see that you have the latest version of\nNode.js installed.\nNode.js Package Management with yarn or npm\nNow that you have Node.js installed, the next step is to learn to use a package manager to install and\nupgrade Node.js packages. When you installed Node.js, you also installed a package manager called\nnpm. This is the package manager that we’ll be using in this book, because it’s the most commonly\nused one, and because you already have it. There are other package managers, however. One of them,\nwhich has become quite widely used, for a number of reasons that we don’t have the space to go into\nhere, is called yarn. The commands that you use for npm and yarn are actually quite similar. If you’d\nlike to find out more about yarn, and why you might want to use it, you can do so by visiting\nwww.yarnpkg.com.\nIf you have Node.js installed, you already have npm installed. You can verify this by following\nthese steps:",
		"here, is called yarn. The commands that you use for npm and yarn are actually quite similar. If you’d\nlike to find out more about yarn, and why you might want to use it, you can do so by visiting\nwww.yarnpkg.com.\nIf you have Node.js installed, you already have npm installed. You can verify this by following\nthese steps:\n1. Open the Terminal in Visual Studio Code.\n2. Type npm - v at the command line. You should get a response similar to the one shown in\nFigure I-13.\nFIGURE I- 13: Checking that npm is installed\nxli\nIntroductIon\nIf you have an older version of npm installed, it can cause some of the commands we’ll run in this\nIntroduction and the book’s chapters to not work correctly. If you use MacOS, you can upgrade npm\nby entering the following command in the Terminal:\nsudo npm install - g npm\nAfter you type this command in the Terminal and press Enter, you’ll be asked for a password. This is\nthe password that you use to log in to your computer.",
		"Introduction and the book’s chapters to not work correctly. If you use MacOS, you can upgrade npm\nby entering the following command in the Terminal:\nsudo npm install - g npm\nAfter you type this command in the Terminal and press Enter, you’ll be asked for a password. This is\nthe password that you use to log in to your computer.\nIf you use Windows, you can upgrade npm by entering the following command:\nnpm install - g npm\nNote that you must have administrative access to your computer to run this command.\nThe npm install command is how you can download and install Node.js packages to your com-\nputer so you can run them or so other programs can make use of them. When a computer program\nneeds another computer program in order to run, we call the program it requires a dependency.\nBecause Node.js programs are made up of small packages that often individually have reusable and\nlimited functionality, it’s not uncommon for a Node.js package to have hundreds of dependencies.",
		"puter so you can run them or so other programs can make use of them. When a computer program\nneeds another computer program in order to run, we call the program it requires a dependency.\nBecause Node.js programs are made up of small packages that often individually have reusable and\nlimited functionality, it’s not uncommon for a Node.js package to have hundreds of dependencies.\nWhen you run npm install followed by the name of a Node.js package, npm looks for that package\nin the npm repository, downloads it (along with all of its dependencies), and installs it. Packages may\nbe installed globally, which makes them available to any program on your computer, by specifying the\n- g flag after the npm install command. So, when we say npm install- g npm, what happens is that\nthe npm package installs the latest version of itself. In other words, it upgrades.\nIn addition to being able to install packages globally, npm can also install packages locally, which",
		"be installed globally, which makes them available to any program on your computer, by specifying the\n- g flag after the npm install command. So, when we say npm install- g npm, what happens is that\nthe npm package installs the latest version of itself. In other words, it upgrades.\nIn addition to being able to install packages globally, npm can also install packages locally, which\nmakes them available only to the current project.\nNOTE Whenever possible, it’s a good practice to only install packages locally\nin order to reduce the potential for version conflicts and to make your pro-\ngrams more reusable and more easily shared.\nFollow these instructions to see the npm install command in action:\n1. Open Visual Studio Code and click the File Explorer icon on the left toolbar.\n2. Click Open Folder and use the file browser that it opens to create a new folder named\nchapter- 0 in your computer’s Documents folder and open that folder.",
		"grams more reusable and more easily shared.\nFollow these instructions to see the npm install command in action:\n1. Open Visual Studio Code and click the File Explorer icon on the left toolbar.\n2. Click Open Folder and use the file browser that it opens to create a new folder named\nchapter- 0 in your computer’s Documents folder and open that folder.\n3. Open the integrated Terminal application in Visual Studio Code. It will open a command- line\ninterface and set the current directory to the folder that you have open.\n4. Type npm init - y. Running npm init creates a new file called package.json, whose pur-\npose is to track dependencies and other meta information about your node package.\nxlii\nIntroductIon\n5. Type npm install learnyounode - g, or sudo npm install learnyounode - g (on\nMacOS or Linux). This will install an npm package created by NodeSchool (nodeschool.\nio) that teaches you how to use Node.js. As the learnyounode package is downloaded",
		"pose is to track dependencies and other meta information about your node package.\nxlii\nIntroductIon\n5. Type npm install learnyounode - g, or sudo npm install learnyounode - g (on\nMacOS or Linux). This will install an npm package created by NodeSchool (nodeschool.\nio) that teaches you how to use Node.js. As the learnyounode package is downloaded\nand installed, you’ll see some messages fly by on the screen (and possibly a few warnings or\nerrors— these are normal and nothing to worry about).\n6. When the package has finishing installing, type learnyounode in the Terminal to run it. Your\ncommand prompt will be replaced by a menu of lessons. I recommend going through at least\nthe first one or two of these lessons at your convenience so that you can get a better idea of\nwhat Node.js is, although a deep understanding isn’t necessary for learning React.\nNOTE You may get an error message saying that running scripts is disabled\nwhen you try to run the npm install command on Windows. If you do,",
		"the first one or two of these lessons at your convenience so that you can get a better idea of\nwhat Node.js is, although a deep understanding isn’t necessary for learning React.\nNOTE You may get an error message saying that running scripts is disabled\nwhen you try to run the npm install command on Windows. If you do,\nentering the following command into the Terminal should solve the problem:\nSet- ExecutionPolicy - Scope Process - ExecutionPolicy Bypass\nChrome DevTools\nGoogle’s Chrome browser includes a powerful set of tools for inspecting and debugging websites and\nweb applications. Follow these steps to get started with using Chrome DevTools:\n1. Open your Chrome browser and go to www.example.com. You’ll see a simple exam-\nple web page. The simplicity of this page makes it a great place to start to learn about\nChrome DevTools.\n2. Open the Chrome DevTools panel by clicking the three dots in the upper- right corner of",
		"web applications. Follow these steps to get started with using Chrome DevTools:\n1. Open your Chrome browser and go to www.example.com. You’ll see a simple exam-\nple web page. The simplicity of this page makes it a great place to start to learn about\nChrome DevTools.\n2. Open the Chrome DevTools panel by clicking the three dots in the upper- right corner of\nChrome (this is known as the Chrome Menu) and selecting More Tools ➢ Developer Tools\nor by using the keyboard shortcut: Command+Option+I (on MacOS) or CTRL+Shift+I\n(on Windows). The keyboard shortcut is not only easier, it is also unlikely to ever change,\nwhereas the location of the Developer Tools menu item has changed several times over the\nyears. Either way you open it, a panel will open up in your browser, containing the DevTools,\nas shown in Figure I-14.\nNOTE The default docking position for Chrome DevTools is on the right side\nof the browser window. You can change where the tools are docked by clicking",
		"whereas the location of the Developer Tools menu item has changed several times over the\nyears. Either way you open it, a panel will open up in your browser, containing the DevTools,\nas shown in Figure I-14.\nNOTE The default docking position for Chrome DevTools is on the right side\nof the browser window. You can change where the tools are docked by clicking\nthe three dots (known as a “kebab” menu icon) in the upper- right corner of the\nDevTools pane.\nxliii\nIntroductIon\nFIGURE I- 14: Chrome DevTools\n3. Look for the element selector tool in the upper-l eft corner of the DevTools panel and click it.\nYou can use the element selector tool to inspect the different HTML elements in a web page.\n4. Use the element selector tool to highlight different parts of the www.example.com web page.\nWhen you have the header of the page highlighted, click it. The HTML that creates the\nheader will be highlighted in the source code view in DevTools, and the CSS styles that are",
		"You can use the element selector tool to inspect the different HTML elements in a web page.\n4. Use the element selector tool to highlight different parts of the www.example.com web page.\nWhen you have the header of the page highlighted, click it. The HTML that creates the\nheader will be highlighted in the source code view in DevTools, and the CSS styles that are\napplied to the header will be shown to the right of the source code.\n5. Double- click the words Example Domain inside the <h1> element in the source code view.\nThe words will become highlighted and editable.\n6. With the words Example Domain highlighted in the source code view, type new words over\nthem to replace them and then press Enter to exit the source editing mode. Your new text will\nappear in the browser window as the <h1> element.\n7. Find the <h1> element style in the styles pane to the right of the source code window and\ndouble- click it.\nxliv\nIntroductIon",
		"6. With the words Example Domain highlighted in the source code view, type new words over\nthem to replace them and then press Enter to exit the source editing mode. Your new text will\nappear in the browser window as the <h1> element.\n7. Find the <h1> element style in the styles pane to the right of the source code window and\ndouble- click it.\nxliv\nIntroductIon\n8. Try changing the styles that are applied to the <h1> element and notice that they modify\nwhat’s showing in the browser window.\n9. Click the Console tab at the top of the DevTools pane. This will open the JavaScript console.\n10. Type the following JavaScript into the JavaScript console:\ndocument.getElementsByTagName('h1')[0].innerText\nWhen you press Enter, the text between the opening and closing <h1> tags will be logged to\nthe console.\nThe important thing to know about everything we’ve done with the Chrome DevTools so far, and\nthe first key to understanding how React works, is that you’re not actually changing the HTML",
		"document.getElementsByTagName('h1')[0].innerText\nWhen you press Enter, the text between the opening and closing <h1> tags will be logged to\nthe console.\nThe important thing to know about everything we’ve done with the Chrome DevTools so far, and\nthe first key to understanding how React works, is that you’re not actually changing the HTML\nweb page itself. That is safely stored on a web server. What you’re changing is your web browser’s\nin- memory representation of the web page. If you refresh the page, it will be re- downloaded and will\nappear as it did when you first loaded it.\nThe method that DevTools uses to manipulate the web page is through the Document Object Model,\nor DOM. The DOM is the JavaScript application programming interface (API) for web pages. By\nmanipulating the DOM, you can dynamically alter anything in a web browser window. DOM\nmanipulation is the way that JavaScript frameworks and libraries, including React, make web pages",
		"The method that DevTools uses to manipulate the web page is through the Document Object Model,\nor DOM. The DOM is the JavaScript application programming interface (API) for web pages. By\nmanipulating the DOM, you can dynamically alter anything in a web browser window. DOM\nmanipulation is the way that JavaScript frameworks and libraries, including React, make web pages\nmore interactive and more like native desktop applications.\nReact Developer Tools\nTo help developers debug React applications, Facebook created a browser extension called React\nDeveloper Tools. React Developer Tools is currently only available for Chrome and Firefox. Once\ninstalled, React Developer Tools gives you two new buttons in the browser developer tools: Compo-\nnents and Profiler.\nLet’s first look at how to install React Developer Tools and then we’ll look at what it does.\nFollow these steps to install React Developer Tools in Chrome:\n1. Go to the Chrome Web Store at https://chrome.google.com/webstore using your",
		"installed, React Developer Tools gives you two new buttons in the browser developer tools: Compo-\nnents and Profiler.\nLet’s first look at how to install React Developer Tools and then we’ll look at what it does.\nFollow these steps to install React Developer Tools in Chrome:\n1. Go to the Chrome Web Store at https://chrome.google.com/webstore using your\nChrome browser.\n2. Enter React Developer Tools into the search box. The first result will be the React Developer\nTools extension by Facebook.\n3. Click the React Developer Tools extension and then click the Add to Chrome button. The\nextension will be installed in your browser.\nHere’s how to install the React Developer Tools AddOn in Firefox:\n1. Open your Firefox browser and go to https://addons.mozilla.org/en- US/firefox/\naddon/react- devtools/.\n2. Click the Add to Firefox button.\nxlv\nIntroductIon\n3. When Firefox asks you for permission to install the AddOn, click Add.",
		"extension will be installed in your browser.\nHere’s how to install the React Developer Tools AddOn in Firefox:\n1. Open your Firefox browser and go to https://addons.mozilla.org/en- US/firefox/\naddon/react- devtools/.\n2. Click the Add to Firefox button.\nxlv\nIntroductIon\n3. When Firefox asks you for permission to install the AddOn, click Add.\nOnce it’s installed, follow these steps to get started with using the React Developer Tools:\n1. Open the Chrome DevTools or the Firefox Developer Tools.\n2. Notice that if you’re not currently viewing a web page that uses React, you won’t see any dif-\nference in the Developer Tools.\n3. Go to https://reactjs.org in your browser. In the Developer Tools, you’ll see new tabs\nfor Components and Profiler appear.\n4. Click the Components tab. You’ll see a tree view of the React user interface, as shown in\nFigure I-15.\nFIGURE I- 15: React Developer Tools Components view\nxlvi\nIntroductIon",
		"ference in the Developer Tools.\n3. Go to https://reactjs.org in your browser. In the Developer Tools, you’ll see new tabs\nfor Components and Profiler appear.\n4. Click the Components tab. You’ll see a tree view of the React user interface, as shown in\nFigure I-15.\nFIGURE I- 15: React Developer Tools Components view\nxlvi\nIntroductIon\nEach of the items in the React Components view is a different component in the React application.\nOn most public websites that use React, the component names that display in the React Developer\nTools won’t make much sense, and the React Developer Tools are only of limited functionality. This is\nbecause there are actually separate versions of React for development (which is when you’re building\nand debugging the application) and for production (which is when the application is deployed and\navailable to end users).\nThe production version of React uses minified component names, and most of the debugging func-",
		"because there are actually separate versions of React for development (which is when you’re building\nand debugging the application) and for production (which is when the application is deployed and\navailable to end users).\nThe production version of React uses minified component names, and most of the debugging func-\ntionality is removed in order to increase performance and decrease the size of the download required\nfor the browser to run React.\nSpend a few minutes clicking around the Components tab and exploring the different components.\nClick the inspector icon in the React Developer Tools, which appears in the upper left of the window\nand resembles the icon for the Chrome DevTools element inspector you saw earlier.\nThe React Developer Tools’ element inspector works similarly to the Chrome DevTools’ element\ninspector (and to the Firefox element inspector too, for that matter). The difference between these",
		"Click the inspector icon in the React Developer Tools, which appears in the upper left of the window\nand resembles the icon for the Chrome DevTools element inspector you saw earlier.\nThe React Developer Tools’ element inspector works similarly to the Chrome DevTools’ element\ninspector (and to the Firefox element inspector too, for that matter). The difference between these\ntwo tools is an essential one to understand, however. Whereas the browser’s element inspector can be\nused to highlight and view the HTML and styles that are in the browser’s DOM, the React element\ninspector allows you to highlight and view the React components that were rendered on the page.\nYou can think of the Components tab as a higher- level view.\nThe React components you can inspect through the React Developer Tools eventually produce the\nDOM nodes (which represent HTML and styles) that you can browse using the browser’s element\ninspector.",
		"inspector allows you to highlight and view the React components that were rendered on the page.\nYou can think of the Components tab as a higher- level view.\nThe React components you can inspect through the React Developer Tools eventually produce the\nDOM nodes (which represent HTML and styles) that you can browse using the browser’s element\ninspector.\nThe Profiler gives you information about the performance of your React application. Profiling is disa-\nbled in the production version of React, so this tab won’t do much when you view a public web page\nthat uses React. We’ll explore and use the Profiler and show how it can be used to debug and tune\nyour React applications in Chapter 5.\nIntro to Create React App\nThe most common way to get started with React is to use a node package called Create React App.\nCreate React App is an officially supported tool that installs a toolchain for React development and",
		"that uses React. We’ll explore and use the Profiler and show how it can be used to debug and tune\nyour React applications in Chapter 5.\nIntro to Create React App\nThe most common way to get started with React is to use a node package called Create React App.\nCreate React App is an officially supported tool that installs a toolchain for React development and\nconfigures a boilerplate React application that you can use as a starting point for your applications.\nTo install and run Create React App, you can use a command that comes as part of the npm package\nmanager called npx. npx is a package runner. Earlier in this Introduction, you used the npm install\ncommand to install a node package. Once a package is installed, you can run it by using the npm start\ncommand. npx is similar to a combination of npm install and npm start. If the package is already\ninstalled globally on your computer when you issue a command to run it with npx, the already-",
		"manager called npx. npx is a package runner. Earlier in this Introduction, you used the npm install\ncommand to install a node package. Once a package is installed, you can run it by using the npm start\ncommand. npx is similar to a combination of npm install and npm start. If the package is already\ninstalled globally on your computer when you issue a command to run it with npx, the already-\ninstalled package will be run. If it’s not installed, running it with npx will cause it to be downloaded,\ntemporarily installed locally, and run.\nxlvii\nIntroductIon\nTo create a new React app using Create React App, use the npx command, followed by create- react-\napp, followed by a name that you want to give your new React app. For example:\nnpx create- react- app my- new- app\nnaming Your react App\nThe name you choose for your new app is up to you, as long as it conforms to the rules of Node.js\npackage names. These rules are:\n➤➤ It must be less than 214 characters long.",
		"app, followed by a name that you want to give your new React app. For example:\nnpx create- react- app my- new- app\nnaming Your react App\nThe name you choose for your new app is up to you, as long as it conforms to the rules of Node.js\npackage names. These rules are:\n➤➤ It must be less than 214 characters long.\n➤➤ The name can’t start with a dot or underscore.\n➤➤ The name can’t have uppercase letters.\n➤➤ It can’t contain any characters that aren’t allowed in URLs (such as ampersands and dollar\nsigns) and that are “unsafe” in URLs (such as the percent symbol and spaces).\nIn addition to these rules, there are several common conventions for how Node.js packages, and\ntherefore apps created using Create React App, are named:\n➤➤ Keep it simple and as short as possible.\n➤➤ Use only lowercase letters.\n➤➤ Use dashes in place of spaces.\n➤➤ Don’t use the same name as a common Node.js package.\nMaking Your First react App\nFollow these steps to use Create React App to make your first React app:",
		"therefore apps created using Create React App, are named:\n➤➤ Keep it simple and as short as possible.\n➤➤ Use only lowercase letters.\n➤➤ Use dashes in place of spaces.\n➤➤ Don’t use the same name as a common Node.js package.\nMaking Your First react App\nFollow these steps to use Create React App to make your first React app:\n1. Make or open a new folder in Visual Studio Code.\n2. Open the Terminal and make your new folder the working directory. You can do this by\nright-c licking the folder name and choosing Open in Integrated Terminal, or by opening\nthe Terminal and using the Unix cd (for change directory) command to change the working\ndirectory to the one where you want to make the new app. Note that if you’re using Win-\ndows, your integrated terminal may be the Windows Command Prompt, in which case the\ncommand to change the working directory is dir.\n3. Use npx to run create- react- app and give your new application a name. For example:\nnpx create- react- app my- test- app",
		"directory to the one where you want to make the new app. Note that if you’re using Win-\ndows, your integrated terminal may be the Windows Command Prompt, in which case the\ncommand to change the working directory is dir.\n3. Use npx to run create- react- app and give your new application a name. For example:\nnpx create- react- app my- test- app\n4. Press Enter to start the installation of create- react- app and the configuration of your new\napp. You’ll see a series of messages and progress bars in the Terminal. You may also see some\nerrors and warnings, but often these aren’t anything to be concerned about.\nxlviii\nIntroductIon\n5. When the installation and configuration of your new React app finishes, change to the direc-\ntory containing your new app by typing cd followed by the name you gave to your app:\ncd my- test- app\n6. Start up your app by using the npm start command. Note: npm start is actually shorthand",
		"errors and warnings, but often these aren’t anything to be concerned about.\nxlviii\nIntroductIon\n5. When the installation and configuration of your new React app finishes, change to the direc-\ntory containing your new app by typing cd followed by the name you gave to your app:\ncd my- test- app\n6. Start up your app by using the npm start command. Note: npm start is actually shorthand\nfor npm run start. What you’re doing when you run npm start is that you’re causing a\nscript called start to run its commands.\n7. Wait and watch as your generated React app starts up and then opens in a browser to reveal\nthe React logo and a message, as shown in Figure I-16.\nFIGURE I- 16: The default Create React App boilerplate\n8. Open the Chrome DevTools window and use the Components pane that you installed with\nthe React Developer Tools to inspect your React app. Notice that this sample app is much\nsmaller and less complex than the one that makes up the reactjs.org website, which you",
		"the React logo and a message, as shown in Figure I-16.\nFIGURE I- 16: The default Create React App boilerplate\n8. Open the Chrome DevTools window and use the Components pane that you installed with\nthe React Developer Tools to inspect your React app. Notice that this sample app is much\nsmaller and less complex than the one that makes up the reactjs.org website, which you\ninspected earlier in this Introduction.\nxlix\nIntroductIon\nNow that you’ve created a React app, you can try making some changes to it by following\nthese steps:\n1. Leave the integrated Terminal in Visual Studio Code open and open src/App.js, which is\nlocated inside your application’s folder.\nNOTE React applications are made up of a hierarchy of components, and this\none is the top- level component, and the only one in a default application gen-\nerated by Create React App.\n2. Find the part of App.js that contains the code shown in Listing 0-1.\nLISTING 0- 1: the return statement in the default create react App boilerplate",
		"located inside your application’s folder.\nNOTE React applications are made up of a hierarchy of components, and this\none is the top- level component, and the only one in a default application gen-\nerated by Create React App.\n2. Find the part of App.js that contains the code shown in Listing 0-1.\nLISTING 0- 1: the return statement in the default create react App boilerplate\n<div className=\"App\">\n<header className=\"App- header\">\n<img src={logo} className=\"App-l ogo\" alt=\"logo\" />\n<p>\nEdit <code>src/App.js</code> and save to reload.\n</p>\n<a\nclassName=\"App- link\"\nhref=\"https://reactjs.org\"\ntarget=\"_blank\"\nrel=\"noopener noreferrer\"\n>\nLearn React\n</a>\n</header>\n</div>\nNOTE The HTML- like syntax you see here is JSX, which is a special feature of\nReact projects that we will cover in detail in Chapter 3.\n3. Change the text between the <p> and </p> tags and then save App.js.\n4. Switch back to your browser, and notice that the browser window has updated to reflect the\nchange you made to App.js!",
		"rel=\"noopener noreferrer\"\n>\nLearn React\n</a>\n</header>\n</div>\nNOTE The HTML- like syntax you see here is JSX, which is a special feature of\nReact projects that we will cover in detail in Chapter 3.\n3. Change the text between the <p> and </p> tags and then save App.js.\n4. Switch back to your browser, and notice that the browser window has updated to reflect the\nchange you made to App.js!\nl\nIntroductIon\nCongratulations, and Onward!\nIf you’ve made it this far, you’re well on your way to learning React. You have your toolchain set up,\nyou’ve learned the basics of using two in- browser testing tools (Chrome DevTools and React Devel-\noper Tools), you’ve installed Create React App, and you’ve used it to generate a boilerplate React\napplication.\nFeel free to play around with the tools and commands you learned in this Introduction, and to try\nmaking additional changes to the Create React App boilerplate code to see what happens.",
		"you’ve learned the basics of using two in- browser testing tools (Chrome DevTools and React Devel-\noper Tools), you’ve installed Create React App, and you’ve used it to generate a boilerplate React\napplication.\nFeel free to play around with the tools and commands you learned in this Introduction, and to try\nmaking additional changes to the Create React App boilerplate code to see what happens.\nWhen you’re ready, move on to Chapter 1, where you’ll get hands-o n experience with building and\nmodifying your first React components!\nREADER SUPPORT FOR THIS BOOK\nYou’ll find hundreds of code listings in this book. I’ve designed these to be simple enough to be easily\nunderstandable, but practical enough to be helpful as you transition from learning React to practicing\nwriting React code. To get the most out of this book, I recommend you try running and experiment-\ning with each of the code listings.\nTo make running the examples easier, I’ve put them all online, including working examples",
		"understandable, but practical enough to be helpful as you transition from learning React to practicing\nwriting React code. To get the most out of this book, I recommend you try running and experiment-\ning with each of the code listings.\nTo make running the examples easier, I’ve put them all online, including working examples\nwhere possible.\nCompanion Download Files\nAs you work through the examples in this book, you may choose either to type in all the code manu-\nally or to use the source code files that accompany the book. All the source code used in this book is\navailable for download from http://www.wiley.com/go/reactjsfoundations.\nWorking examples of each code listing, supplemental information, and a link to the book’s Github\nrepository are available at https://www.reactjsfoundations.com.\nIf you prefer to download and run the example code on your own computer, you can clone the\nrepository using Git and then follow the instructions in the README file to view working versions",
		"Working examples of each code listing, supplemental information, and a link to the book’s Github\nrepository are available at https://www.reactjsfoundations.com.\nIf you prefer to download and run the example code on your own computer, you can clone the\nrepository using Git and then follow the instructions in the README file to view working versions\nof every code listing.\nIf you don’t have Git installed, you can go to https://www.reactjsfoundations.com in your\nbrowser and click the Download button to download all of the code to your computer.\nIn the event that a “but” may have made it into this book, or some unforeseen update to React\nhas necessitated a change to any of the code in the book, you’ll find corrections at https://www.\nreactjsfoundations.com as well.\nli\nIntroductIon\nHow to Contact the Publisher\nIf you believe you’ve found a mistake in this book, please bring it to our attention. At John Wiley &",
		"In the event that a “but” may have made it into this book, or some unforeseen update to React\nhas necessitated a change to any of the code in the book, you’ll find corrections at https://www.\nreactjsfoundations.com as well.\nli\nIntroductIon\nHow to Contact the Publisher\nIf you believe you’ve found a mistake in this book, please bring it to our attention. At John Wiley &\nSons, we understand how important it is to provide our customers with accurate content, but even\nwith our best efforts an error may occur.\nIn order to submit your possible errata, please email it to our Customer Service Team at\nwileysupport@wiley.com with the subject line “Possible Book Errata Submission.”\nlii\n1\nHello, World!\nSince the beginning of time, the first program anyone learns to build in any new programming\nlanguage is a program that displays the words “Hello, World.” Of course, the words here aren’t\nimportant, and I would encourage you to choose any words you like to replace this cliché",
		"wileysupport@wiley.com with the subject line “Possible Book Errata Submission.”\nlii\n1\nHello, World!\nSince the beginning of time, the first program anyone learns to build in any new programming\nlanguage is a program that displays the words “Hello, World.” Of course, the words here aren’t\nimportant, and I would encourage you to choose any words you like to replace this cliché\nphrase. The point of this chapter is to quickly build up your understanding of how React works\nby using a simple and inconsequential program. But, don’t be deceived—t he foundational tools\nand techniques that you learn about in this chapter are essential to learning React. If you only\nread one chapter of this book, this would be the one. In this chapter, you’ll learn:\n➤➤ How to use React without a toolchain.\n➤➤ How to write your first React application.\n➤➤ How to make and modify a React application built with Create React App.\nREACT WITHOUT A BUILD TOOLCHAIN",
		"and techniques that you learn about in this chapter are essential to learning React. If you only\nread one chapter of this book, this would be the one. In this chapter, you’ll learn:\n➤➤ How to use React without a toolchain.\n➤➤ How to write your first React application.\n➤➤ How to make and modify a React application built with Create React App.\nREACT WITHOUT A BUILD TOOLCHAIN\nMost React application development uses a build toolchain (such as the one created by Create\nReact App) running in Node.js as its foundation. It is possible, however, to include React in an\nexisting website or to build a website that makes use of React by just importing a couple of\nscripts into a web page. You can even use React code alongside JavaScript code written using\nanother library or framework.\nFollow these steps to make an HTML page and to add React to it:\n1. Create a new folder in your Documents folder and open it in Visual Studio Code.",
		"existing website or to build a website that makes use of React by just importing a couple of\nscripts into a web page. You can even use React code alongside JavaScript code written using\nanother library or framework.\nFollow these steps to make an HTML page and to add React to it:\n1. Create a new folder in your Documents folder and open it in Visual Studio Code.\n2. Open the Command Palette (Command+Shift+P on MacOS or Control+Shift+P\non Windows) and run the File: New File command, or select File ➪ New File from\nthe top menu.\n3. Save your new file as index.html.\n2 ❘ CHAPTER 1 Hello, World!\n4. Type ! followed by the Tab key to generate an HTML template using emmet. If you prefer,\nyou can also type the following code into your new blank file:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>Hello, React!</title>\n</head>\n<body>\n</body>\n</html>",
		"2 ❘ CHAPTER 1 Hello, World!\n4. Type ! followed by the Tab key to generate an HTML template using emmet. If you prefer,\nyou can also type the following code into your new blank file:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>Hello, React!</title>\n</head>\n<body>\n</body>\n</html>\n5. Between the <body> and </body> tags, create an empty div element and give it an id attri­\nbute with the value of app. This is where you’re going to tell React to render its output. In\nthe React world, we call this the container element. The actual id value doesn’t matter here,\nbut app is a simple, easy to remember, and meaningful value that is very commonly used.\nNOTE You can put a React container element anywhere inside the body\nelement of a web page.\n6. Go to https://reactjs.org/docs/cdn- links.html in your browser and find the script",
		"the React world, we call this the container element. The actual id value doesn’t matter here,\nbut app is a simple, easy to remember, and meaningful value that is very commonly used.\nNOTE You can put a React container element anywhere inside the body\nelement of a web page.\n6. Go to https://reactjs.org/docs/cdn- links.html in your browser and find the script\ntags for including React and ReactDOM from a content delivery network (CDN), as shown\nin Figure 1­1.\n7. Copy both script tags and paste them right before the </body> tag in index.html.\nNOTE The reason these must go at the end of the body of your web page is\nthat they can make changes to your web page. Because of the way JavaScript\nloads and then executes immediately after it loads, the browser will show an\nerror message if your React code is loaded and executed before the container\nelement is loaded.\nThe first script, react.development.js, is the actual React library that handles the rendering",
		"that they can make changes to your web page. Because of the way JavaScript\nloads and then executes immediately after it loads, the browser will show an\nerror message if your React code is loaded and executed before the container\nelement is loaded.\nThe first script, react.development.js, is the actual React library that handles the rendering\nof React components, the flow of data between components, responding to events, and all of the\nfunctionality that you, as a React developer, have control over in React.\nThe second script, react- dom.development.js, handles the communication and translation\nbetween the React application that you write and the browser DOM. In other words, it controls\nhow and when your component renders and updates in the browser.\nReact Without a Build Toolchain ❘ 3\nFIGURE 1- 1: The React CDN Links\nThe CDN links that you copy from reactjs.org will explicitly specify the latest version of React",
		"between the React application that you write and the browser DOM. In other words, it controls\nhow and when your component renders and updates in the browser.\nReact Without a Build Toolchain ❘ 3\nFIGURE 1- 1: The React CDN Links\nThe CDN links that you copy from reactjs.org will explicitly specify the latest version of React\nat the time that you view the page. If you want to make sure that your page always uses the latest\nversion of React, change the number following the @ to “latest” as shown here:\n<script src=\"https://unpkg.com/react@latest/umd/react.development.js\"\ncrossorigin></script>\n<script src=\"https://unpkg.com/react- dom@latest/umd/react- dom.development.js\"\ncrossorigin></script>\nNOTE Notice the “umd” in the URLs in step 7. UMD stands for Universal\nModule Definition. UMD is what allows the CDN version of React to work in\nbrowsers without requiring a compile step.\n8. After the script tags that include the UMD versions of react and react- dom, write another",
		"<script src=\"https://unpkg.com/react- dom@latest/umd/react- dom.development.js\"\ncrossorigin></script>\nNOTE Notice the “umd” in the URLs in step 7. UMD stands for Universal\nModule Definition. UMD is what allows the CDN version of React to work in\nbrowsers without requiring a compile step.\n8. After the script tags that include the UMD versions of react and react- dom, write another\nscript tag that includes a file (which we’ll make shortly) named HelloWorld.js:\n<script src=\"HelloWorld.js\"></script>\nYour index.html file should now match Listing 1­1.\n4 ❘ CHAPTER 1 Hello, World!\nLISTING 1- 1: The HTML file for using React without a toolchain\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>Hello, World!</title>\n</head>\n<body>\n<div id=\"app\"></div>\n<script src=\"https://unpkg.com/react@latest/umd/react.development.js\"\ncrossorigin></script>",
		"4 ❘ CHAPTER 1 Hello, World!\nLISTING 1- 1: The HTML file for using React without a toolchain\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>Hello, World!</title>\n</head>\n<body>\n<div id=\"app\"></div>\n<script src=\"https://unpkg.com/react@latest/umd/react.development.js\"\ncrossorigin></script>\n<script src=\"https://unpkg.com/react-d om@latest/umd/react-d om.development.js\"\ncrossorigin></script>\n<script src=\"HelloWorld.js\"></script>\n</body>\n</html>\n9. Create a new file in the same directory as index.html and name it HelloWorld.js.\n10. Add the following code to HelloWorld.js:\n'use strict';\nclass HelloWorld extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = { personName:'World' };\n}\nrender() {\nreturn React.createElement('h1', null, 'Hello, ' + this.state.personName);\n}\n}\n11. Add the following to the end of HelloWorld.js, after the code you entered in step 10:",
		"10. Add the following code to HelloWorld.js:\n'use strict';\nclass HelloWorld extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = { personName:'World' };\n}\nrender() {\nreturn React.createElement('h1', null, 'Hello, ' + this.state.personName);\n}\n}\n11. Add the following to the end of HelloWorld.js, after the code you entered in step 10:\nconst domContainer = document.querySelector('#app');\nReactDOM.render(React.createElement(HelloWorld), domContainer);\n12. Open index.html in a web browser. You should see the message “Hello, World” displayed as\na first level heading, as shown in Figure 1­2.\n13. Change the value of the personName property in the state object inside the constructor\nfunction in HelloWorld.js as shown in Listing 1­2.\nLISTING 1- 2: Changing the state data in a component\n'use strict';\nclass HelloWorld extends React.Component {\nconstructor(props) {\nReact Without a Build Toolchain ❘ 5\nsuper(props);\nthis.state = { personName:'Murray' };\n}\nrender() {",
		"13. Change the value of the personName property in the state object inside the constructor\nfunction in HelloWorld.js as shown in Listing 1­2.\nLISTING 1- 2: Changing the state data in a component\n'use strict';\nclass HelloWorld extends React.Component {\nconstructor(props) {\nReact Without a Build Toolchain ❘ 5\nsuper(props);\nthis.state = { personName:'Murray' };\n}\nrender() {\nreturn React.createElement('h1', null, 'Hello, ' + this.state.personName);\n}\n}\nconst domContainer = document.querySelector('#app');\nReactDOM.render(React.createElement(HelloWorld), domContainer);\nFIGURE 1- 2: Hello, World running in a browser\n14. Save HelloWorld.js and refresh your browser window. You should see the update reflected.\nCongratulations! You’ve now built your first custom React application.\nSpend a few minutes examining the code for HelloWorld.js. If you’re familiar with JavaScript\nobjects and classes, you’ll notice that there’s nothing magic going on here. Everything is straightfor­\nward JavaScript.",
		"14. Save HelloWorld.js and refresh your browser window. You should see the update reflected.\nCongratulations! You’ve now built your first custom React application.\nSpend a few minutes examining the code for HelloWorld.js. If you’re familiar with JavaScript\nobjects and classes, you’ll notice that there’s nothing magic going on here. Everything is straightfor­\nward JavaScript.\n6 ❘ CHAPTER 1 Hello, World!\nHere’s a quick line­b y­ line rundown of everything that’s happening in this file:\n1. We create a JavaScript class called HelloWorld that extends the React.Component class:\nclass HelloWorld extends React.Component {\nNOTE You’ll learn about using classes in JavaScript in Chapter 4.\n2. Next, we write the constructor:\nconstructor(props) {\nsuper(props);\nthis.state = { personName:'World' };\n}\nThe constructor will run just once, before the component is mounted. In the constructor, we\nuse the super method to import properties from the base class (which is React.Component).",
		"class HelloWorld extends React.Component {\nNOTE You’ll learn about using classes in JavaScript in Chapter 4.\n2. Next, we write the constructor:\nconstructor(props) {\nsuper(props);\nthis.state = { personName:'World' };\n}\nThe constructor will run just once, before the component is mounted. In the constructor, we\nuse the super method to import properties from the base class (which is React.Component).\nFinally, we create an object called state and give it a property called personName.\n3. We create a new function in HelloWorld called render():\nrender() {\nreturn React.createElement('h1', null, 'Hello,' + this.state.personName);\n}\nThe render function produces the output of every React component. This output is gener­\nated by using the React.createElement method, which takes three parameters:\n➤➤ The HTML element to create\n➤➤ Optional React element properties\n➤➤ The content that should be put into the created element",
		"render() {\nreturn React.createElement('h1', null, 'Hello,' + this.state.personName);\n}\nThe render function produces the output of every React component. This output is gener­\nated by using the React.createElement method, which takes three parameters:\n➤➤ The HTML element to create\n➤➤ Optional React element properties\n➤➤ The content that should be put into the created element\n4. Finally, we use the render method of ReactDOM to render the return value of the\nHelloWorld class inside of the HTML document:\nconst domContainer = document.querySelector('#app');\nReactDOM.render(React.createElement(HelloWorld), domContainer);\nNOTE Notice that we’re using two different functions named render(). The\nfirst one, React.render(), creates the output of a component. The second one,\nReactDOM.render(), causes that output to be displayed in the browser window.\nIf this seems like a lot of work and code to just make a web page display text, you’re right— it is.",
		"ReactDOM.render(React.createElement(HelloWorld), domContainer);\nNOTE Notice that we’re using two different functions named render(). The\nfirst one, React.render(), creates the output of a component. The second one,\nReactDOM.render(), causes that output to be displayed in the browser window.\nIf this seems like a lot of work and code to just make a web page display text, you’re right— it is.\nFortunately, there are much easier ways to write React code, thanks to the tools that you learned\nabout in this book’s Introduction—s pecifically, Node.js and Create React App.\nInteractive “Hello, World” with Create React App and JSX ❘ 7\nLet’s wrap up this chapter by combining everything you’ve learned so far into making an interactive\nversion of the Hello, World application with Create React App.\nINTERACTIVE “HELLO, WORLD” WITH CREATE REACT\nAPP AND JSX\nAlthough it’s possible to use React without a toolchain by including the UMD build into an HTML",
		"Interactive “Hello, World” with Create React App and JSX ❘ 7\nLet’s wrap up this chapter by combining everything you’ve learned so far into making an interactive\nversion of the Hello, World application with Create React App.\nINTERACTIVE “HELLO, WORLD” WITH CREATE REACT\nAPP AND JSX\nAlthough it’s possible to use React without a toolchain by including the UMD build into an HTML\nfile, this is far from an ideal way to do anything but a simple application.\nBy using a toolchain, you gain a set of testing and debugging tools that can help you write better\ncode. You also gain the ability to compile your React components so that they’ll run faster in the\nuser’s browser.\nYou’ve already seen how to use Create React App to build a boilerplate user interface. Now let’s look\nat how to build something slightly more complex and interactive:\nNOTE If you’d like to bypass the process of installing and configuring the Cre-\nate React App boilerplate, you can skip the first three steps and use the same",
		"user’s browser.\nYou’ve already seen how to use Create React App to build a boilerplate user interface. Now let’s look\nat how to build something slightly more complex and interactive:\nNOTE If you’d like to bypass the process of installing and configuring the Cre-\nate React App boilerplate, you can skip the first three steps and use the same\napp you created in the book’s Introduction.\n1. Using Visual Studio Code, create a new directory and open the integrated terminal.\n2. Type npx create- react- app react- js- foundations into the terminal and press Enter.\n3. Once Create React App finishes its work, type cd react- js- foundations followed by npm\nstart. Create React App will start up your application and open it in a browser.\n4. Open src/App.js in Visual Studio Code.\n5. Update App.js to match Listing 1­3 and then save the file.\nLISTING 1- 3: An interactive Hello, World component\nimport React from 'react';\nimport './App.css';\nfunction App() {",
		"3. Once Create React App finishes its work, type cd react- js- foundations followed by npm\nstart. Create React App will start up your application and open it in a browser.\n4. Open src/App.js in Visual Studio Code.\n5. Update App.js to match Listing 1­3 and then save the file.\nLISTING 1- 3: An interactive Hello, World component\nimport React from 'react';\nimport './App.css';\nfunction App() {\nconst [personName,setPersonName] = React.useState('');\nreturn (\n<div className=\"App\">\n<h1>Hello {personName}</h1>\n<input type=\"text\" onChange={(e) => setPersonName(e.target.value)}/>\n</div>\n);\n}\nexport default App;\n8 ❘ CHAPTER 1 Hello, World!\n6. Return to your browser, and notice that the default Create React App screen has been\nreplaced with an input field and an h1 element above it.\nNOTE This ability of an app running in Create React App to detect when files\nhave changed and update what’s showing in the browser without you having\nto manually reload the page is called “hot reloading.”",
		"}\nexport default App;\n8 ❘ CHAPTER 1 Hello, World!\n6. Return to your browser, and notice that the default Create React App screen has been\nreplaced with an input field and an h1 element above it.\nNOTE This ability of an app running in Create React App to detect when files\nhave changed and update what’s showing in the browser without you having\nto manually reload the page is called “hot reloading.”\n7. Type into the input field. Everything you type should appear inside the h1 element, as shown\nin Figure 1­3.\nFIGURE 1- 3: The finished interactive Hello, World component!\n8. When you’re done playing around with this component, return to the built­ in terminal in VS\nCode and press Ctrl+c to stop the recompiling and hot reloading script.\nSummary ❘ 9\nSUMMARY\nCongratulations! In the last few pages, you’ve experienced the most primitive way to write React\ncode as well as the latest and most advanced way. The history of React has been one of gradually",
		"8. When you’re done playing around with this component, return to the built­ in terminal in VS\nCode and press Ctrl+c to stop the recompiling and hot reloading script.\nSummary ❘ 9\nSUMMARY\nCongratulations! In the last few pages, you’ve experienced the most primitive way to write React\ncode as well as the latest and most advanced way. The history of React has been one of gradually\nrefining the methods and tools used to write React to make it easier for developers. In these two\nexamples, you’ve seen the two extremes—a React application built without the aid of any tooling,\nand one built using Create React App and the latest enhancements and simplifications that have been\nadded to React as of this writing.\nIn this chapter, you learned:\n➤➤ How to write a React application with the UMD build of React.\n➤➤ The difference between React.render and ReactDOM.render.\n➤➤ How to write a component using React.createElement.\n➤➤ How to write and run a basic interactive component using Create React App.",
		"added to React as of this writing.\nIn this chapter, you learned:\n➤➤ How to write a React application with the UMD build of React.\n➤➤ The difference between React.render and ReactDOM.render.\n➤➤ How to write a component using React.createElement.\n➤➤ How to write and run a basic interactive component using Create React App.\nIn the following chapters, you’ll learn how all of this works. Continue on to the next chapter where\nyou’ll learn about the inner workings of React.js and how it fits into the big picture. After that,\nChapter 3 takes you further into working with more code.",
		"2\nThe Foundation of React\nReact is a JavaScript library for creating interactive user interfaces using components. It was\ncreated by Facebook in 2011 for use on Facebook’s newsfeed and on Instagram. In 2013, the\nfirst version of React was released to the public as open source software. Today, it’s used by\nmany of the largest websites and mobile apps, including Facebook, Instagram, Netflix, Reddit,\nDropbox, Airbnb, and thousands of others.\nWriting user interfaces with React requires a bit of a shift in how you think about web applica-\ntions. You need to understand what React is, how it works at a higher level, and the computer\nscience ideas and patterns that it’s based on. In this chapter, you’ll learn:\n➤➤ Why it’s called React.\n➤➤ What a Virtual DOM does.\n➤➤ The difference between composition and inheritance.\n➤➤ The difference between declarative and imperative programming.\n➤➤ The meaning of “idiomatic” with regard to React.\nWHAT’S IN A NAME?",
		"science ideas and patterns that it’s based on. In this chapter, you’ll learn:\n➤➤ Why it’s called React.\n➤➤ What a Virtual DOM does.\n➤➤ The difference between composition and inheritance.\n➤➤ The difference between declarative and imperative programming.\n➤➤ The meaning of “idiomatic” with regard to React.\nWHAT’S IN A NAME?\nLet’s start with the name “React.” Facebook designed React in response to its need to be able\nto efficiently update websites in response to events. Events that can trigger updates in websites\ninclude user input, new data coming into the application from other websites and data sources,\nand data coming into the application from sensors (such as location data from GPS chips).\nTraditionally, the way that web applications have dealt with data that changes over time is to\nrefresh themselves every so often, checking for new data in the process. Facebook wanted to\ncreate a way to more easily build applications that respond, or react to new data, rather than",
		"and data coming into the application from sensors (such as location data from GPS chips).\nTraditionally, the way that web applications have dealt with data that changes over time is to\nrefresh themselves every so often, checking for new data in the process. Facebook wanted to\ncreate a way to more easily build applications that respond, or react to new data, rather than\n12 ❘ CHAPTER 2 The FoundaTion oF ReacT\nsimply refreshing pages whether the underlying data has changed or not. You can think of the differ-\nence in approaches as pull (which is the traditional way of updating websites) vs. push (which is the\nreactive way to build websites).\nThis method of updating a user interface in response to data changes is called reactive programming.\nUI LAYER\nWeb applications typically are built and described using the Model- View- Controller (MVC) pattern.\nThe Model in MVC is the data layer, the Controller facilitates communication with the data layer,",
		"reactive way to build websites).\nThis method of updating a user interface in response to data changes is called reactive programming.\nUI LAYER\nWeb applications typically are built and described using the Model- View- Controller (MVC) pattern.\nThe Model in MVC is the data layer, the Controller facilitates communication with the data layer,\nand the View is what the user sees and interacts with. In an MVC application, the View sends input to\nthe Controller, which passes data between the data layer and the View. React is only concerned with\nthe V in MVC. It takes data as input and presents it to the user in some form.\nFigure 2-1 shows a diagram of the MVC pattern.\nMODEL\nupdates modifies\nuser input\nVIEW CONTROLLER\nFIGURE 2- 1: The MVC pattern\nReact itself doesn’t care whether the user is using a mobile phone, a tablet, a desktop web browser, a\nscreen reader, a command-l ine interface, or any other kind of device or interface that may be invented",
		"Figure 2-1 shows a diagram of the MVC pattern.\nMODEL\nupdates modifies\nuser input\nVIEW CONTROLLER\nFIGURE 2- 1: The MVC pattern\nReact itself doesn’t care whether the user is using a mobile phone, a tablet, a desktop web browser, a\nscreen reader, a command-l ine interface, or any other kind of device or interface that may be invented\nin the future. React just renders components. How those components get presented to the user is up\nto a separate library.\nThe library that handles rendering of React components in web browsers is called ReactDOM. If you\nwant to render React elements to native mobile apps, you use React Native. If you want to render\nReact components to static HTML, you can use ReactDOMServer.\nReactDOM has a number of functions for interfacing between React and web browsers, but the one\nthat every React application makes use of is called ReactDOM.render. Figure 2-2 illustrates the rela-\ntionship between React, ReactDOM, and a web browser.",
		"React components to static HTML, you can use ReactDOMServer.\nReactDOM has a number of functions for interfacing between React and web browsers, but the one\nthat every React application makes use of is called ReactDOM.render. Figure 2-2 illustrates the rela-\ntionship between React, ReactDOM, and a web browser.\nReact React.render() Virtual ReactDOM.render() <div id=\"app\">\nDOM\nComponent DOM </div>\nFIGURE 2- 2: React and ReactDOM\nVirtual DOM ❘ 13\nReactDOM is what makes it possible for user interfaces built in React to handle the quantity of\nscreen changes required by modern web applications so efficiently. It does this through the use of a\nVirtual DOM.\nVIRTUAL DOM\nThe Document Object Model, or DOM, is a web browser’s internal representation of a web page. It\nconverts HTML, styles, and content into nodes that can be operated on using JavaScript.\nIf you’ve ever used the getElementById function or set the innerHTML of an element, you’ve inter-",
		"Virtual DOM.\nVIRTUAL DOM\nThe Document Object Model, or DOM, is a web browser’s internal representation of a web page. It\nconverts HTML, styles, and content into nodes that can be operated on using JavaScript.\nIf you’ve ever used the getElementById function or set the innerHTML of an element, you’ve inter-\nacted with the DOM using JavaScript. Changes to the DOM cause changes to what you see in your\nweb browser, and updates made in the web browser (such as when you enter data into a form) cause\nchanges to the DOM.\nCompared to other kinds of JavaScript code, DOM manipulation is slow and inefficient. This is\nbecause whenever the DOM changes, the browser has to check whether the change will require the\npage to be redrawn and then the redrawing has to happen.\nAdding to the difficulty of DOM manipulation is that the DOM’s functions aren’t always easy to use\nand some of them have excessively long names like Document.getElementsByClassName. For both",
		"because whenever the DOM changes, the browser has to check whether the change will require the\npage to be redrawn and then the redrawing has to happen.\nAdding to the difficulty of DOM manipulation is that the DOM’s functions aren’t always easy to use\nand some of them have excessively long names like Document.getElementsByClassName. For both\nof these reasons, many different JavaScript DOM manipulation libraries have been created. The single\nmost popular and widely used DOM manipulation library of all time was jQuery. It gave web devel-\nopers an easy way to make updates to the DOM, and that changed the way we build user interfaces\non the web.\nAlthough jQuery made DOM manipulation easier, it left it up to programmers to program specifically\nwhen and how changes to the DOM would happen. The result was often inefficient user interfaces\nthat were slower both to download and to respond to user interactions because of their use of jQuery.\nAs a result, jQuery got a reputation for being slow.",
		"on the web.\nAlthough jQuery made DOM manipulation easier, it left it up to programmers to program specifically\nwhen and how changes to the DOM would happen. The result was often inefficient user interfaces\nthat were slower both to download and to respond to user interactions because of their use of jQuery.\nAs a result, jQuery got a reputation for being slow.\nWhen the engineers at Facebook designed React, they decided to take the details of how and when\nthe DOM is modified out of the hands of programmers. To do this, they created a layer between\nthe code that the programmer writes and the DOM. They called this intermediary layer the\nVirtual DOM.\nHere’s how it works:\n1. A programmer writes React code to render a user interface, which results in a single React\nelement being returned.\n2. ReactDOM’s render method creates a lightweight and simplified representation of the React\nelement in memory (this is the Virtual DOM).\n3. ReactDOM listens for events that require changes to the web page.",
		"Virtual DOM.\nHere’s how it works:\n1. A programmer writes React code to render a user interface, which results in a single React\nelement being returned.\n2. ReactDOM’s render method creates a lightweight and simplified representation of the React\nelement in memory (this is the Virtual DOM).\n3. ReactDOM listens for events that require changes to the web page.\n4. The ReactDOM.render method creates a new in-m emory representation of the web page.\n14 ❘ CHAPTER 2 The FoundaTion oF ReacT\n5. The ReactDOM library compares the new Virtual DOM representation of the web page to\nthe previous Virtual DOM representation and calculates the difference between the two. This\nprocess is called reconciliation.\n6. ReactDOM applies just the minimal set of changes to the browser DOM in the most efficient\nway that it can and using the most efficient batching and timing of changes.\nBy taking the programmer out of the process of actually making updates to the browser DOM,",
		"the previous Virtual DOM representation and calculates the difference between the two. This\nprocess is called reconciliation.\n6. ReactDOM applies just the minimal set of changes to the browser DOM in the most efficient\nway that it can and using the most efficient batching and timing of changes.\nBy taking the programmer out of the process of actually making updates to the browser DOM,\nReactDOM can decide on optimal timing and the optimal method for making required updates. This\ngreatly improves the efficiency of making updates to a browser view.\nFigure 2-3 is a diagram showing how the Virtual DOM works.\nPrevious DOM Next DOM\nDiff (erence)\nDOM\nFIGURE 2- 3: How the Virtual DOM works\nTHE PHILOSOPHY OF REACT\nIf you’ve used other JavaScript libraries, you may find React to be quite a bit different from your past\nexperience with programming dynamic user interfaces. By understanding the thinking behind why\nReact is like it is, you’ll have a better understanding and appreciation of it.",
		"Previous DOM Next DOM\nDiff (erence)\nDOM\nFIGURE 2- 3: How the Virtual DOM works\nTHE PHILOSOPHY OF REACT\nIf you’ve used other JavaScript libraries, you may find React to be quite a bit different from your past\nexperience with programming dynamic user interfaces. By understanding the thinking behind why\nReact is like it is, you’ll have a better understanding and appreciation of it.\nThe Philosophy of React ❘ 15\nThinking in Components\nReact is a library for creating and putting together (or composing) components to build user\ninterfaces. React components are independent pieces that can be reused and that can pass data to\neach other.\nA component can be something as simple as a button or it can be more complex, such as a navigation\nbar that’s made up of a collection of buttons and dropdowns.\nAs the programmer, it’s your job to decide how big or how small each component in your application\nshould be, but a good rule of thumb to think about is the idea of single responsibility.",
		"each other.\nA component can be something as simple as a button or it can be more complex, such as a navigation\nbar that’s made up of a collection of buttons and dropdowns.\nAs the programmer, it’s your job to decide how big or how small each component in your application\nshould be, but a good rule of thumb to think about is the idea of single responsibility.\nThe single responsibility principle, in programming, is the idea that a component should have respon-\nsibility for a single part of a program’s functionality. Robert C. Martin, also known as “Uncle Bob,” is\none of the most important thinkers and writers on software design. He described the single responsi-\nbility principle this way:\nSingle Responsibility means that a class [or what we call a “component” in React]\nshould have only one reason to change.\nComposition vs. Inheritance\nIn object- oriented programming (OOP), it’s common to create variations of classes that inherit prop-",
		"one of the most important thinkers and writers on software design. He described the single responsi-\nbility principle this way:\nSingle Responsibility means that a class [or what we call a “component” in React]\nshould have only one reason to change.\nComposition vs. Inheritance\nIn object- oriented programming (OOP), it’s common to create variations of classes that inherit prop-\nerties from a parent class. For example, a program might have a class called Button, which might\nhave a child class called SubmitButton. SubmitButton would inherit all of the properties of Button,\nand then override or extend them to create its unique functionality and look.\nRather than using inheritance to create more specific components to deal with specific cases (such as\na submit button), React encourages the creation of a single component that is more broadly reusable\nbut that can be configured by passing data into it and then combining it with other components to\nhandle more specific cases.",
		"Rather than using inheritance to create more specific components to deal with specific cases (such as\na submit button), React encourages the creation of a single component that is more broadly reusable\nbut that can be configured by passing data into it and then combining it with other components to\nhandle more specific cases.\nFor example, in the case of a submit button, you might simply pass a parameter to a Button compo-\nnent called label and another parameter called handleClick that contains the action to be per-\nformed by the button. This generalized button can then serve multiple purposes, depending on the\nvalues of label and handleClick that are passed to it. Listing 2-1 shows what this component might\nlook like.\nLISTING 2- 1: Creating configurable components\nfunction Button(props){\nreturn(\n<button onClick={props.handleClick}>{props.label}</button>\n);\n}\nOnce you’ve created a configurable component, you can create more specific components by com-",
		"values of label and handleClick that are passed to it. Listing 2-1 shows what this component might\nlook like.\nLISTING 2- 1: Creating configurable components\nfunction Button(props){\nreturn(\n<button onClick={props.handleClick}>{props.label}</button>\n);\n}\nOnce you’ve created a configurable component, you can create more specific components by com-\nbining more generalized ones. This technique is called composition. Listing 2-2 shows how you can\ncreate a specific WelcomeDialog component from a general Dialog one using composition.\n16 ❘ CHAPTER 2 The FoundaTion oF ReacT\nLISTING 2- 2: Using composition\nfunction Dialog(props){\nreturn(\n<div className=\"dialogStyle\">{props.message}</div>\n)\n}\nfunction WelcomeDialog(props){\nreturn(\n<Dialog message=\"Welcome to our app!\" />\n)\n}\nReact Is Declarative\nOne way to describe the difference in approach between programming with React and programming\nwith many other JavaScript libraries is to say that React is declarative while many other libraries are",
		"function Dialog(props){\nreturn(\n<div className=\"dialogStyle\">{props.message}</div>\n)\n}\nfunction WelcomeDialog(props){\nreturn(\n<Dialog message=\"Welcome to our app!\" />\n)\n}\nReact Is Declarative\nOne way to describe the difference in approach between programming with React and programming\nwith many other JavaScript libraries is to say that React is declarative while many other libraries are\nimperative.\nSo, what is declarative programming? Traditionally, the job of a programmer has been to break down\ncomplex processes into steps so that a computer can perform them. For example, if you want to pro-\ngram a robot to make you a sandwich, you might start by figuring out the high- level steps involved in\nthe process:\n1. Get two slices of bread.\n2. Find a knife.\n3. Get the peanut butter.\n4. Use the knife to spread the peanut butter.\n5. Assemble the sandwich.\nOf course, these steps are far too high- level for a robot to perform, so you need to break down each\none into smaller steps:",
		"gram a robot to make you a sandwich, you might start by figuring out the high- level steps involved in\nthe process:\n1. Get two slices of bread.\n2. Find a knife.\n3. Get the peanut butter.\n4. Use the knife to spread the peanut butter.\n5. Assemble the sandwich.\nOf course, these steps are far too high- level for a robot to perform, so you need to break down each\none into smaller steps:\n1. Get two slices of bread.\n1a. Use visual sensors to locate bread.\n1aa. If bread is found, move toward it.\n1ab. If bread is not found, return to step 1.\n1b. Use grabber arm to attempt opening of bread package.\nYou get the idea. By breaking down a complex process into small steps, a task eventually becomes\nsimple enough for a computer to perform. We call this step- by- step style of programming imperative\nprogramming. The imperative approach is the way that most DOM manipulation libraries worked\nprior to React.\nThe Philosophy of React ❘ 17",
		"1b. Use grabber arm to attempt opening of bread package.\nYou get the idea. By breaking down a complex process into small steps, a task eventually becomes\nsimple enough for a computer to perform. We call this step- by- step style of programming imperative\nprogramming. The imperative approach is the way that most DOM manipulation libraries worked\nprior to React.\nThe Philosophy of React ❘ 17\nTo change a paragraph of text in the browser using jQuery, for example, you would do something\nlike this:\n$('#para1').html('<p>This is the new paragraph.</p>');\nThis code looks for a paragraph with the id attribute equal to para1 and changes its HTML content\nto the new content that’s specified inside the parentheses.\nReact takes a different approach, which we call declarative programming. In declarative program-\nming, the computer (or the computer language interpreter, rather) has some intelligence about the",
		"This code looks for a paragraph with the id attribute equal to para1 and changes its HTML content\nto the new content that’s specified inside the parentheses.\nReact takes a different approach, which we call declarative programming. In declarative program-\nming, the computer (or the computer language interpreter, rather) has some intelligence about the\ntypes of tasks that it can perform, and the programmer only needs to tell it what to do, rather than\nhow to do it.\nIn declarative programming, our sandwich- making robot would know the steps for making sand-\nwiches, and programming it would involve the programmer saying something like “make me a sand-\nwich that looks like this.”\nApplied to DOM manipulation, the declarative approach that React takes is to allow the programmer\nto say, “Make the page look like this.” React then compares the new way that the page should look\nwith the way that it currently looks and figures out what’s different and what needs to change and\nhow to do it.",
		"wich that looks like this.”\nApplied to DOM manipulation, the declarative approach that React takes is to allow the programmer\nto say, “Make the page look like this.” React then compares the new way that the page should look\nwith the way that it currently looks and figures out what’s different and what needs to change and\nhow to do it.\nBuilding and updating a React user interface, from the programmer’s perspective, is just a matter of\nspecifying what the user interface should look like and telling React to render it.\nReact Is Idiomatic\nReact itself is a small library with limited functionality when compared to other JavaScript libraries.\nExcept for a handful of concepts and methods that are unique to React, React components are just\nJavaScript. If the structure and code of a React component looks foreign to you, it’s likely because it\nuses a style of JavaScript programming that you’re not yet familiar with, or because it makes use of a",
		"Except for a handful of concepts and methods that are unique to React, React components are just\nJavaScript. If the structure and code of a React component looks foreign to you, it’s likely because it\nuses a style of JavaScript programming that you’re not yet familiar with, or because it makes use of a\nnew feature in JavaScript that you’re not yet familiar with. The good news is that by getting better at\nJavaScript, you’ll get better at programming with React.\nYou may hear the term “idiomatic JavaScript” used to describe React. What this means is that React\ncode is easily understandable to people who program JavaScript. The reverse is also true: if you know\nJavaScript, understanding how to write React is not too much of a stretch.\nWhy Learn React?\nIf you’ve made it this far in the book, you probably already have your own reasons for learning\nReact. You already know by now that you’re in good company—R eact’s popularity has been growing",
		"code is easily understandable to people who program JavaScript. The reverse is also true: if you know\nJavaScript, understanding how to write React is not too much of a stretch.\nWhy Learn React?\nIf you’ve made it this far in the book, you probably already have your own reasons for learning\nReact. You already know by now that you’re in good company—R eact’s popularity has been growing\nfrom day one of its release into the wild. Surveys of developers have consistently shown that it’s at\nthe top, or very near the top, of their preferred libraries, and the list of companies that have already\nmigrated to React or that are in the process of migrating to React is impressive, to say the least.\nReact is going to be around for a long time to come, and there’s never been a better time to learn it.\n18 ❘ CHAPTER 2 The FoundaTion oF ReacT\nReact vs.…\nThe job of being a software developer today, especially one working with JavaScript and the web,",
		"migrated to React or that are in the process of migrating to React is impressive, to say the least.\nReact is going to be around for a long time to come, and there’s never been a better time to learn it.\n18 ❘ CHAPTER 2 The FoundaTion oF ReacT\nReact vs.…\nThe job of being a software developer today, especially one working with JavaScript and the web,\nrequires some knowledge of a staggeringly large and growing number of libraries, frameworks,\nprotocols, standards, best practices, and patterns. A great programmer not only knows how to apply\nwhatever language and framework they are working in at any one time, but also how to quickly learn\nnew languages and frameworks.\nOne good way to learn a new language is by comparing it to something that you already know, and\nthe question “how does React compare to (x)” is one of the most common questions that my students\nask me. In the following sections, I’ll look at how React stacks up against its two closest rivals: Angu-",
		"new languages and frameworks.\nOne good way to learn a new language is by comparing it to something that you already know, and\nthe question “how does React compare to (x)” is one of the most common questions that my students\nask me. In the following sections, I’ll look at how React stacks up against its two closest rivals: Angu-\nlar and Vue. While I don’t like to take sides, I know enough about each to be able to give some facts\nand impressions.\nReact vs. Angular\nAngular (angular.io) was created by Google, and it’s been around longer than React in one form or\nanother. Let’s start with the similarities:\n1. Purpose. Both Angular and React can create scalable and dynamic user interfaces.\n2. Stability. Both Angular and React were created by one of the largest companies on the inter-\nnet and they both have huge numbers of developers and enthusiasts.\n3. Robustness. A major concern with any JavaScript library or framework is how safe, secure,",
		"another. Let’s start with the similarities:\n1. Purpose. Both Angular and React can create scalable and dynamic user interfaces.\n2. Stability. Both Angular and React were created by one of the largest companies on the inter-\nnet and they both have huge numbers of developers and enthusiasts.\n3. Robustness. A major concern with any JavaScript library or framework is how safe, secure,\nand generally acceptable it is for enterprise development. Both Angular and React are popu-\nlar and widely used in corporate software development.\n4. License. Both frameworks use the MIT license, which allows for unlimited use and reuse\nfor free as long as the original copyright and license notices are included in any copy of the\nsource code.\nAngular has gone through some major changes in the years since React came onto the scene. Prior\nto what we now call “Angular” there was AngularJS, which was replaced in 2016 with Angular 2.0.",
		"4. License. Both frameworks use the MIT license, which allows for unlimited use and reuse\nfor free as long as the original copyright and license notices are included in any copy of the\nsource code.\nAngular has gone through some major changes in the years since React came onto the scene. Prior\nto what we now call “Angular” there was AngularJS, which was replaced in 2016 with Angular 2.0.\nAngular 2.0 was a major change and was not compatible with AngularJS. Its introduction led to\nmany developers deciding to learn React instead of the rewritten Angular.\nAngular is considered to be a “framework,” while React calls itself a “library.” The difference between\na library and a framework is that a framework is usually an all- encompassing way of doing some-\nthing, while a library is generally seen as a tool for a more specific purpose.\nThe React library itself is a tool for making user interfaces out of components. Angular, on the other",
		"Angular is considered to be a “framework,” while React calls itself a “library.” The difference between\na library and a framework is that a framework is usually an all- encompassing way of doing some-\nthing, while a library is generally seen as a tool for a more specific purpose.\nThe React library itself is a tool for making user interfaces out of components. Angular, on the other\nhand, is a complete system for building front- end web applications. By assembling components and\nlibraries, React can do everything that Angular can do. But, if you need something smaller, such as to\ngenerate some HTML, React can do that as well.\nThe Philosophy of React ❘ 19\nAngular has a steeper learning curve than React. In addition to the learning curve required to use the\nframework itself, Angular requires the use of Microsoft’s TypeScript, which is a superset of JavaScript\nthat’s designed for the development of large applications. It’s possible to use TypeScript to write React",
		"generate some HTML, React can do that as well.\nThe Philosophy of React ❘ 19\nAngular has a steeper learning curve than React. In addition to the learning curve required to use the\nframework itself, Angular requires the use of Microsoft’s TypeScript, which is a superset of JavaScript\nthat’s designed for the development of large applications. It’s possible to use TypeScript to write React\nas well, but with Angular it’s a requirement.\nUnlike React, Angular operates on the real DOM, rather than on a Virtual DOM, and it optimizes\nchanges to the DOM by using an approach it calls Change Detection. When an event causes data\nchanges in Angular, the framework checks each component and updates it as needed. You may recog-\nnize this approach as a more imperative approach (as compared to React’s declarative approach) to\nDOM manipulation.\nReact and Angular also differ in how data flows within an application. React, as you’ll see, uses",
		"changes in Angular, the framework checks each component and updates it as needed. You may recog-\nnize this approach as a more imperative approach (as compared to React’s declarative approach) to\nDOM manipulation.\nReact and Angular also differ in how data flows within an application. React, as you’ll see, uses\none- way data flow. What this means is that every change that happens in the browser starts out as a\nchange in the data model. This differs from both Angular and Vue, which both feature two-way data\nbinding, in which changes in the browser can affect the data model directly and changes to the data\nmodel can affect the view.\nReact vs. Vue\nVue.js (vuejs.org) is a relative newcomer to the universe of JavaScript frameworks, but it has been\ngrowing in popularity and is now considered one of the top three, along with React and Angular.\nLike React and Angular, Vue is open source. Unlike React and Angular, however, Vue isn’t backed or",
		"model can affect the view.\nReact vs. Vue\nVue.js (vuejs.org) is a relative newcomer to the universe of JavaScript frameworks, but it has been\ngrowing in popularity and is now considered one of the top three, along with React and Angular.\nLike React and Angular, Vue is open source. Unlike React and Angular, however, Vue isn’t backed or\ncontrolled by a large corporation. Instead, it’s the work of many programmers and companies donat-\ning their skills to maintain and support it. This can be seen as either a plus or a minus, depending on\nyour view of giant internet companies.\nVue takes a middle ground between the bare-bones approach of React and the smorgasbord approach\nof Angular. Like Angular, it has built-i n functionality for state management, routing, and managing\nCSS. But, like React, it’s a small library (even smaller than React in terms of total kilobytes that must\nbe downloaded to the browser) and how you use it is highly customizable.",
		"Vue takes a middle ground between the bare-bones approach of React and the smorgasbord approach\nof Angular. Like Angular, it has built-i n functionality for state management, routing, and managing\nCSS. But, like React, it’s a small library (even smaller than React in terms of total kilobytes that must\nbe downloaded to the browser) and how you use it is highly customizable.\nOf the three libraries, Vue is probably the easiest to learn.\nWhat React Is Not\nIt’s important to keep in mind not only what React is, but what it isn’t. Beyond the often repeated\n(and largely semantic) argument about whether React is a library or a framework are the more\nimportant distinctions between front-e nd libraries, back- end libraries, and the development\nenvironment.\nReact, as it’s used most often, is a front-e nd library. This means that everything React does happens in\nthe web browser. It can’t directly control or access remote databases (except through the web), and it\ndoesn’t serve web pages.",
		"important distinctions between front-e nd libraries, back- end libraries, and the development\nenvironment.\nReact, as it’s used most often, is a front-e nd library. This means that everything React does happens in\nthe web browser. It can’t directly control or access remote databases (except through the web), and it\ndoesn’t serve web pages.\nWhen I’m asked about the differences between front- end, back- end, and development environments\nin my classes, I like to draw something like the diagram in Figure 2-4.\n20 ❘ CHAPTER 2 The FoundaTion oF ReacT\nBack End Front End\nDevice\nBrowser\nwindow\nrequests Browser Window\nindex.html\nHTTP\nNode.js index.html\nData Server\nDocument\nHTML\nJavaScript JavaScript\nrequests\ndata\nReact\nCSS\nFIGURE 2- 4: How the web works\nYou know already that React is a front- end JavaScript library. As you can see from the preced-\ning diagram, there are many other pieces of the web ecosystem. Here are a few of the things that\nReact is not.\nReact Is Not a Web Server",
		"requests Browser Window\nindex.html\nHTTP\nNode.js index.html\nData Server\nDocument\nHTML\nJavaScript JavaScript\nrequests\ndata\nReact\nCSS\nFIGURE 2- 4: How the web works\nYou know already that React is a front- end JavaScript library. As you can see from the preced-\ning diagram, there are many other pieces of the web ecosystem. Here are a few of the things that\nReact is not.\nReact Is Not a Web Server\nA web server, also known as an HTTP server, has as its primary job to accept requests for web pages\nfrom web browsers and then return those web pages to the browser along with all of their linked\nimages, CSS files, and JavaScript files.\nThe React library and the user interfaces you create using React are among the linked JavaScript\nfiles that a web server sends to a web browser, and React itself has no ability to handle requests from\nweb browsers, although it can interact with the browser, just as any JavaScript code can, through the\nbrowser’s application programming interfaces (APIs).",
		"images, CSS files, and JavaScript files.\nThe React library and the user interfaces you create using React are among the linked JavaScript\nfiles that a web server sends to a web browser, and React itself has no ability to handle requests from\nweb browsers, although it can interact with the browser, just as any JavaScript code can, through the\nbrowser’s application programming interfaces (APIs).\nReact Is Not a Programming Language\nReact is a JavaScript library, which means that it is just a collection of JavaScript functions that pro-\ngrammers can make use of. The idea of a library is to simplify common tasks that programmers need\nto do frequently so that they can just focus on writing the code that makes a program unique.\nSummary ❘ 21\nIf you had enough time and knowledge, you could rewrite every bit of the React library yourself\nusing JavaScript— but, of course, there’s no reason to do that, because the React developers have done\nit for you.\nReact Is Not a Database Server",
		"to do frequently so that they can just focus on writing the code that makes a program unique.\nSummary ❘ 21\nIf you had enough time and knowledge, you could rewrite every bit of the React library yourself\nusing JavaScript— but, of course, there’s no reason to do that, because the React developers have done\nit for you.\nReact Is Not a Database Server\nReact doesn’t have any abilities to store data in a secure way or in a permanent way. Instead, React\nuser interfaces (like every web and mobile web user interface) communicate with server-s ide data-\nbases over the internet to store and receive data such as login information, ecommerce transaction\ndata, news feeds, and so forth.\nThe data that React uses to make user interfaces dynamic, and the data that you’re viewing at any\none time in a React user interface (what we call “session” data), is not persistent. Unless your React\nuser interface saves session data in the web browser (using cookies or the browser’s local storage), it",
		"data, news feeds, and so forth.\nThe data that React uses to make user interfaces dynamic, and the data that you’re viewing at any\none time in a React user interface (what we call “session” data), is not persistent. Unless your React\nuser interface saves session data in the web browser (using cookies or the browser’s local storage), it\nall gets erased when you navigate to a different URL or refresh your browser window.\nReact Is Not a Development Environment\nAs you saw in the book’s Introduction, you’ll use plenty of different tools to program with React.\nCollectively, these are known as your development environment. I present the most commonly used\ntools (and, in some cases, just my own personal preferences), but there’s nothing about React that\nrequires you to use these specific tools. In many cases, there are alternatives available, and you may\ndiscover that you prefer different ones than I do (or, you may discover a better tool that I’m not cur-",
		"tools (and, in some cases, just my own personal preferences), but there’s nothing about React that\nrequires you to use these specific tools. In many cases, there are alternatives available, and you may\ndiscover that you prefer different ones than I do (or, you may discover a better tool that I’m not cur-\nrently aware of). It’s possible to write perfect React code using any tools you want, or using no tools\nat all (other than a text editor).\nReact Is Not the Perfect Solution to Every Problem\nReact works well for many types of applications, but it’s not always the best solution. This is true of\nany JavaScript library, and it’s probably true of every single tool ever invented. It’s important to know\nabout a wide variety of different languages and libraries so that you can make good choices and\nknow when the tools you prefer to use or that you know the best are the best and when they might\nnot be the best.\nSUMMARY",
		"any JavaScript library, and it’s probably true of every single tool ever invented. It’s important to know\nabout a wide variety of different languages and libraries so that you can make good choices and\nknow when the tools you prefer to use or that you know the best are the best and when they might\nnot be the best.\nSUMMARY\nBecause React is a different way of writing user interfaces for the web, it does have some concepts\nand foundational ideas behind it that are important to understand before you can work with it effec-\ntively. In the end, however, writing React user interfaces is straightforward:\n1. You write components to describe how the user interface should look and act.\n2. React renders your components to create a tree of nodes.\n3. A React renderer figures out the differences between the latest rendered component tree and\nthe previous one and updates the user interface accordingly.\n22 ❘ CHAPTER 2 The FoundaTion oF ReacT\nIn this chapter, you learned:",
		"1. You write components to describe how the user interface should look and act.\n2. React renders your components to create a tree of nodes.\n3. A React renderer figures out the differences between the latest rendered component tree and\nthe previous one and updates the user interface accordingly.\n22 ❘ CHAPTER 2 The FoundaTion oF ReacT\nIn this chapter, you learned:\n➤➤ Why React is called React, and what is meant by the term “reactive programming.”\n➤➤ The purposes of the React library and of the ReactDOM library.\n➤➤ What composition is.\n➤➤ About declarative programming and how it’s different from imperative programming.\n➤➤ Why you should learn React.\n➤➤ How React compares to Angular and Vue.js.\n➤➤ The role of React in a web application and what roles React does not fill within the web\napplication ecosystem.\nIn the next chapter, you’ll learn about one of the most fundamental tools used to write React\ncomponents: JSX.\n3\nJSX",
		"➤➤ About declarative programming and how it’s different from imperative programming.\n➤➤ Why you should learn React.\n➤➤ How React compares to Angular and Vue.js.\n➤➤ The role of React in a web application and what roles React does not fill within the web\napplication ecosystem.\nIn the next chapter, you’ll learn about one of the most fundamental tools used to write React\ncomponents: JSX.\n3\nJSX\nNewcomers to React often remark on how it appears that React breaks one of the cardinal\nrules of web development, which is to not mix your programming logic with your HTML.\nThis chapter explains where this misperception about React comes from and introduces JSX,\nwhich gives us an easy, HTML- like syntax for composing React components. In this chapter,\nyou’ll learn:\n➤➤ How to write JSX.\n➤➤ How modules work in JavaScript.\n➤➤ What a transpiler does.\n➤➤ How to include literal JavaScript in JSX code.\n➤➤ How to do conditional rendering in React.\n➤➤ How to render children in JSX.\nJSX IS NOT HTML",
		"which gives us an easy, HTML- like syntax for composing React components. In this chapter,\nyou’ll learn:\n➤➤ How to write JSX.\n➤➤ How modules work in JavaScript.\n➤➤ What a transpiler does.\n➤➤ How to include literal JavaScript in JSX code.\n➤➤ How to do conditional rendering in React.\n➤➤ How to render children in JSX.\nJSX IS NOT HTML\nTake a look first at Listing 3-1. If you know some HTML, you can probably guess what the\nresult of this function will be—a form containing two input fields and a button will be returned.\nLISTING 3- 1: A React component\nimport React from \"react\";\nfunction Login(){\nconst handleSubmit = (e)=>{\ne.preventDefault();\nconsole.log(`logging in ${e.target[0].value}`);\ncontinues\n24 ❘ CHAPTER 3 JSX\nLISTING 3-1 (continued)\n// do something else here\n}\nreturn (\n<form id=\"login- form\" onSubmit={handleSubmit}>\n<input type=\"email\"\nid=\"email\"\nplaceholder=\"E- Mail Address\"/>\n<input type=\"password\"\nid=\"password\"/>\n<button>Login</button>\n</form>\n);\n}\nexport default Login;",
		"const handleSubmit = (e)=>{\ne.preventDefault();\nconsole.log(`logging in ${e.target[0].value}`);\ncontinues\n24 ❘ CHAPTER 3 JSX\nLISTING 3-1 (continued)\n// do something else here\n}\nreturn (\n<form id=\"login- form\" onSubmit={handleSubmit}>\n<input type=\"email\"\nid=\"email\"\nplaceholder=\"E- Mail Address\"/>\n<input type=\"password\"\nid=\"password\"/>\n<button>Login</button>\n</form>\n);\n}\nexport default Login;\nBut, if you know some JavaScript, you might think the result of running this JavaScript function\nshould be an error— HTML is not valid JavaScript, and so the value of the return statement will\ncause this function to fail.\nHowever, this is a perfectly well-f ormed React component and that markup inside of the return\nstatement actually isn’t HTML. Instead, it’s written in JSX, which is an extension of JavaScript that’s\nused as a visual aid to help you describe what a component should look like.\nJAVASCRIPT LESSON: MAKING SENSE OF MODULES WITH AMD,\nCJS, AND ESM",
		"cause this function to fail.\nHowever, this is a perfectly well-f ormed React component and that markup inside of the return\nstatement actually isn’t HTML. Instead, it’s written in JSX, which is an extension of JavaScript that’s\nused as a visual aid to help you describe what a component should look like.\nJAVASCRIPT LESSON: MAKING SENSE OF MODULES WITH AMD,\nCJS, AND ESM\nModularization is a fundamental concept in software development in which a pro-\ngram is organized into reusable units of code. Modularization makes software easier\nto build, debug, test, and manage and it also enables team development of software.\nJust as functions create units of functionality that can be reused in a JavaScript file,\nmodules create JavaScript files that can be reused within a program.\nA computer program made up of modules might look something like this:\nJSX Is Not HTML ❘ 25\nmain program\ndata\nmodule 1 module 2 module 3\ndata + data data + data data + data\n1 2 3\nmodule 4\ndata + data + data\n1 4",
		"Just as functions create units of functionality that can be reused in a JavaScript file,\nmodules create JavaScript files that can be reused within a program.\nA computer program made up of modules might look something like this:\nJSX Is Not HTML ❘ 25\nmain program\ndata\nmodule 1 module 2 module 3\ndata + data data + data data + data\n1 2 3\nmodule 4\ndata + data + data\n1 4\nTHE HISTORY OF JAVASCRIPT MODULES\nJavaScript started its life as a scripting language for web browsers. In its early days,\nscripts written in JavaScript were small. Because it was seen as less than a “real” pro-\ngramming language, no thought was given to including a way to create modules in\nJavaScript. Instead, programmers would just write their JavaScript in a single file and\nimport it into HTML files using the script element, or write all of their JavaScript\ndirectly into the script element.\nAs JavaScript became a more powerful language, and as the number of things that",
		"gramming language, no thought was given to including a way to create modules in\nJavaScript. Instead, programmers would just write their JavaScript in a single file and\nimport it into HTML files using the script element, or write all of their JavaScript\ndirectly into the script element.\nAs JavaScript became a more powerful language, and as the number of things that\npeople were doing with JavaScript began to grow, so too did the complexity and size\nof JavaScript files.\nThe Rise of the JavaScript Module\nBecause JavaScript couldn’t do modules natively, when the need for and benefits of\nbreaking up large JavaScript programs into smaller pieces became apparent, Java-\nScript developers did what they always do and created new libraries that could be\nused to add modularization into JavaScript.\nRequireJS\nThe library that became the most popular way to modularize JavaScript in the web\nbrowser was RequireJS. The method used by RequireJS to load modules is called",
		"breaking up large JavaScript programs into smaller pieces became apparent, Java-\nScript developers did what they always do and created new libraries that could be\nused to add modularization into JavaScript.\nRequireJS\nThe library that became the most popular way to modularize JavaScript in the web\nbrowser was RequireJS. The method used by RequireJS to load modules is called\nAsynchronous Module Definition (AMD).\nAs the name implies, AMD modules are loaded asynchronously, meaning that\nall of the imports in a module run prior to any of the code in those modules\nbeing executed.\ncontinues\n26 ❘ CHAPTER 3 JSX\n(continued)\nWith RequireJS, you can create modules by using the define function, and then\nthose modules can be included into other JavaScript code using the require() func-\ntion. All you have to do to use RequireJS is to include the RequireJS script into your\nHTML file using a script tag, like this:\n<script data- main=\"scripts/main\" src=\"scripts/require.js\">\n</script>",
		"continues\n26 ❘ CHAPTER 3 JSX\n(continued)\nWith RequireJS, you can create modules by using the define function, and then\nthose modules can be included into other JavaScript code using the require() func-\ntion. All you have to do to use RequireJS is to include the RequireJS script into your\nHTML file using a script tag, like this:\n<script data- main=\"scripts/main\" src=\"scripts/require.js\">\n</script>\nThe preceding script tag specifies that the single entry point into the app is\nscripts/main.js.\nOnce you’ve included the script tag in your HTML file, you can create individual\nmodules in other files by using RequireJS’s define function, like this:\n// messages.js\ndefine(function () {\nreturn {\ngetHello: function () {\nreturn 'Hello World';\n}\n};\n});\nModules you define can then be loaded into main.js using the requirejs function,\nwhere individual functions from the module can be assigned to variables and used,\nlike this:\nrequirejs([\"messages\"], function(messages) {\n// module usage here\n});",
		"// messages.js\ndefine(function () {\nreturn {\ngetHello: function () {\nreturn 'Hello World';\n}\n};\n});\nModules you define can then be loaded into main.js using the requirejs function,\nwhere individual functions from the module can be assigned to variables and used,\nlike this:\nrequirejs([\"messages\"], function(messages) {\n// module usage here\n});\nThis function is called when scripts/messages.js is loaded. If messages.js calls\ndefine, then this function is not fired until messages’s dependencies have loaded,\nand the messages argument will hold the module value.\nCommonJS\nWhile RequireJS created a way to have modules in the web browser, web browsers\naren’t the only place where JavaScript code runs. Prior to 2009, there was no agreed-\nupon standard way to modularize JavaScript code running outside the browser.\nThis changed when CommonJS (also known as CJS) was created. CommonJS was\nbuilt into Node.js and quickly became the most widely used modularization library\nfor server- side JavaScript.",
		"aren’t the only place where JavaScript code runs. Prior to 2009, there was no agreed-\nupon standard way to modularize JavaScript code running outside the browser.\nThis changed when CommonJS (also known as CJS) was created. CommonJS was\nbuilt into Node.js and quickly became the most widely used modularization library\nfor server- side JavaScript.\nWith CommonJS, you can export variables, functions, or objects from a file by using\nthe exports function, like this:\n// mathhelpers.js\nexports.getSum = function(num1,num2) { return num1 + num2; }\nJSX Is Not HTML ❘ 27\nOnce you’ve defined a module, you can import it into any other JavaScript files by\nusing the require function:\nconst mathHelpersModule = require('mathHelpers.js');\nvar theSum = mathHelpersModule.getSum(1,1);\nUnlike RequireJS, CommonJS loads and parses modules synchronously, parsing and\nexecuting each module as it’s loaded.\nThe following image illustrates the difference between how CommonJS and AMD",
		"using the require function:\nconst mathHelpersModule = require('mathHelpers.js');\nvar theSum = mathHelpersModule.getSum(1,1);\nUnlike RequireJS, CommonJS loads and parses modules synchronously, parsing and\nexecuting each module as it’s loaded.\nThe following image illustrates the difference between how CommonJS and AMD\nsystems like RequireJS load modules.\nCommonJS (CJS)\nmodule 1 module 2 module 3\nAsynchronous Module Definition (AMD)\nmodule 1\nmodule 3\nmodule 2\nES Modules\nHaving more than one way to create and use modules made modules less reusable,\nhowever, and the ultimate dream of JavaScript programmers was always that Java-\nScript would someday have a built-i n way to modularize code. This dream became a\nreality with the standardization of ECMAScript Modules (ESM).\nESM features asynchronous module loading, like RequireJS, but has a simple syntax,\nlike CommonJS. The statements that you use to create and use ES Modules are\nimport and export.\nUSING IMPORT AND EXPORT",
		"Script would someday have a built-i n way to modularize code. This dream became a\nreality with the standardization of ECMAScript Modules (ESM).\nESM features asynchronous module loading, like RequireJS, but has a simple syntax,\nlike CommonJS. The statements that you use to create and use ES Modules are\nimport and export.\nUSING IMPORT AND EXPORT\nReact components are JavaScript modules, and so you’ll see import and export\nstatements everywhere in React. The most basic thing to know about import and\nexport is that the export statement creates modules, and the import statement\nimports modules into other JavaScript code. Since import and export are built into\nJavaScript now, there’s no need to include a separate library to make use of them.\ncontinues\n28 ❘ CHAPTER 3 JSX\n(continued)\nexport Creates Modules\nLet’s say that you have a function that calculates shipping charges for your ecom-\nmerce store. The basic skeleton of this function might look something like this:",
		"imports modules into other JavaScript code. Since import and export are built into\nJavaScript now, there’s no need to include a separate library to make use of them.\ncontinues\n28 ❘ CHAPTER 3 JSX\n(continued)\nexport Creates Modules\nLet’s say that you have a function that calculates shipping charges for your ecom-\nmerce store. The basic skeleton of this function might look something like this:\nfunction calculateShippingCharge(weight,shippingMethod){\n// do something here\nreturn shippingCharge;\n}\nTurning this function into a module would make it more reusable, since you’d then\nbe able to simply include it into any file that needs to calculate shipping charges, and\nyou could even make use of it in different programs as well.\nThe basic syntax for using export is to put the export keyword before the defini-\ntion of the function, like this:\nexport function calculateShippingCharge(weight,shippingMethod){\n// do something here\nreturn shippingcharge;\n}",
		"be able to simply include it into any file that needs to calculate shipping charges, and\nyou could even make use of it in different programs as well.\nThe basic syntax for using export is to put the export keyword before the defini-\ntion of the function, like this:\nexport function calculateShippingCharge(weight,shippingMethod){\n// do something here\nreturn shippingcharge;\n}\nNow, you can put this module into a file with other modules (maybe the file would\nbe named ecommerce- utilities.js) and you can import individual functions, or\nevery function, from this file into any other file in your program.\nimport Imports Modules\nTo import a function, variable, or object from a JavaScript module, you use the\nimport statement. To use import, name at least one module, followed by the from\nkeyword, followed by the path to the file that contains the module or modules you\nwant to import.\nYou can import individual items from a file by surrounding them with curly braces,\nlike this:",
		"import Imports Modules\nTo import a function, variable, or object from a JavaScript module, you use the\nimport statement. To use import, name at least one module, followed by the from\nkeyword, followed by the path to the file that contains the module or modules you\nwant to import.\nYou can import individual items from a file by surrounding them with curly braces,\nlike this:\nimport { shippingMethods, calculateShippingCharges } from\n'./modules/ecommerce- utilities.js';\nUsing Default Exports\nAnother way to use export is to create a default export. A default export can be\nused to specify a default function provided by a module:\nfunction calculateShippingCharge(weight,shippingMethod){\n// do something here\n}\nexport default calculateShippingCharge;\nJSX Is Not HTML ❘ 29\nYou can only have one default export per file. When you have a default export, you\ncan import the module specified with the default export by using the import state-\nment without the curly braces, like this:",
		"function calculateShippingCharge(weight,shippingMethod){\n// do something here\n}\nexport default calculateShippingCharge;\nJSX Is Not HTML ❘ 29\nYou can only have one default export per file. When you have a default export, you\ncan import the module specified with the default export by using the import state-\nment without the curly braces, like this:\nimport calculateShippingCharge from\n'./modules/calculateShippingCharge.js';\nReact components are usually created using default exports, unless you’re creating a\nlibrary of components.\nNote: you’ll often see the path to a module specified without the .js at the end.\nFor example:\nimport calculateShippingCharge from\n'./modules/calculateShippingCharge';\nWhen you omit .js at the end of a filename in an import, the import will work\nexactly the same as if you had specifically written it. Also notice that the path to the\nmodule file starts with './'. This is the UNIX way of saying to start with the cur-",
		"For example:\nimport calculateShippingCharge from\n'./modules/calculateShippingCharge';\nWhen you omit .js at the end of a filename in an import, the import will work\nexactly the same as if you had specifically written it. Also notice that the path to the\nmodule file starts with './'. This is the UNIX way of saying to start with the cur-\nrent directory and to create a relative path from it. ES Modules require that the path\nto the module is a relative path, so it will always start with ./ (the current directory)\nor ../ (indicating the parent directory). Oftentimes, you may need to have more\nthan one ../, if the module you want to load is higher up in the file hierarchy.\nSo, in the previous case, the modules folder is a subdirectory of the directory con-\ntaining the file that’s importing the module.\nIf you’ve installed Node.js packages using npm, such as the React library itself, you\ndon’t need to use ./ or to specify the path to the Node.js package when you import",
		"than one ../, if the module you want to load is higher up in the file hierarchy.\nSo, in the previous case, the modules folder is a subdirectory of the directory con-\ntaining the file that’s importing the module.\nIf you’ve installed Node.js packages using npm, such as the React library itself, you\ndon’t need to use ./ or to specify the path to the Node.js package when you import\nit. For example, components that use the React library’s functions have an import\nstatement that imports React. This usually looks like this:\nimport React from 'react';\nAlthough you may also see individual objects from the React library imported\nseparately, like this:\nimport React, {Component} from 'react';\nSome Important ES2015 Module Rules\nThere are just a few more important rules for how to use import and export:\n➤➤ Both import and export statements need to be at the top level of your\nJavaScript file— that is, not inside of a function or any other statement.",
		"Although you may also see individual objects from the React library imported\nseparately, like this:\nimport React, {Component} from 'react';\nSome Important ES2015 Module Rules\nThere are just a few more important rules for how to use import and export:\n➤➤ Both import and export statements need to be at the top level of your\nJavaScript file— that is, not inside of a function or any other statement.\n➤➤ Imports must be done before any other statements in a module.\n➤➤ import and export can only be used inside modules (not inside of\nordinary JavaScript files).\n30 ❘ CHAPTER 3 JSX\nWHAT IS JSX?\nJSX is an XML- based syntax extension to JavaScript. In plain English, it’s a way to write JavaScript\ncode using XML. Although it’s not specific to React, and it’s not even required in order to write\nReact components, JSX is an integral part of how every React developer writes components because\nit makes writing components so much easier and has no negative impact in terms of performance or",
		"JSX is an XML- based syntax extension to JavaScript. In plain English, it’s a way to write JavaScript\ncode using XML. Although it’s not specific to React, and it’s not even required in order to write\nReact components, JSX is an integral part of how every React developer writes components because\nit makes writing components so much easier and has no negative impact in terms of performance or\nfunctionality.\nHow JSX Works\nReact uses JSX elements to represent custom components (which are also known as user- defined\ncomponents). If you create a component named SearchInput, you can make use of that component\nin other components by using a JSX element named SearchInput, as shown in Listing 3-2.\nLISTING 3- 2: Using a user- defined React component in JSX\nimport {useState} from 'react';\nimport SearchInput from './SearchInput';\nimport SearchResults from './SearchResults';\nfunction SearchBox() {\nconst [searchTerm,setSearchTerm] = useState(\");\nreturn (\n<div id=\"search- box\">",
		"in other components by using a JSX element named SearchInput, as shown in Listing 3-2.\nLISTING 3- 2: Using a user- defined React component in JSX\nimport {useState} from 'react';\nimport SearchInput from './SearchInput';\nimport SearchResults from './SearchResults';\nfunction SearchBox() {\nconst [searchTerm,setSearchTerm] = useState(\");\nreturn (\n<div id=\"search- box\">\n<SearchInput term={searchTerm} onChange={setSearchTerm}/>\n<SearchResults term={searchTerm}/>\n</div>\n)\n}\nexport default SearchBox;\nIn the same way, React has components built into it for each of the elements in HTML5, and you can\nuse any HTML5 element name when you write your React components and the result will be that\nReact will output that HTML5 element. For example, say you want your React component to result\nin the rendering of the following piece of HTML markup:\n<label class=\"inputLabel\">Search:\n<input type=\"text\" id=\"searchInput\">\n</label>",
		"use any HTML5 element name when you write your React components and the result will be that\nReact will output that HTML5 element. For example, say you want your React component to result\nin the rendering of the following piece of HTML markup:\n<label class=\"inputLabel\">Search:\n<input type=\"text\" id=\"searchInput\">\n</label>\nThe JSX code for telling your React component to output that HTML would look like this:\n<label className=\"inputLabel\">Search:\n<input type=\"text\" id=\"searchInput\"/>\n</label>\nIf you study both of the preceding snippets closely, you’ll find a couple of differences. The difference\nbetween them, and the fact that JSX is not HTML, are of vital importance to understanding what\nJSX is really doing.\nWhat Is JSX? ❘ 31\nIt’s fully possible to create React components without using JSX by using the React.createElement\nmethod. Here’s what the code to output the previous HTML markup looks like when you write it\nusing React.createElement:",
		"between them, and the fact that JSX is not HTML, are of vital importance to understanding what\nJSX is really doing.\nWhat Is JSX? ❘ 31\nIt’s fully possible to create React components without using JSX by using the React.createElement\nmethod. Here’s what the code to output the previous HTML markup looks like when you write it\nusing React.createElement:\nReact.createElement(\"label\", {className: \"inputLabel\"}, \"Search:\",\nReact.createElement(\"input\", {type: \"text\", id: \"searchInput\"}));\nIf you examine this JavaScript code closely, you should be able to figure out basically how it works.\nThe React.createElement method accepts an element name, any attributes of the HTML element,\nthe element’s content (\"Search:\" in this example) and its child element or elements. In this case, the\nlabel element has one child, input.\nThat’s pretty much all there is to React.createElement. If you’re interested in learning the exact\nsyntax of React.createElement, you can read more about it here:",
		"The React.createElement method accepts an element name, any attributes of the HTML element,\nthe element’s content (\"Search:\" in this example) and its child element or elements. In this case, the\nlabel element has one child, input.\nThat’s pretty much all there is to React.createElement. If you’re interested in learning the exact\nsyntax of React.createElement, you can read more about it here:\nhttps://reactjs.org/docs/react- without- jsx.html\nIn reality, however, very few React developers ever have to think about React.createElement,\nbecause we use a tool called a transpiler as part of our development environment.\nTranspiler . . . Huh?\nBefore you can run a React application that uses JSX and modules, it must first be compiled. During\nthe compile (also known as “build”) process, all of the modules are joined together and the JSX code\nis converted into pure JavaScript.\nCompilation vs. Transpilation",
		"because we use a tool called a transpiler as part of our development environment.\nTranspiler . . . Huh?\nBefore you can run a React application that uses JSX and modules, it must first be compiled. During\nthe compile (also known as “build”) process, all of the modules are joined together and the JSX code\nis converted into pure JavaScript.\nCompilation vs. Transpilation\nCompilation of React applications is somewhat different from how programmers of truly “compiled”\nlanguages (like C++ or Java) understand compilation. In compiled languages, the code that you write\nis converted into low- level code that can be understood by the computer’s software interpreter. This\nlow- level code is called bytecode.\nWhen React applications are compiled, on the other hand, they’re converted from one version of\nJavaScript to another version of JavaScript. Because the React compilation process doesn’t actually\ncreate bytecode, a more technically correct word for what happens is transpilation.\nJSX Transform",
		"low- level code is called bytecode.\nWhen React applications are compiled, on the other hand, they’re converted from one version of\nJavaScript to another version of JavaScript. Because the React compilation process doesn’t actually\ncreate bytecode, a more technically correct word for what happens is transpilation.\nJSX Transform\nOne of the steps in the transpilation of React code is the JSX Transform. The JSX Transform is a\nprocess in which the transpiler takes JSX code (which isn’t natively understood by web browsers) and\nconverts it into plain JavaScript (which is natively understood by web browsers).\nIntroducing Babel\nThe tool we use for transpilation in JavaScript is called Babel. Babel is integrated into Create React\nApp and is an automatic part of compiling a React app built with Create React App.\n32 ❘ CHAPTER 3 JSX\nNOTE Prior to version 17 of React, the JSX Transform converted JSX into\nReact.createElement() statements. With React 17, the JSX Transform was",
		"Introducing Babel\nThe tool we use for transpilation in JavaScript is called Babel. Babel is integrated into Create React\nApp and is an automatic part of compiling a React app built with Create React App.\n32 ❘ CHAPTER 3 JSX\nNOTE Prior to version 17 of React, the JSX Transform converted JSX into\nReact.createElement() statements. With React 17, the JSX Transform was\nrewritten so that it transforms JSX into browser- readable code without using\nReact.createElement(). The result is that developers no longer need to import\nReact into every component in order to use JSX.\nIt can be interesting sometimes to see how Babel converts JSX into JavaScript, and you can do this by\neither viewing the source code for a running React application or by pasting your JSX code into the\nweb- based version of Babel at https://babeljs.io/repl, as shown in Figure 3-1.\nFIGURE 3- 1: Trying out Babel on the web\nBabel does much more than just convert JSX into JavaScript. It also takes JavaScript in your com-",
		"either viewing the source code for a running React application or by pasting your JSX code into the\nweb- based version of Babel at https://babeljs.io/repl, as shown in Figure 3-1.\nFIGURE 3- 1: Trying out Babel on the web\nBabel does much more than just convert JSX into JavaScript. It also takes JavaScript in your com-\nponents that’s written using new and experimental syntax that might not be supported by all of\nyour target web browsers and converts it into JavaScript that can be understood and run in any web\nbrowser that you expect to access your React user interface.\nSyntax Basics of JSX ❘ 33\nEliminating Browser Incompatibilities\nUsing transpilation does away with the age- old problem of browser incompatibilities and having\nto wait until every browser supports a new JavaScript language feature before using it. Rather than\ndevelopers having to write special code and multiple if/then branches to accommodate older brows-",
		"Syntax Basics of JSX ❘ 33\nEliminating Browser Incompatibilities\nUsing transpilation does away with the age- old problem of browser incompatibilities and having\nto wait until every browser supports a new JavaScript language feature before using it. Rather than\ndevelopers having to write special code and multiple if/then branches to accommodate older brows-\ners, Babel makes it possible for developers to just write JavaScript using the latest syntax and then\ntranspile that new JavaScript into a common denominator that will run in any web browser that’s\nlikely to access the app.\nSYNTAX BASICS OF JSX\nAs I may have mentioned (and I’ll mention again, because it’s a really important point), JSX is not\nHTML. Because it’s not HTML, you can’t write JSX in the same loosey- goosey way that you may be\nused to writing HTML.\nJSX Is JavaScript XML\nThe first thing to know about JSX is that it’s XML. So, if you know a little bit about XML (or if",
		"likely to access the app.\nSYNTAX BASICS OF JSX\nAs I may have mentioned (and I’ll mention again, because it’s a really important point), JSX is not\nHTML. Because it’s not HTML, you can’t write JSX in the same loosey- goosey way that you may be\nused to writing HTML.\nJSX Is JavaScript XML\nThe first thing to know about JSX is that it’s XML. So, if you know a little bit about XML (or if\nyou’ve used XHTML), the rules of writing JSX should sound familiar. Namely:\n➤➤ All elements must be closed.\n➤➤ Elements that cannot have child nodes (so- called “empty” elements) must be closed with a\nslash. The most commonly used empty elements in HTML are br, img, input, and link.\n➤➤ Attributes that are strings must have quotes around them.\n➤➤ HTML elements in JSX must be written in all lowercase letters.\nBeware of Reserved Words\nBecause JSX compiles to JavaScript, there is the potential that an element name or attribute name",
		"slash. The most commonly used empty elements in HTML are br, img, input, and link.\n➤➤ Attributes that are strings must have quotes around them.\n➤➤ HTML elements in JSX must be written in all lowercase letters.\nBeware of Reserved Words\nBecause JSX compiles to JavaScript, there is the potential that an element name or attribute name\nthat you use in your JSX code can cause errors in your compiled program. To guard against this,\ncertain HTML attribute names that are also reserved words used in JavaScript have to be renamed,\nas follows:\n➤➤ The class attribute becomes className.\n➤➤ The for attribute becomes htmlFor.\nJSX Uses camelCase\nAttribute names in HTML that contain more than one word are camel- cased in JSX. For example:\n➤➤ The onclick attribute becomes onClick.\n➤➤ The tabindex attribute becomes tabIndex.\n34 ❘ CHAPTER 3 JSX\nPreface Custom Attributes in DOM Elements with data-\nPrior to version 16 of React, if you needed to add an attribute to a DOM element that doesn’t exist",
		"JSX Uses camelCase\nAttribute names in HTML that contain more than one word are camel- cased in JSX. For example:\n➤➤ The onclick attribute becomes onClick.\n➤➤ The tabindex attribute becomes tabIndex.\n34 ❘ CHAPTER 3 JSX\nPreface Custom Attributes in DOM Elements with data-\nPrior to version 16 of React, if you needed to add an attribute to a DOM element that doesn’t exist\nin the HTML or SVG specification for the element, you had to preface it with data-, or else React\nwould ignore it. Listing 3-3 shows a JSX HTML equivalent element with a custom attribute.\nLISTING 3- 3: Custom attributes in HTML must start with data-\n<div data- size=\"XL\"\ndata- color=\"black\"\ndata- description=\"awesome\">\nMy Favorite T- Shirt\n</div>\nStarting with React 16, however, you can use any custom attribute name with built- in DOM ele-\nments. Custom attributes in DOM elements can be useful for including arbitrary data with your",
		"LISTING 3- 3: Custom attributes in HTML must start with data-\n<div data- size=\"XL\"\ndata- color=\"black\"\ndata- description=\"awesome\">\nMy Favorite T- Shirt\n</div>\nStarting with React 16, however, you can use any custom attribute name with built- in DOM ele-\nments. Custom attributes in DOM elements can be useful for including arbitrary data with your\nmarkup that doesn’t have any special meaning or affect the presentation of the HTML in the browser.\nAlthough it is possible to use custom attributes for DOM elements, this is not generally considered a\ngood practice.\nUser- defined elements, on the other hand, can have custom attributes with any name, as shown in\nListing 3-4.\nLISTING 3- 4: User- defined elements can have any attributes\nimport MyFancyWidget from './MyFancyWidget';\nfunction MyFancyComponent(props){\nreturn(\n<MyFancyWidget\nwidgetSize=\"huge\"\nnumberOfColumns=\"3\"\ntitle=\"Welcome to My Widget\" />\n)\n}\nexport default MyFancyComponent;",
		"good practice.\nUser- defined elements, on the other hand, can have custom attributes with any name, as shown in\nListing 3-4.\nLISTING 3- 4: User- defined elements can have any attributes\nimport MyFancyWidget from './MyFancyWidget';\nfunction MyFancyComponent(props){\nreturn(\n<MyFancyWidget\nwidgetSize=\"huge\"\nnumberOfColumns=\"3\"\ntitle=\"Welcome to My Widget\" />\n)\n}\nexport default MyFancyComponent;\nUsing custom attributes with user-d efined elements is the primary way that React passes data between\ncomponents, as you’ll see in Chapter 4.\nJSX Boolean Attributes\nIn HTML and in JSX, certain attributes don’t require values, because their presence is interpreted as\nsetting their value to a Boolean true. For example, in HTML, the disabled attribute of input ele-\nments causes an input to not be changeable by the user:\n<input type=\"text\" name=\"username\" disabled>\nSyntax Basics of JSX ❘ 35\nIn JSX, the value of an attribute can be omitted when it is explicitly true. So, to set the disabled",
		"setting their value to a Boolean true. For example, in HTML, the disabled attribute of input ele-\nments causes an input to not be changeable by the user:\n<input type=\"text\" name=\"username\" disabled>\nSyntax Basics of JSX ❘ 35\nIn JSX, the value of an attribute can be omitted when it is explicitly true. So, to set the disabled\nattribute of a JSX input element to true, you can do either of the following:\n<input type=\"text\" name=\"username\" disabled = {true}/>\n<input type=\"text\" name=\"username\" disabled/>\nUse Curly Braces to Include Literal JavaScript\nWhen you need to include a variable or a piece of JavaScript in your JSX that shouldn’t be interpreted\nby the transpiler, use curly braces around it. Listing 3-5 shows a component whose return statement\nincludes literal JavaScript in JSX attributes.\nLISTING 3- 5: Using literal JavaScript inside of JSX\nfunction SearchInput(props) {\nreturn (\n<div id=\"search- box\">\n<input type=\"text\"\nname=\"search\"\nvalue={props.term}",
		"by the transpiler, use curly braces around it. Listing 3-5 shows a component whose return statement\nincludes literal JavaScript in JSX attributes.\nLISTING 3- 5: Using literal JavaScript inside of JSX\nfunction SearchInput(props) {\nreturn (\n<div id=\"search- box\">\n<input type=\"text\"\nname=\"search\"\nvalue={props.term}\nonChange={(e)=>{props.onChange(e.target.value)}}/>\n</div>\n)\n}\nexport default SearchInput;\nRemember to Use Double Curly Braces with Objects\nOne common mistake is to forget that if you’re including a JavaScript object literal inside of JSX, the\nJSX code will have double curly braces, as shown in Listing 3-6.\nLISTING 3- 6: Object literals in JSX result in double curly braces\nfunction Header(props){\nreturn (\n<h1 style={{fontSize:\"24px\",color:\"blue\"}}>\nWelcome to My Website\n</h1>\n)\n}\nexport default Header;\nPut Comments in Curly Braces\nBecause JSX is actually a way of writing JavaScript, HTML comments don’t work in JSX. Instead,",
		"JSX code will have double curly braces, as shown in Listing 3-6.\nLISTING 3- 6: Object literals in JSX result in double curly braces\nfunction Header(props){\nreturn (\n<h1 style={{fontSize:\"24px\",color:\"blue\"}}>\nWelcome to My Website\n</h1>\n)\n}\nexport default Header;\nPut Comments in Curly Braces\nBecause JSX is actually a way of writing JavaScript, HTML comments don’t work in JSX. Instead,\nyou can use JavaScript block comment syntax (/* and */).\n36 ❘ CHAPTER 3 JSX\nHowever, because you don’t want to transpile your comments, they must be enclosed in curly braces,\nas shown in Listing 3-7.\nLISTING 3- 7: Enclose comments in curly braces\nfunction Header(props){\nreturn (\n<h1 style={{fontSize:\"24px\",color:\"blue\"}}>\n{/* Todo: Make this header dynamic */}\nWelcome to My Website\n</h1>\n)\n}\nexport default Header;\nWhen to Use JavaScript in JSX\nThe concept of separation of concerns in programming says that layout code should be separated",
		"as shown in Listing 3-7.\nLISTING 3- 7: Enclose comments in curly braces\nfunction Header(props){\nreturn (\n<h1 style={{fontSize:\"24px\",color:\"blue\"}}>\n{/* Todo: Make this header dynamic */}\nWelcome to My Website\n</h1>\n)\n}\nexport default Header;\nWhen to Use JavaScript in JSX\nThe concept of separation of concerns in programming says that layout code should be separated\nfrom logic. What this means in practice is that code that does calculations, retrieves data, combines\ndata, and controls the flow of an application should be written as functions outside of the return\nstatement in a component, rather than inside of curly braces in JSX.\nLimited amounts of logic are necessary and perfectly normal inside of the return statement, however.\nThere’s no hard-a nd- fast rule for how much is too much, but, generally, any JavaScript that you write\nin your JSX should only have to do with presentation, and it should be single JavaScript expressions,\nrather than functions or complex logic.",
		"Limited amounts of logic are necessary and perfectly normal inside of the return statement, however.\nThere’s no hard-a nd- fast rule for how much is too much, but, generally, any JavaScript that you write\nin your JSX should only have to do with presentation, and it should be single JavaScript expressions,\nrather than functions or complex logic.\nAn example of purely presentational JavaScript would be the case of conditional rendering.\nConditionals in JSX\nOftentimes, a component needs to output different subcomponents, or hide certain components,\nbased on the results of expressions or the values of variables. We call this conditional rendering.\nThere are three ways to write conditional statements in JavaScript, and you may use any of these to\ndo conditional rendering.\nConditional Rendering with if/else and Element Variables\nJSX elements can be assigned to variables, and these variables can be substituted for the elements\ninside a component’s return statement, as shown in Listing 3-8.",
		"There are three ways to write conditional statements in JavaScript, and you may use any of these to\ndo conditional rendering.\nConditional Rendering with if/else and Element Variables\nJSX elements can be assigned to variables, and these variables can be substituted for the elements\ninside a component’s return statement, as shown in Listing 3-8.\nLISTING 3- 8: Using element variables\nimport Header from './Header';\nfunction Welcome(){\nSyntax Basics of JSX ❘ 37\nlet header = <Header/>;\nreturn(\n<div>\n{header}\n</div>\n);\n}\nexport default Welcome;\nBy using a conditional statement, you can assign a different element to a variable and thus change\nwhat gets rendered, as shown in Listing 3-9.\nLISTING 3- 9: Conditional rendering with element variables\nimport Header from './Header';\nimport Login from './Login';\nfunction Welcome({loggedIn}) {\nlet header;\nif (loggedIn) {\nheader = <Header/>;\n} else {\nheader = <Login/>;\n}\nreturn (\n<div>\n{header}\n</div>\n);\n}\nexport default Welcome;",
		"what gets rendered, as shown in Listing 3-9.\nLISTING 3- 9: Conditional rendering with element variables\nimport Header from './Header';\nimport Login from './Login';\nfunction Welcome({loggedIn}) {\nlet header;\nif (loggedIn) {\nheader = <Header/>;\n} else {\nheader = <Login/>;\n}\nreturn (\n<div>\n{header}\n</div>\n);\n}\nexport default Welcome;\nConditional Rendering with the && Operator\nRather than having your conditional logic outside of the return statement, you can write it inline by\nusing the logical AND operator, &&. The && operator evaluates the expressions on its left and right. If\nboth expressions evaluate to a Boolean true, the && will return the one on the right. If either side of\nthe && operator is false, then a value of false will be returned.\nBy applying this fact, you can conditionally return an expression from the right side of && if the left\nside of && is true.\nThis can be a little confusing at first. Take a look at Listing 3-10. This code will render the",
		"both expressions evaluate to a Boolean true, the && will return the one on the right. If either side of\nthe && operator is false, then a value of false will be returned.\nBy applying this fact, you can conditionally return an expression from the right side of && if the left\nside of && is true.\nThis can be a little confusing at first. Take a look at Listing 3-10. This code will render the\nHeader component if loggedIn evaluates to true.\n38 ❘ CHAPTER 3 JSX\nLISTING 3- 10: Conditional rendering with &&\nimport Header from './Header';\nfunction Welcome({loggedIn}){\nreturn (\n<div>\n{loggedIn&&<Header />}\nNote: if you don't see the header messsage,\nyou're not logged in.\n</div>\n)\n}\nexport default Welcome;\nConditional Rendering with the Conditional Operator\nThe conditional operator is a way to combine the simplicity and conciseness of inline conditional\nrendering with the ability to have an else case that element variables combined with if and\nelse gives us.",
		"return (\n<div>\n{loggedIn&&<Header />}\nNote: if you don't see the header messsage,\nyou're not logged in.\n</div>\n)\n}\nexport default Welcome;\nConditional Rendering with the Conditional Operator\nThe conditional operator is a way to combine the simplicity and conciseness of inline conditional\nrendering with the ability to have an else case that element variables combined with if and\nelse gives us.\nListing 3-11 shows an example of using the conditional operator.\nLISTING 3- 11: Using the conditional operator\nimport Header from './Header';\nimport Login from './Login';\nfunction Welcome({loggedIn}){\nreturn(\n<div>\n{loggedIn ? <Header /> : <Login />}\n</div>\n)\n}\nexport default Welcome;\nIn this example, the expression to the left of the question mark is evaluated. If it’s true, the\nWelcomeMessage component is returned. If it’s false, the Login component is returned.\nExpressions in JSX\nYou can use any JavaScript expression inside of your JSX or inside of React element attribute values",
		"return(\n<div>\n{loggedIn ? <Header /> : <Login />}\n</div>\n)\n}\nexport default Welcome;\nIn this example, the expression to the left of the question mark is evaluated. If it’s true, the\nWelcomeMessage component is returned. If it’s false, the Login component is returned.\nExpressions in JSX\nYou can use any JavaScript expression inside of your JSX or inside of React element attribute values\nby surrounding it with curly braces. JSX elements themselves are JavaScript expressions as well,\nbecause they get converted into function calls during compilation.\nTo understand what JavaScript you can and can’t include in JSX, let’s take a brief look at what a\nJavaScript expression is.\nSyntax Basics of JSX ❘ 39\nAn expression is any valid unit of code that resolves to a value. Here are some examples of valid\nJavaScript expressions:\n➤➤ Arithmetic: 1+1\n➤➤ String: \"Hello, \" + \"World!\"\n➤➤ Logical: this !== that\n➤➤ Basic keywords and general expressions: This includes certain keywords (such as this, null,",
		"JavaScript expression is.\nSyntax Basics of JSX ❘ 39\nAn expression is any valid unit of code that resolves to a value. Here are some examples of valid\nJavaScript expressions:\n➤➤ Arithmetic: 1+1\n➤➤ String: \"Hello, \" + \"World!\"\n➤➤ Logical: this !== that\n➤➤ Basic keywords and general expressions: This includes certain keywords (such as this, null,\ntrue, and false) as well as variable references and function calls.\nExamples of structures in JavaScript that do not return a value (and are thus not expressions) include\nfor loops and if statements, as well as function declarations (using the function keyword). You can\nstill use these in your React components, of course, but you’ll need to use them outside of the return\nstatement, as we did in Listing 3-9.\nFunctions can be included in JSX, provided that they’re invoked immediately and that they return a\nvalue that can be parsed by JSX, or that they’re passed as values for an attribute. The component in",
		"still use these in your React components, of course, but you’ll need to use them outside of the return\nstatement, as we did in Listing 3-9.\nFunctions can be included in JSX, provided that they’re invoked immediately and that they return a\nvalue that can be parsed by JSX, or that they’re passed as values for an attribute. The component in\nListing 3-12 has a return statement that includes a function as an event handler.\nLISTING 3- 12: Using an arrow function as an event handler\nimport {useState} from 'react';\nfunction CountUp(){\nconst [count,setCount] = useState(0);\nreturn (\n<div>\n<button onClick={()=>setCount(count+1)}>Add One</button>\n{count}\n</div>\n);\n}\nexport default CountUp;\nListing 3-13 shows an example of using a function that’s immediately invoked and that’s valid in JSX.\nLISTING 3- 13: Immediately invoking a function in JSX\nfunction ImmediateInvoke(){\nreturn(\n<div>\n{(()=><h1>The Header</h1>)()}\n</div>\n);\n}\nexport default ImmediateInvoke;\n40 ❘ CHAPTER 3 JSX\nUsing Children in JSX",
		"{count}\n</div>\n);\n}\nexport default CountUp;\nListing 3-13 shows an example of using a function that’s immediately invoked and that’s valid in JSX.\nLISTING 3- 13: Immediately invoking a function in JSX\nfunction ImmediateInvoke(){\nreturn(\n<div>\n{(()=><h1>The Header</h1>)()}\n</div>\n);\n}\nexport default ImmediateInvoke;\n40 ❘ CHAPTER 3 JSX\nUsing Children in JSX\nThe return statement in a React component can only return one thing. This one thing can be a\nstring, a number, an array, a Boolean, or a single JSX element. Keep in mind, however, that a single\nJSX element can have as many children as you like. As long as you start and end your return state-\nment with a matching opening tag and closing tag, everything in between (provided that it’s valid JSX\nor a JavaScript expression) is fine.\nHere’s an example of an invalid JSX return value:\nreturn(\n<MyComponent />\n<MyOtherComponent />\n);\nOne way to make this a valid JSX return value is to wrap two elements with another element,\nlike this:\nreturn(",
		"ment with a matching opening tag and closing tag, everything in between (provided that it’s valid JSX\nor a JavaScript expression) is fine.\nHere’s an example of an invalid JSX return value:\nreturn(\n<MyComponent />\n<MyOtherComponent />\n);\nOne way to make this a valid JSX return value is to wrap two elements with another element,\nlike this:\nreturn(\n<div>\n<MyComponent />\n<MyOtherComponent />\n</div>\n);\nWith the div element wrapping the two user- defined elements, we now have a single element\nbeing returned.\nReact Fragments\nAlthough it’s quite common to see multiple elements wrapped with a div element or another element\nfor the purpose of returning a single JSX element, adding div elements just for the sake of eliminat-\ning errors in your code, rather than to add necessary meaning or structure to your code, creates code\nbloat and decreases the accessibility of your code.\nTo prevent the introduction of unnecessary elements, you can use the built- in React.Fragment com-",
		"for the purpose of returning a single JSX element, adding div elements just for the sake of eliminat-\ning errors in your code, rather than to add necessary meaning or structure to your code, creates code\nbloat and decreases the accessibility of your code.\nTo prevent the introduction of unnecessary elements, you can use the built- in React.Fragment com-\nponent. React.Fragment wraps your JSX into a single JSX element, but doesn’t return any HTML.\nYou can use the React.Fragment component in one of three ways:\n1. By using dot notation: <React.Fragment></React.Fragment>\n2. By importing Fragment from the react library using curly braces\n3. By using its short syntax, which is just a nameless element: < > < / >\nListing 3-14 shows how to use React.Fragment in a component.\nLISTING 3- 14: Using React.Fragment\nimport {Fragment} from 'react';\nfunction MyComponent(){\nSummary ❘ 41\nreturn(\n<Fragment>\n<h1>The heading</h1>\n<h2>The subheading</h2>\n</Fragment>\n);\n}\nexport default MyComponent;",
		"3. By using its short syntax, which is just a nameless element: < > < / >\nListing 3-14 shows how to use React.Fragment in a component.\nLISTING 3- 14: Using React.Fragment\nimport {Fragment} from 'react';\nfunction MyComponent(){\nSummary ❘ 41\nreturn(\n<Fragment>\n<h1>The heading</h1>\n<h2>The subheading</h2>\n</Fragment>\n);\n}\nexport default MyComponent;\nListing 3-15 shows how to use the short syntax for React.Fragment.\nLISTING 3- 15: Using React.Fragment’s short syntax\nfunction MyComponent(){\nreturn(\n<>\n<h1>The heading</h1>\n<h2>The subheading</h2>\n</>\n);\n}\nexport default MyComponent;\nNOTE Notice that when you use React.Fragment’s short syntax, you don’t\nneed to import Fragment from React.\nThe result of running either Listing 3-14 or Listing 3-15 is that just the h1 and h2 HTML elements\nwill be returned.\nSUMMARY\nJSX is an important tool that is used in the development of nearly every React component. In this\nchapter, you learned:",
		"</>\n);\n}\nexport default MyComponent;\nNOTE Notice that when you use React.Fragment’s short syntax, you don’t\nneed to import Fragment from React.\nThe result of running either Listing 3-14 or Listing 3-15 is that just the h1 and h2 HTML elements\nwill be returned.\nSUMMARY\nJSX is an important tool that is used in the development of nearly every React component. In this\nchapter, you learned:\n➤➤ Why we use JSX, the XML language that React uses to make it easier to visualize and write\nthe output of components.\n➤➤ That JSX is not HTML, but that React uses JSX to generate HTML.\n➤➤ The history of JavaScript modules, which make distributed development and reusable com-\nponents possible, and how to use import and export to create and use modules.\n➤➤ What transpiling is.\n➤➤ How to write JSX code.\n42 ❘ CHAPTER 3 JSX\n➤➤ What conditional rendering is and how to do it in JSX.\n➤➤ How to use JavaScript expressions inside JSX.\n➤➤ How to use comments in JSX.",
		"➤➤ The history of JavaScript modules, which make distributed development and reusable com-\nponents possible, and how to use import and export to create and use modules.\n➤➤ What transpiling is.\n➤➤ How to write JSX code.\n42 ❘ CHAPTER 3 JSX\n➤➤ What conditional rendering is and how to do it in JSX.\n➤➤ How to use JavaScript expressions inside JSX.\n➤➤ How to use comments in JSX.\n➤➤ How to use React.Fragment to group elements together without returning extra\nHTML elements.\nIn the next chapter, you’ll learn about the React library itself, and about the basic unit of every React\nuser interface: the component.\n4\nAll About Components\nUp until now, we’ve mostly been talking about the tools that make React development possible,\nincluding your development environment, Node.js, ReactDOM, JavaScript modules, and JSX.\nNow it’s time to dig deeply into the heart of what makes React tick: the component. In this\nchapter, you’ll learn:\n➤➤ The relationship between components and elements.",
		"4\nAll About Components\nUp until now, we’ve mostly been talking about the tools that make React development possible,\nincluding your development environment, Node.js, ReactDOM, JavaScript modules, and JSX.\nNow it’s time to dig deeply into the heart of what makes React tick: the component. In this\nchapter, you’ll learn:\n➤➤ The relationship between components and elements.\n➤➤ How to use React’s HTML elements.\n➤➤ How to pass data between components with props.\n➤➤ How to write class components.\n➤➤ How to write function components.\n➤➤ How to bind functions in JavaScript.\n➤➤ How to manage React state.\nWHAT IS A COMPONENT?\nComponents are the building blocks of React applications. A React component is a function or\na JavaScript class that optionally accepts data and returns a React element that describes some\npiece of the user interface. A React user interface is made up of a hierarchy of components that",
		"➤➤ How to bind functions in JavaScript.\n➤➤ How to manage React state.\nWHAT IS A COMPONENT?\nComponents are the building blocks of React applications. A React component is a function or\na JavaScript class that optionally accepts data and returns a React element that describes some\npiece of the user interface. A React user interface is made up of a hierarchy of components that\nbuild up to a single component (called the root component) that is rendered in the web browser.\nFigure 4‑1 shows an example of a React component tree.\nIt’s possible to create a React application with only a single component, but for all but the\nsmallest apps, breaking your app up into multiple components makes development and man‑\nagement of the code easier.\n44 ❘ CHAPTER 4 All About Components\nApp\nResultList\nHeader\nSearch Result SearchResult\nSearch Navigation\nImage Description Image Description\nSearchInput\nNavItem NavItem\nFIGURE 4- 1: A tree of react components\nCOMPONENTS VS. ELEMENTS",
		"smallest apps, breaking your app up into multiple components makes development and man‑\nagement of the code easier.\n44 ❘ CHAPTER 4 All About Components\nApp\nResultList\nHeader\nSearch Result SearchResult\nSearch Navigation\nImage Description Image Description\nSearchInput\nNavItem NavItem\nFIGURE 4- 1: A tree of react components\nCOMPONENTS VS. ELEMENTS\nBefore we talk about components, it’s important to understand the relationship between components\nand elements in React.\nComponents Define Elements\nThe job of a component is to return an element.\nEach component within an application has a unique name, which is how you use it. The component\nname becomes the name of the React element when you include a component in another component,\nas shown in Listing 4‑1.\nLISTING 4- 1: Components define elements\nfunction WelcomeMessage(){\nreturn \"Welcome!\";\n}\nexport default WelcomeMessage;\nComponents vs. Elements ❘ 45",
		"Each component within an application has a unique name, which is how you use it. The component\nname becomes the name of the React element when you include a component in another component,\nas shown in Listing 4‑1.\nLISTING 4- 1: Components define elements\nfunction WelcomeMessage(){\nreturn \"Welcome!\";\n}\nexport default WelcomeMessage;\nComponents vs. Elements ❘ 45\nIn this very simple example, WelcomeMessage is a React component that was created using a function\nand exported as a JavaScript module. Once it’s exported, WelcomeMessage can be imported into any\nother React component where you need to make use of its functionality, as shown in Listing 4‑2.\nLISTING 4- 2: Components can be imported into other components\nimport WelcomeMessage from './WelcomeMessage';\nfunction WelcomeTitle(){\nreturn <h1><WelcomeMessage /></h1>;\n}\nexport default WelcomeTitle;\nIt’s not a requirement that each component have its own module, but that’s the most common way",
		"other React component where you need to make use of its functionality, as shown in Listing 4‑2.\nLISTING 4- 2: Components can be imported into other components\nimport WelcomeMessage from './WelcomeMessage';\nfunction WelcomeTitle(){\nreturn <h1><WelcomeMessage /></h1>;\n}\nexport default WelcomeTitle;\nIt’s not a requirement that each component have its own module, but that’s the most common way\ncomponents are defined. In components created using a default export, the file containing the module\nusually takes the name of the component defined in the file.\nOnce you import a component into another component, this is where React elements come in.\nElements Invoke Components\nOnce you’ve imported a component into another component, the imported component’s function‑\nality can be included in your new component’s JSX using an element. You can include as many\ncomponents inside another component as you need to, and there’s no limit to how many levels of",
		"Once you import a component into another component, this is where React elements come in.\nElements Invoke Components\nOnce you’ve imported a component into another component, the imported component’s function‑\nality can be included in your new component’s JSX using an element. You can include as many\ncomponents inside another component as you need to, and there’s no limit to how many levels of\ncomponents a tree of components can have. Once you import a component, you can use the element\nit defines as many times as you need to and each usage will create a new instance of the component\nwith its own data and memory.\nIn general, the point of using components is to provide a higher level of abstraction that reduces the\ncomplexity of an application and enables reuse. Listing 4‑3 shows an example of a top‑ level React\ncomponent that uses the functionality of other components to display a shopping cart user interface.\nLISTING 4- 3: Using components to reduce complexity",
		"with its own data and memory.\nIn general, the point of using components is to provide a higher level of abstraction that reduces the\ncomplexity of an application and enables reuse. Listing 4‑3 shows an example of a top‑ level React\ncomponent that uses the functionality of other components to display a shopping cart user interface.\nLISTING 4- 3: Using components to reduce complexity\nimport React from 'react';\nimport CartItems from './CartItems';\nimport DisplayTotal from './DisplayTotal';\nimport CheckoutButton from './CheckoutButton';\nimport styles from './Cart.css.js';\nfunction Cart(props){\nreturn(\n<div style={styles.cart}>\n<h2>Cart</h2>\n<CartItems items = {props.inCart} />\ncontinues\n46 ❘ CHAPTER 4 All About Components\nLISTING 4-3 (continued)\n<DisplayTotal items = {props.inCart} />\n<CheckoutButton />\n</div>\n);\n}\nexport default Cart;\nNotice that the component in Listing 4‑3 uses a combination of ordinary JavaScript and imported",
		"function Cart(props){\nreturn(\n<div style={styles.cart}>\n<h2>Cart</h2>\n<CartItems items = {props.inCart} />\ncontinues\n46 ❘ CHAPTER 4 All About Components\nLISTING 4-3 (continued)\n<DisplayTotal items = {props.inCart} />\n<CheckoutButton />\n</div>\n);\n}\nexport default Cart;\nNotice that the component in Listing 4‑3 uses a combination of ordinary JavaScript and imported\nmodules to return a combination of custom elements and HTML elements. It’s fairly trivial to figure\nout the gist of what will be rendered by this component just by looking at the return statement.\nThe entire component could have been written with everything in a single file, as shown (partially) in\nListing 4‑4, but the result would be a file that would be much larger, more difficult to work with, and\nmore difficult to maintain.\nDon’t worry if much of the code in Listing 4‑4 looks strange or unfamiliar to you. Remember that\nReact is just JavaScript, and this example uses several relatively new JavaScript tools and functions",
		"Listing 4‑4, but the result would be a file that would be much larger, more difficult to work with, and\nmore difficult to maintain.\nDon’t worry if much of the code in Listing 4‑4 looks strange or unfamiliar to you. Remember that\nReact is just JavaScript, and this example uses several relatively new JavaScript tools and functions\nthat I’ll explain later in this chapter.\nLISTING 4- 4: Putting everything in one component\nimport React,{useState} from 'react';\nimport styles from './Cart.css.js';\nfunction Cart(props){\nconst [inCart,setInCart] = useState(props.inCart);\nconst removeFromCart = (item)=>{\nconst index = inCart.indexOf(item);\nconst newCart = [...inCart.slice(0, index), ...inCart.slice(index + 1)];\nsetInCart(newCart);\n};\nconst calculatedTotal = inCart.reduce((accumulator, item) => accumulator +\n(item.price || 0), 0);\nlet ItemList = inCart.map((item)=>{\nreturn (<div key={item.id}>{item.title} – {item.price}\n<button onClick={()=>{removeFromCart(item)}}>remove</button></div>)\n});",
		"const index = inCart.indexOf(item);\nconst newCart = [...inCart.slice(0, index), ...inCart.slice(index + 1)];\nsetInCart(newCart);\n};\nconst calculatedTotal = inCart.reduce((accumulator, item) => accumulator +\n(item.price || 0), 0);\nlet ItemList = inCart.map((item)=>{\nreturn (<div key={item.id}>{item.title} – {item.price}\n<button onClick={()=>{removeFromCart(item)}}>remove</button></div>)\n});\nreturn(\n<div style={styles.cart}>\n<h2>Cart</h2>\nBuilt- in Components ❘ 47\n{ItemList}\n<p>total: ${calculatedTotal}</p>\n<button>Checkout</button>\n</div>\n);\n}\nexport default Cart;\nBUILT- IN COMPONENTS\nReact has built‑i n components for the most commonly used HTML elements and their attributes.\nThere are also built‑ in components for Scalable Vector Graphics (SVG) elements and attributes. These\nbuilt‑ in components produce output in the DOM and are the base for your custom components.\nHTML Element Components\nReact’s built‑i n HTML element components have the same names as elements from HTML5. Using",
		"There are also built‑ in components for Scalable Vector Graphics (SVG) elements and attributes. These\nbuilt‑ in components produce output in the DOM and are the base for your custom components.\nHTML Element Components\nReact’s built‑i n HTML element components have the same names as elements from HTML5. Using\nthem in your React app causes the equivalent HTML element to be rendered.\nMany React developers (and web application developers in general) tend to use the div element\nfor every type of container in their user interfaces. While this is convenient, it’s not always recom‑\nmended. HTML is a rich and descriptive language when used correctly, and using meaningful (aka\nsemantic) HTML elements to mark up your content makes it more accessible for search engines and\npeople as well.\nTable 4‑1 shows all the HTML elements that React supports, along with a brief explanation of each\nelement. If an element that you want to use in your user interface isn’t on this list, try using it to see",
		"semantic) HTML elements to mark up your content makes it more accessible for search engines and\npeople as well.\nTable 4‑1 shows all the HTML elements that React supports, along with a brief explanation of each\nelement. If an element that you want to use in your user interface isn’t on this list, try using it to see\nif it’s been added since this list was compiled. If it isn’t, you can submit a request to Facebook that\nthe element be added to React by filing an issue in the React github.com repository at https://\ngithub.com/facebook/react/issues/new.\nTABLE 4-1 : HTML Elements Supported by React\nHTML ELEMENT DESCRIPTION\na Creates a hyperlink.\nabbr Represents an abbreviation or acronym.\naddress Indicates that the containing HTML includes contact information.\narea Defines a clickable area in an imagemap.\narticle Represents a self- contained composition (such as a story or an article) in a page.\naside Represents content that is indirectly related to the main content.\ncontinues",
		"HTML ELEMENT DESCRIPTION\na Creates a hyperlink.\nabbr Represents an abbreviation or acronym.\naddress Indicates that the containing HTML includes contact information.\narea Defines a clickable area in an imagemap.\narticle Represents a self- contained composition (such as a story or an article) in a page.\naside Represents content that is indirectly related to the main content.\ncontinues\n48 ❘ CHAPTER 4 All About Components\nTABLE 4-1 (continued)\nHTML ELEMENT DESCRIPTION\naudio Embeds sound content.\nb Used to draw the reader’s attention to the contents. Previously, this was\nthe “bold” element, but it’s now called the “Bring to Attention” element to\nseparate its purpose from how it’s styled.\nbase Specifies the base URL for all relative URLs in the document.\nbdi Bidirectional Isolate. Isolates text that may flow in a different direction from text\naround it.\nbdo Bidirectional Text Override. Changes the direction of text.\nbig Renders text at a font size one level larger (obsolete).",
		"separate its purpose from how it’s styled.\nbase Specifies the base URL for all relative URLs in the document.\nbdi Bidirectional Isolate. Isolates text that may flow in a different direction from text\naround it.\nbdo Bidirectional Text Override. Changes the direction of text.\nbig Renders text at a font size one level larger (obsolete).\nblockquote Indicates an extended quotation.\nbody Represents the content of an HTML document.\nbr Produces a line break.\nbutton Represents a clickable button.\ncanvas Creates an area for drawing with the canvas API or WebGL.\ncaption Specifies a caption for a table.\ncite Describes a reference to a cited work.\ncode Indicates that its content should be styled as computer code.\ncol Defines a column within a table.\ncolgroup Defines a group of columns in a table.\ndata Links content to a machine-r eadable translation.\ndatalist Contains option elements indicating the permissible options available for a\nform control.",
		"caption Specifies a caption for a table.\ncite Describes a reference to a cited work.\ncode Indicates that its content should be styled as computer code.\ncol Defines a column within a table.\ncolgroup Defines a group of columns in a table.\ndata Links content to a machine-r eadable translation.\ndatalist Contains option elements indicating the permissible options available for a\nform control.\ndd Provides the definition for a preceding term (specified using dt).\ndel Represents text that has been deleted from a document.\ndetails Creates a widget in which information is visible when the widget is toggled to its\n“open” state.\ndfn Indicates the term being defined within a sentence.\ndialog Represents a dialog box, subwindow, alert box, or other such interactive\nelement.\ndiv A generic container with no effect on content or layout.\nBuilt- in Components ❘ 49\nHTML ELEMENT DESCRIPTION\ndl Represents a description list.\ndt Specifies a term in a definition list. Used inside dl.",
		"“open” state.\ndfn Indicates the term being defined within a sentence.\ndialog Represents a dialog box, subwindow, alert box, or other such interactive\nelement.\ndiv A generic container with no effect on content or layout.\nBuilt- in Components ❘ 49\nHTML ELEMENT DESCRIPTION\ndl Represents a description list.\ndt Specifies a term in a definition list. Used inside dl.\nem Marks text that has emphasis.\nembed Embeds external content in the document.\nfieldset Groups controls and labels within a form.\nfigcaption Describes the contents of a parent figure element.\nfigure Represents self-c ontained content, optionally with a caption.\nfooter Represents a footer for its nearest sectioning content.\nform Represents a document section containing interactive controls.\nh1 First- level section heading.\nh2 Second- level section heading.\nh3 Third- level section heading.\nh4 Fourth- level section heading.\nh5 Fifth- level section heading.\nh6 Sixth- level section heading.",
		"footer Represents a footer for its nearest sectioning content.\nform Represents a document section containing interactive controls.\nh1 First- level section heading.\nh2 Second- level section heading.\nh3 Third- level section heading.\nh4 Fourth- level section heading.\nh5 Fifth- level section heading.\nh6 Sixth- level section heading.\nhead Contains machine- readable information about the document.\nheader Represents introductory content.\nhr Represents a thematic break between sections.\nhtml Represents the root of an HTML document.\ni Represents idiomatic text that is set off from the normal text.\niframe Represents a nested browser context.\nimg Embeds an image into the document.\ninput Creates interactive controls for web- based forms.\nins Represents a range of text that has been added to the document.\nkbd Represents a span of text denoting textual user input.\nkeygen Facilitates generation of key material and submission of the public key in an\nHTML form.",
		"iframe Represents a nested browser context.\nimg Embeds an image into the document.\ninput Creates interactive controls for web- based forms.\nins Represents a range of text that has been added to the document.\nkbd Represents a span of text denoting textual user input.\nkeygen Facilitates generation of key material and submission of the public key in an\nHTML form.\nlabel Represents a caption for an item in a user interface.\nlegend Represents a caption for an element in a fieldset.\ncontinues\n50 ❘ CHAPTER 4 All About Components\nTABLE 4-1 (continued)\nHTML ELEMENT DESCRIPTION\nli Represents an item in a list.\nlink Specifies a relationship between the document and an external resource.\nCommonly used to link stylesheets.\nmain Represents the dominant content of the body of a document.\nmap Used with area elements to define an imagemap.\nmark Represents marked, or highlighted, text.\nmenu Represents a group of commands.\nmenuitem Represents a command in a menu.",
		"li Represents an item in a list.\nlink Specifies a relationship between the document and an external resource.\nCommonly used to link stylesheets.\nmain Represents the dominant content of the body of a document.\nmap Used with area elements to define an imagemap.\nmark Represents marked, or highlighted, text.\nmenu Represents a group of commands.\nmenuitem Represents a command in a menu.\nmeta Represents metadata that can’t be represented with other metadata elements\n(such as title, link, script, or style).\nmeter Represents a fractional value or a scalar value within a known range.\nnav Represents a section containing navigation links.\nnoscript Represents a section to be inserted if a script type is unsupported or if scripting\nis disabled in the browser.\nobject Represents an external resource.\nol Represents an ordered list.\noptgroup Creates a grouping of options within a select element.\noption Defines an item in a select or optgroup.",
		"nav Represents a section containing navigation links.\nnoscript Represents a section to be inserted if a script type is unsupported or if scripting\nis disabled in the browser.\nobject Represents an external resource.\nol Represents an ordered list.\noptgroup Creates a grouping of options within a select element.\noption Defines an item in a select or optgroup.\noutput Creates a container for the results of a calculation or for user input.\np Represents a paragraph.\nparam Defines parameters for an object.\npicture Contains source elements and an img element to provide alternative versions\nof an image.\npre Represents preformatted text which should be presented exactly as written.\nprogress Displays an indicator showing progress towards the completion of a task, such\nas a progress bar.\nq Indicates that its content is a quotation.\nrp Used to provide fallback content for browsers that don’t support ruby\nannotations using the ruby element.\nrt Specifies the ruby text component of a ruby annotation.",
		"pre Represents preformatted text which should be presented exactly as written.\nprogress Displays an indicator showing progress towards the completion of a task, such\nas a progress bar.\nq Indicates that its content is a quotation.\nrp Used to provide fallback content for browsers that don’t support ruby\nannotations using the ruby element.\nrt Specifies the ruby text component of a ruby annotation.\nruby Represents annotations for showing the pronunciation of East Asian characters.\nBuilt- in Components ❘ 51\nHTML ELEMENT DESCRIPTION\ns Represents a strikethrough.\nsamp Encloses text that represents sample output from a computer program.\nscript Embeds executable code or data.\nsection Represents a standalone section in a document.\nselect Represents a control that shows a menu of options.\nsmall Represents small print, such as copyright or legal text.\nsource Specifies multiple media resources for picture and audio elements.\nspan A generic inline container.",
		"samp Encloses text that represents sample output from a computer program.\nscript Embeds executable code or data.\nsection Represents a standalone section in a document.\nselect Represents a control that shows a menu of options.\nsmall Represents small print, such as copyright or legal text.\nsource Specifies multiple media resources for picture and audio elements.\nspan A generic inline container.\nstrong Indicates that its contents have strong importance.\nstyle Contains style information for a document.\nsub Specifies inline text that should be displayed as subscript.\nsummary Specifies a summary, legend, or caption for details content.\nsup Specifies inline text that should be displayed as superscript.\ntable Represents tabular data.\ntbody Encapsulates table rows in a table.\ntd Defines a cell in a table.\ntextarea Represents a multi-l ine text editing control.\ntfoot Defines a set of rows summarizing the columns in a table.\nth Defines a cell as a header of a group of table cells.",
		"sup Specifies inline text that should be displayed as superscript.\ntable Represents tabular data.\ntbody Encapsulates table rows in a table.\ntd Defines a cell in a table.\ntextarea Represents a multi-l ine text editing control.\ntfoot Defines a set of rows summarizing the columns in a table.\nth Defines a cell as a header of a group of table cells.\nthead Defines a set of rows defining the head of the columns in a table.\ntime Represents a period of time.\ntitle Defines the title that is shown in the browser’s title bar and browser tab.\ntr Defines a row of cells in a table.\ntrack Contains timed text tracks (such as subtitles) for audio and video content.\nu Originally the underline element, specifies that text should be rendered in a way\nthat indicates that it has non- textual annotation (whatever that means).\nul Represents an unordered list (usually rendered as a bulleted list).\nvar Represents the name of a variable in mathematic or programming context.",
		"track Contains timed text tracks (such as subtitles) for audio and video content.\nu Originally the underline element, specifies that text should be rendered in a way\nthat indicates that it has non- textual annotation (whatever that means).\nul Represents an unordered list (usually rendered as a bulleted list).\nvar Represents the name of a variable in mathematic or programming context.\nvideo Embeds a media player that supports video playback.\nwbr Represents a word break opportunity, where the browser may optionally break\na line.\n52 ❘ CHAPTER 4 All About Components\nAttributes vs. Props\nIn markup languages (such as XML and HTML), attributes define properties or characteristics of the\nelement, and are specified using the name=value format.\nBecause JSX is an XML markup language, JSX elements can have attributes, and there’s no limit to\nthe number of attributes that a single JSX element can have.\nPassing Props",
		"a line.\n52 ❘ CHAPTER 4 All About Components\nAttributes vs. Props\nIn markup languages (such as XML and HTML), attributes define properties or characteristics of the\nelement, and are specified using the name=value format.\nBecause JSX is an XML markup language, JSX elements can have attributes, and there’s no limit to\nthe number of attributes that a single JSX element can have.\nPassing Props\nAttributes that you write in JSX elements are passed to the component represented by the element\nas properties, or props for short. You can access props inside the component using the component’s\nprops object.\nTo illustrate how props are used for passing data between components, I’ll use the example of a\ncomponent called Farms, which includes multiple instances of the Farm component, as shown in List‑\ning 4‑5. Props that you pass into the Farm component are what make it possible for the generic Farm\ncomponent to represent any farm.",
		"props object.\nTo illustrate how props are used for passing data between components, I’ll use the example of a\ncomponent called Farms, which includes multiple instances of the Farm component, as shown in List‑\ning 4‑5. Props that you pass into the Farm component are what make it possible for the generic Farm\ncomponent to represent any farm.\nNote that a string can be passed into a component by surrounding it with quotes, and that any other\ntype of data can be passed to a component by using curly braces to indicate that the value should be\ntreated as JavaScript.\nLISTING 4- 5: Passing props\nimport Farm from './Farm';\nexport default function Farms(){\nreturn(\n<>\n<Farm\nfarmer=\"Old McDonald\"\nanimals={['pigs','cows','chickens']} />\n<Farm\nfarmer=\"Mr. Jones\"\nanimals={['pigs','horses','donkey','goat']} />\n</>\n)\n}\nAccessing Props\nOnce values have been passed as props, you can access that data inside the component. Listing 4‑6",
		"treated as JavaScript.\nLISTING 4- 5: Passing props\nimport Farm from './Farm';\nexport default function Farms(){\nreturn(\n<>\n<Farm\nfarmer=\"Old McDonald\"\nanimals={['pigs','cows','chickens']} />\n<Farm\nfarmer=\"Mr. Jones\"\nanimals={['pigs','horses','donkey','goat']} />\n</>\n)\n}\nAccessing Props\nOnce values have been passed as props, you can access that data inside the component. Listing 4‑6\nshows the Farm component and how it makes use of the data passed into it.\nLISTING 4- 6: Using props inside a component\nexport default function Farm(props){\nreturn (\nBuilt- in Components ❘ 53\n<div>\n<p>{props.farmer} had a farm.</p>\n<p>On his farm, he had some {props.animals[0]}.</p>\n<p>On his farm, he had some {props.animals[1]}.</p>\n<p>On his farm, he had some {props.animals[2]}.</p>\n</div>\n)\n}\nAs in all JavaScript functions, if data is passed into a function component, you can give that data a\nname inside the function arguments. This name, technically, could be anything. However, since React’s",
		"<p>On his farm, he had some {props.animals[0]}.</p>\n<p>On his farm, he had some {props.animals[1]}.</p>\n<p>On his farm, he had some {props.animals[2]}.</p>\n</div>\n)\n}\nAs in all JavaScript functions, if data is passed into a function component, you can give that data a\nname inside the function arguments. This name, technically, could be anything. However, since React’s\nclass‑ based components accept passed data using this.props, it’s standard practice and smart to use\nthe name props in function components as well.\nNotice that when you use props inside the return statement, you have to enclose them in curly\nbraces. You can use props elsewhere inside a component as well, as shown in the slightly improved\nversion of the Farm component shown in Listing 4‑7.\nLISTING 4- 7: An improved version of the Farm component\nexport default function Farm(props){\nlet onHisFarm = [];\nif(props.animals){\nonHisFarm = props.animals.map((animal,index)=>\n<p key={index}>On his farm he had some {animal}.</p>);\n}",
		"braces. You can use props elsewhere inside a component as well, as shown in the slightly improved\nversion of the Farm component shown in Listing 4‑7.\nLISTING 4- 7: An improved version of the Farm component\nexport default function Farm(props){\nlet onHisFarm = [];\nif(props.animals){\nonHisFarm = props.animals.map((animal,index)=>\n<p key={index}>On his farm he had some {animal}.</p>);\n}\nreturn (\n<>\n<p>{props.farmer} had a farm.</p>\n{onHisFarm}\n</>\n)\n}\nJAVASCRIPT LESSON: USING ARRAY.MAP()\nJavaScript’s Array.map function creates a new array using the result of applying a\nfunction to every element in an existing array. The map function is commonly used in\nReact to build lists of React elements or strings from arrays.\nThe syntax of Array.map is as follows:\narray.map(function(currentValue, index, arr),thisValue)\nTake a closer look at the details:\n➤➤ The array is any JavaScript array. The function passed into the map function\nwill run once for every element in the array.\ncontinues",
		"React to build lists of React elements or strings from arrays.\nThe syntax of Array.map is as follows:\narray.map(function(currentValue, index, arr),thisValue)\nTake a closer look at the details:\n➤➤ The array is any JavaScript array. The function passed into the map function\nwill run once for every element in the array.\ncontinues\n54 ❘ CHAPTER 4 All About Components\n(continued)\n➤➤ The currentValue is the value passed into the function and will change with\nevery iteration through the array.\n➤➤ The index parameter is a number representing the current value’s position in\nthe array.\n➤➤ The arr parameter is the array object that the currentValue belongs to.\n➤➤ The thisValue parameter is a value to be used as the “this” value inside\nthe function.\nThe only required parameter is currentValue. It is also what you will most com‑\nmonly see in real‑ world React applications. Here’s how you can use Array.map() to\nmake a series of list items from an array:",
		"the array.\n➤➤ The arr parameter is the array object that the currentValue belongs to.\n➤➤ The thisValue parameter is a value to be used as the “this” value inside\nthe function.\nThe only required parameter is currentValue. It is also what you will most com‑\nmonly see in real‑ world React applications. Here’s how you can use Array.map() to\nmake a series of list items from an array:\nconst bulletedList = listItems.map(function(currentItem){\nreturn <li>{currentItem}</li>\n}\nFor performance reasons, React requires each item in a list of JSX elements (such as\none built from an array) to have a unique key attribute. One way to give each ele‑\nment a unique key is to use the index parameter, like this:\nconst bulletedList = listItems.map(function(currentItem,index){\nreturn <li key={index}>{currentItem}</li>\n}\nStandard HTML Attributes\nAs you saw in Chapter 3, React’s HTML components support most of the standard HTML attributes,",
		"one built from an array) to have a unique key attribute. One way to give each ele‑\nment a unique key is to use the index parameter, like this:\nconst bulletedList = listItems.map(function(currentItem,index){\nreturn <li key={index}>{currentItem}</li>\n}\nStandard HTML Attributes\nAs you saw in Chapter 3, React’s HTML components support most of the standard HTML attributes,\nbut with a couple of important differences, which I’ll reiterate and expand upon here.\nAttributes Use camelCase\nWhereas HTML5 attributes use all lowercase letters, and a few of them use dashes between multiple\nwords (such as the accept- charset attribute), all attributes in React’s HTML components use capi‑\ntal letters for words in the attribute after the first one. This type of capitalization is commonly called\ncamelCase.\nFor example, the HTML tabindex attribute is represented by tabIndex in React and onclick is\nrepresented by onClick.\nTwo Attributes Are Renamed",
		"words (such as the accept- charset attribute), all attributes in React’s HTML components use capi‑\ntal letters for words in the attribute after the first one. This type of capitalization is commonly called\ncamelCase.\nFor example, the HTML tabindex attribute is represented by tabIndex in React and onclick is\nrepresented by onClick.\nTwo Attributes Are Renamed\nIn a couple of cases, React attributes for built‑ in elements have different names than HTML attrib‑\nutes. The reason for this is to avoid potential clashes with reserved words in JavaScript. The attributes\nthat are different in React are:\n➤➤ class in HTML is className in React.\n➤➤ for in HTML is htmlFor in React.\nBuilt- in Components ❘ 55\nReact Adds Several Attributes\nSeveral attributes that are available for React’s built‑ in HTML components don’t exist in HTML.\nChances are good that you’ll never need to use any of these special attributes, but I’m including them\nhere for completeness. These are:",
		"that are different in React are:\n➤➤ class in HTML is className in React.\n➤➤ for in HTML is htmlFor in React.\nBuilt- in Components ❘ 55\nReact Adds Several Attributes\nSeveral attributes that are available for React’s built‑ in HTML components don’t exist in HTML.\nChances are good that you’ll never need to use any of these special attributes, but I’m including them\nhere for completeness. These are:\n➤➤ dangerouslySetInnerHTML, which allows you to set the innerHTML property of an\nelement directly from React. As you can tell by the name of the attribute, this is not a\nrecommended practice.\n➤➤ suppressContentEditableWarning, which suppresses a warning that React will give you if\nyou use the contentEditable attribute on an element that has children.\n➤➤ suppressHydrationWarning. No, it’s not a way to tell React to stop nagging you to drink\nmore water. This attribute will suppress a warning that React gives you when content gener‑",
		"recommended practice.\n➤➤ suppressContentEditableWarning, which suppresses a warning that React will give you if\nyou use the contentEditable attribute on an element that has children.\n➤➤ suppressHydrationWarning. No, it’s not a way to tell React to stop nagging you to drink\nmore water. This attribute will suppress a warning that React gives you when content gener‑\nated by server‑ side React and client‑ side React produce different content.\nSome React Attributes Behave Differently\nSeveral attributes behave differently in React than they do in standard HTML:\n➤➤ checked and defaultChecked. The checked attribute is used to dynamically set and unset\nthe checked status of a radio button or checkbox. The defaultChecked attribute sets\nwhether a radio button or checkbox is checked when the component is first mounted in\nthe browser.\n➤➤ selected. In HTML, when you want to make an option in a dropdown be the currently",
		"➤➤ checked and defaultChecked. The checked attribute is used to dynamically set and unset\nthe checked status of a radio button or checkbox. The defaultChecked attribute sets\nwhether a radio button or checkbox is checked when the component is first mounted in\nthe browser.\n➤➤ selected. In HTML, when you want to make an option in a dropdown be the currently\nselected option, you use the selected attribute. In React, you set the value attribute of the\ncontaining select element instead.\n➤➤ style. React’s style attribute accepts a JavaScript object containing style properties and\nvalues, rather than CSS, which is how the style attribute in HTML works.\nReact Supports Many HTML Attributes\nThe following list contains the standard HTML attributes supported by React’s built‑ in HTML\ncomponents:\naccept acceptCharset accessKey action allowFullScreen allowTransparency alt async\nautoComplete autoFocus autoPlay capture cellPadding cellSpacing charset challenge",
		"values, rather than CSS, which is how the style attribute in HTML works.\nReact Supports Many HTML Attributes\nThe following list contains the standard HTML attributes supported by React’s built‑ in HTML\ncomponents:\naccept acceptCharset accessKey action allowFullScreen allowTransparency alt async\nautoComplete autoFocus autoPlay capture cellPadding cellSpacing charset challenge\nchecked classID className cols colSpan content contentEditable contextMenu\ncontrols coords crossOrigin data dateTime defer dir disabled download draggable\nencType form formAction formEncType formMethod formNoValidate formTarget frame-\nborder headers height hidden high href hrefLang htmlFor httpEquiv icon id\ninputMode keyParams keyType label lang list loop low manifest marginHeight\nmarginWidth max maxLength media mediaGroup method min minLength multiple muted\nname noValidate open optimum pattern placeholder poster preload radioGroup rea-\ndOnly rel required role rows rowSpan sandbox scope scoped scrolling seamless",
		"border headers height hidden high href hrefLang htmlFor httpEquiv icon id\ninputMode keyParams keyType label lang list loop low manifest marginHeight\nmarginWidth max maxLength media mediaGroup method min minLength multiple muted\nname noValidate open optimum pattern placeholder poster preload radioGroup rea-\ndOnly rel required role rows rowSpan sandbox scope scoped scrolling seamless\nselected shape size sizes span spellCheck src srcDoc srcSet start step style\nsummary tabIndex target title type useMap value width wmode wrap\n56 ❘ CHAPTER 4 All About Components\nNon-Standard Attributes\nIn addition to the standard HTML attributes, React also supports several non‑ standard attributes\nthat have specific purposes in some browsers and meta‑ data languages, including:\n➤➤ autoCapitalize and autoCorrect, which are supported by Mobile Safari.\n➤➤ property is used for Open Graph meta tags.\n➤➤ itemProp, itemScope, itemType, itemRef, and itemID for HTML5 microdata.\n➤➤ unselectable for Internet Explorer.",
		"that have specific purposes in some browsers and meta‑ data languages, including:\n➤➤ autoCapitalize and autoCorrect, which are supported by Mobile Safari.\n➤➤ property is used for Open Graph meta tags.\n➤➤ itemProp, itemScope, itemType, itemRef, and itemID for HTML5 microdata.\n➤➤ unselectable for Internet Explorer.\n➤➤ results and autoSave are attributes supported by browsers built using the WebKit or Blink\nbrowser engines (including Chrome, Safari, Opera, and Edge).\nCustom Attributes\nAs of version 16, React will pass any custom attributes that you use with HTML components\nthrough to the generated HTML, provided that the custom attributes are written using only lower‑\ncase letters.\nUSER- DEFINED COMPONENTS\nHave you ever thought that it would be awesome if you weren’t just limited to the standard set of\nHTML elements? What if you could, for example, make an element called PrintPageButton that\nyou could use anywhere that you need to display a functional print button in your app? Or what",
		"case letters.\nUSER- DEFINED COMPONENTS\nHave you ever thought that it would be awesome if you weren’t just limited to the standard set of\nHTML elements? What if you could, for example, make an element called PrintPageButton that\nyou could use anywhere that you need to display a functional print button in your app? Or what\nif you had an element called Tax that would calculate and display the taxes in your online store’s\nshopping cart?\nEssentially, this is what React components enable through custom components. Custom components,\nalso known as user‑ defined components, are the components that you make by putting together built‑\nin components and other custom components.\nThe possibilities for custom components are infinite. Even better, if you design your components to be\nreusable, you can reuse components not only inside of a single React application, but across any num‑\nber of React applications. There are even hundreds of open source libraries of custom components",
		"in components and other custom components.\nThe possibilities for custom components are infinite. Even better, if you design your components to be\nreusable, you can reuse components not only inside of a single React application, but across any num‑\nber of React applications. There are even hundreds of open source libraries of custom components\ncreated by other developers that you can repurpose inside your own apps.\nWriting useful and reusable React components can sometimes require considerable work up front, but\nthe benefits of writing them the right way are that you can reduce work for yourself overall and make\napps that are sturdier and more dependable.\nIn the rest of this chapter, you’ll learn about writing custom components and putting them together to\nbuild robust user interfaces.\nTYPES OF COMPONENTS\nReact components can be written in two different ways: by using JavaScript classes or by using JavaS‑\ncript functions.\nTypes of Components ❘ 57",
		"apps that are sturdier and more dependable.\nIn the rest of this chapter, you’ll learn about writing custom components and putting them together to\nbuild robust user interfaces.\nTYPES OF COMPONENTS\nReact components can be written in two different ways: by using JavaScript classes or by using JavaS‑\ncript functions.\nTypes of Components ❘ 57\nIn most cases, making a component with a function is much simpler and requires less code and less\ndetailed knowledge of the inner workings of JavaScript than the class method. However, both meth‑\nods are widely used, and it’s important to have a good understanding of how to write components\nusing classes as well as using functions.\nNOTE Having a knowledge of JavaScript classes and class components is\nnecessary in order for you to get a complete picture of how React works, but\nit is possible to write complete React applications without using classes. An\nexplanation of classes can get pretty dense and theoretical, but don’t let it",
		"using classes as well as using functions.\nNOTE Having a knowledge of JavaScript classes and class components is\nnecessary in order for you to get a complete picture of how React works, but\nit is possible to write complete React applications without using classes. An\nexplanation of classes can get pretty dense and theoretical, but don’t let it\nbog you down. If this chapter’s “Class Components” section confuses you, feel\nfree to skip ahead or skim it for now and go straight to the “Function Compo-\nnents” section, which is what we’ll be working with for most of the rest of the\nbook. You can come back and learn all about class components and JavaScript\nclasses when you need to.\nClass Components\nClasses were new to JavaScript when React was first released. The early versions of the React library\nhad a function called React.createClass, which was the only way to create components. To use\nReact.createClass, you could pass an object containing the component’s properties as a parameter",
		"classes when you need to.\nClass Components\nClasses were new to JavaScript when React was first released. The early versions of the React library\nhad a function called React.createClass, which was the only way to create components. To use\nReact.createClass, you could pass an object containing the component’s properties as a parameter\nto the function and the result would be a React component.\nIn one of the bigger changes made to React in its lifetime so far, React.createClass was deprecated\nas of React 15.5.\nYou can still use createClass if you need to by installing the create- react- class package. List‑\ning 4‑8 shows the code for a component created using createClass.\nLISTING 4- 8: Creating a component with React.createClass\nimport React from 'react';\nimport createClass from 'create-r eact- class';\nconst UserProfile = createClass({\nrender() {\nreturn (\n<h1>User Profile</h1>\n);\n}\n});\nexport default UserProfile;",
		"ing 4‑8 shows the code for a component created using createClass.\nLISTING 4- 8: Creating a component with React.createClass\nimport React from 'react';\nimport createClass from 'create-r eact- class';\nconst UserProfile = createClass({\nrender() {\nreturn (\n<h1>User Profile</h1>\n);\n}\n});\nexport default UserProfile;\nBeginning with React 15.5, the preferred way of writing classes was by extending the React\n.Component base class directly.\n58 ❘ CHAPTER 4 All About Components\nListing 4‑9 shows how to write the component from Listing 4‑8 using a class that extends\nReact.Component.\nLISTING 4- 9: Creating a component using a class\nimport React from 'react';\nclass UserProfile extends React.Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n<h1>User Profile</h1>\n);\n}\n};\nexport default UserProfile;\nJAVASCRIPT LESSON: CLASSES\nClasses in JavaScript resemble classes in traditional object‑ oriented languages, such\nas Java or C, but with some fundamental differences.",
		"import React from 'react';\nclass UserProfile extends React.Component {\nconstructor(props) {\nsuper(props);\n}\nrender() {\nreturn (\n<h1>User Profile</h1>\n);\n}\n};\nexport default UserProfile;\nJAVASCRIPT LESSON: CLASSES\nClasses in JavaScript resemble classes in traditional object‑ oriented languages, such\nas Java or C, but with some fundamental differences.\nTraditional classes are blueprints for creating objects. In JavaScript, classes are\nobjects themselves that serve as a template for objects. In other words, JavaScript has\nprototypes, not true classes.\nYou may see the term “syntactic sugar” used to describe classes and some other new\nfeatures of JavaScript that were introduced in ES2015 and more recent versions of\nJavaScript. Syntactic sugar refers to a simplified or abstracted way of writing some‑\nthing that makes it easier to write or to understand, but doesn’t actually do anything\nthat you couldn’t previously do. It helps the medicine go down, you might say.",
		"features of JavaScript that were introduced in ES2015 and more recent versions of\nJavaScript. Syntactic sugar refers to a simplified or abstracted way of writing some‑\nthing that makes it easier to write or to understand, but doesn’t actually do anything\nthat you couldn’t previously do. It helps the medicine go down, you might say.\nThe introduction of the class syntax in JavaScript didn’t create any new functional‑\nity. Classes merely expose existing functionality in JavaScript using a different syntax\nthat’s more familiar to developers who have worked with class‑ based languages\n(such as Java or C).\nMore specifically, the class syntax in JavaScript is just a new way to use function\nconstructors and prototypal inheritance. So, to understand classes, you first need to\nunderstand the basics of function constructors and prototypal inheritance.\nTypes of Components ❘ 59\nPrototypal Inheritance\nJavaScript objects are collections of properties. JavaScript has several ways to cre‑\nate objects:",
		"More specifically, the class syntax in JavaScript is just a new way to use function\nconstructors and prototypal inheritance. So, to understand classes, you first need to\nunderstand the basics of function constructors and prototypal inheritance.\nTypes of Components ❘ 59\nPrototypal Inheritance\nJavaScript objects are collections of properties. JavaScript has several ways to cre‑\nate objects:\n➤➤ By using Object Literal notation.\n➤➤ By using the Object.create method.\n➤➤ By using the new operator.\nUsing the new Operator\nOne way to use the new operator is to write a constructor function and then invoke\nthe function with the new keyword.\nTo see how it works, open your browser’s JavaScript console (by pressing\nCmd+Shift+j (on Windows) or Cmd+Option‑j (on Mac) and enter the fol‑\nlowing code:\nlet a = function () {\nthis.x = 10;\nthis.y = 8;\n};\nlet b = new a();\nThe result of creating the b object will be an object with two properties, x and y.\nType the following two statements to confirm this:",
		"the function with the new keyword.\nTo see how it works, open your browser’s JavaScript console (by pressing\nCmd+Shift+j (on Windows) or Cmd+Option‑j (on Mac) and enter the fol‑\nlowing code:\nlet a = function () {\nthis.x = 10;\nthis.y = 8;\n};\nlet b = new a();\nThe result of creating the b object will be an object with two properties, x and y.\nType the following two statements to confirm this:\nb.x; // 10\nb.y // 8\nThese properties are called the object’s “own” properties, and a is the proto‑\ntype for b.\nModifying and Using the Prototype\nYou can add new properties to an object’s prototype, like this:\na.prototype.z = 100;\nIn the preceding statement, we added a new property, z, to the prototype of b. In\nprototypal inheritance, every object inherits properties and methods from its proto‑\ntype object.\nHere’s where things get interesting. When you try to access the property z on the b\nobject, JavaScript will look first for an “own” property of b named z. If it doesn’t",
		"a.prototype.z = 100;\nIn the preceding statement, we added a new property, z, to the prototype of b. In\nprototypal inheritance, every object inherits properties and methods from its proto‑\ntype object.\nHere’s where things get interesting. When you try to access the property z on the b\nobject, JavaScript will look first for an “own” property of b named z. If it doesn’t\nfind one, it will look at the object’s prototype. If it doesn’t find it there, it will look\nat the prototype’s prototype. This will happen all the way up to the built‑ in Object\nobject, which is the prototype for every JavaScript object.\nTry it out!\nb.z; // 100\ncontinues\n60 ❘ CHAPTER 4 All About Components\n(continued)\nMethods Are Properties Too\nA property of an object can have a function as its value. A property with a function\nvalue is what we refer to as a “method” in JavaScript.\nYou can use the this keyword in methods, and it refers to the inheriting object, not\nthe prototype.",
		"Try it out!\nb.z; // 100\ncontinues\n60 ❘ CHAPTER 4 All About Components\n(continued)\nMethods Are Properties Too\nA property of an object can have a function as its value. A property with a function\nvalue is what we refer to as a “method” in JavaScript.\nYou can use the this keyword in methods, and it refers to the inheriting object, not\nthe prototype.\nFor example, add a method called sum() to the prototype object:\na.prototype.sum = function() { return this.x + this.y };\nNow, change the values of x and y on the b object:\nb.x = 1000\nb.y = 2000\nAnd then invoke the sum function on the b object:\nb.sum() // 3000\nEven though b doesn’t have its own function called sum, JavaScript runs the sum\nfunction on the prototype but uses the this values from b.\nSummary\nTo sum it all up, every object that you create in JavaScript is a copy of another\nobject, which is called its prototype. Objects inherit properties and values from their",
		"b.y = 2000\nAnd then invoke the sum function on the b object:\nb.sum() // 3000\nEven though b doesn’t have its own function called sum, JavaScript runs the sum\nfunction on the prototype but uses the this values from b.\nSummary\nTo sum it all up, every object that you create in JavaScript is a copy of another\nobject, which is called its prototype. Objects inherit properties and values from their\nprototype and have a link back to their prototype. If a property is referenced on\nan object and that object doesn’t contain that property, JavaScript will look at the\nobject’s prototype and so on up the chain of prototypes until it gets to the built‑\nin Object.\nNow that we’ve covered prototypal inheritance, let’s get back to talking about\nclasses and the most commonly used features of classes used in React.js.\nUnderstanding JavaScript Classes\nTo define a class, you can use either a class declaration or a class expression.\nClass Declarations",
		"object’s prototype and so on up the chain of prototypes until it gets to the built‑\nin Object.\nNow that we’ve covered prototypal inheritance, let’s get back to talking about\nclasses and the most commonly used features of classes used in React.js.\nUnderstanding JavaScript Classes\nTo define a class, you can use either a class declaration or a class expression.\nClass Declarations\nA class declaration starts with the class keyword followed by the name of the class.\nThe following is an example of a class declaration:\nclass Pizza (\nconstructor(toppings,size) {\nthis.toppings = toppings;\nthis.size = size;\n}\n}\nTypes of Components ❘ 61\nClass declarations are similar in structure to function declarations. Here’s an example\nof a function declaration:\nfunction Pizza(toppings,size) {\nthis.toppings = toppings;\nthis.size = size;\n}\nAn important difference between class declarations and function declarations, how‑\never, is that function declarations are hoisted. Function hoisting means that you can",
		"}\n}\nTypes of Components ❘ 61\nClass declarations are similar in structure to function declarations. Here’s an example\nof a function declaration:\nfunction Pizza(toppings,size) {\nthis.toppings = toppings;\nthis.size = size;\n}\nAn important difference between class declarations and function declarations, how‑\never, is that function declarations are hoisted. Function hoisting means that you can\nreference a function created using a function declaration anywhere in a script, even\nbefore the function declaration actually appears in the file. For example, the follow‑\ning code will function just fine even though we invoke the Pizza() function before\nit appears in the order of the code:\nlet MyPizza = new Pizza(['sausage','cheese'],'large');\nfunction Pizza(toppings,size) {\nthis.toppings = toppings;\nthis.size = size;\n}\nHowever, the class version of this code will produce an error, because the class\nnamed Pizza doesn’t exist when this code tries to use it:",
		"ing code will function just fine even though we invoke the Pizza() function before\nit appears in the order of the code:\nlet MyPizza = new Pizza(['sausage','cheese'],'large');\nfunction Pizza(toppings,size) {\nthis.toppings = toppings;\nthis.size = size;\n}\nHowever, the class version of this code will produce an error, because the class\nnamed Pizza doesn’t exist when this code tries to use it:\nlet MyPizza = new Pizza(['sausage','cheese'],'large');\nclass Pizza {\nconstructor(toppings,size) {\nthis.toppings = toppings;\nthis.size = size;\n}\n}\nClass Expression\nTo create a class using a class expression, you use either a named or unnamed class\nand assign it to a variable. Here’s an example of a class expression that uses an\nunnamed class:\nlet Pizza = class {\nconstructor(toppings, size) {\nthis.toppings = toppings;\nthis.size = size;\n}\n};\nHere’s an example of a class expression that uses a named class:\nlet Pizza = class MyPizza {\nconstructor(toppings,size) {\ncontinues",
		"and assign it to a variable. Here’s an example of a class expression that uses an\nunnamed class:\nlet Pizza = class {\nconstructor(toppings, size) {\nthis.toppings = toppings;\nthis.size = size;\n}\n};\nHere’s an example of a class expression that uses a named class:\nlet Pizza = class MyPizza {\nconstructor(toppings,size) {\ncontinues\n62 ❘ CHAPTER 4 All About Components\n(continued)\nthis.toppings = toppings;\nthis.size = size;\n}\n};\nNote that when you use a class expression with a named class, the name you specify\nafter the class keyword becomes the value of the name property of the class:\nconsole.log(Pizza.name); // Output: \"MyPizza\"\nUsing a named class expression is not a way of extending an existing class. It’s just a\nconvenient way to give a class instance a name property.\nClass Body and the Constructor Method\nThe body of a class, like the body of a function, is the part between the curly braces.\nInside the class body, you can define class members, such as its methods, fields, and",
		"Using a named class expression is not a way of extending an existing class. It’s just a\nconvenient way to give a class instance a name property.\nClass Body and the Constructor Method\nThe body of a class, like the body of a function, is the part between the curly braces.\nInside the class body, you can define class members, such as its methods, fields, and\nconstructor.\nThe constructor method of a class can be used to initialize objects created using\nthe class. It isn’t required that you include a constructor in classes you create. If\nyou don’t include it, your class will have a default constructor, which is just an\nempty function.\nWhen you instantiate a class, you can optionally pass in arguments and these argu‑\nments become the arguments to the constructor method. Inside the constructor, you\ncan create a property in the new instance by assigning these values to this, which\nrepresents the new object.\nFor example, the following Pizza class’s constructor takes three parameters:",
		"empty function.\nWhen you instantiate a class, you can optionally pass in arguments and these argu‑\nments become the arguments to the constructor method. Inside the constructor, you\ncan create a property in the new instance by assigning these values to this, which\nrepresents the new object.\nFor example, the following Pizza class’s constructor takes three parameters:\nclass Pizza {\nconstructor(sauce,cheese,toppings){\nthis.sauce = sauce;\nthis.cheese = cheese;\nthis.toppings = toppings;\n}\n}\nTo create an instance of Pizza, you use the new keyword and pass in arguments,\nlike this:\nlet myPizza = new Pizza('tomato','mozzarella',['basil','tomato',\n'garlic']);\nInside the myPizza object, sauce is equal to tomato, cheese is equal to\nmozzarella, and toppings is equal to the array of toppings that was passed in.\nWhen you assign each value to a new property of this, you create an instance prop‑\nerty that can be accessed inside of the instance using this.[property] and outside",
		"let myPizza = new Pizza('tomato','mozzarella',['basil','tomato',\n'garlic']);\nInside the myPizza object, sauce is equal to tomato, cheese is equal to\nmozzarella, and toppings is equal to the array of toppings that was passed in.\nWhen you assign each value to a new property of this, you create an instance prop‑\nerty that can be accessed inside of the instance using this.[property] and outside\nthe instance by using the instance name followed by a period and the property name.\nTypes of Components ❘ 63\nInside myPizza:\nthis.cheese;\nOutside myPizza:\nmyPizza.cheese;\nCreating Subclasses with extends\nYou can use the extends keyword in a class declaration or a class expression to cre‑\nate a child of any existing class. If the new class doesn’t have a constructor, the prop‑\nerties it inherits from the parent will be automatically accessible in the new instance.\nFor example, here’s a class that we’ll use as the parent for our new child class:\nclass Animal {\nconstructor(numberOfLegs,weight){",
		"You can use the extends keyword in a class declaration or a class expression to cre‑\nate a child of any existing class. If the new class doesn’t have a constructor, the prop‑\nerties it inherits from the parent will be automatically accessible in the new instance.\nFor example, here’s a class that we’ll use as the parent for our new child class:\nclass Animal {\nconstructor(numberOfLegs,weight){\nthis.numberOfLegs = numberOfLegs;\nthis.weight = weight;\n}\n}\nYou can use extends to create a subclass, like this:\nclass Insect extends Animal {\n}\nOnce you extend a class, you can define methods in the new subclass that reference\ninherited properties:\nclass Insect extends Animal {\ncountLegs() {\nconsole.log(`This insect has ${this.numberOfLegs} legs.`);\n}\n}\nIf you do include a constructor method in the subclass, you must specifically call the\nsuper method from within the constructor before you can use the this keyword, as\nin this example:\nclass Insect extends Animal {",
		"inherited properties:\nclass Insect extends Animal {\ncountLegs() {\nconsole.log(`This insect has ${this.numberOfLegs} legs.`);\n}\n}\nIf you do include a constructor method in the subclass, you must specifically call the\nsuper method from within the constructor before you can use the this keyword, as\nin this example:\nclass Insect extends Animal {\nconstructor(numberOfLegs,weight,name) {\nsuper(numberOfLegs,weight);\nthis.name = name;\n}\ncountLegs() {\nconsole.log(`The ${this.name} has ${this.numberOfLegs}\nlegs.`);\n}\n}\nIn the preceding example, the constructor of Insect calls the constructor of Animal\nand passes in the arguments that were used to instantiate the Insect class, mak‑\ning the properties defined in Animal’s constructor available in Insect even though\nthey’re not specifically defined inside of Insect’s constructor.\ncontinues\n64 ❘ CHAPTER 4 All About Components\n(continued)\nFor example, let’s take the numberOfLegs out of the Animal class and make it",
		"and passes in the arguments that were used to instantiate the Insect class, mak‑\ning the properties defined in Animal’s constructor available in Insect even though\nthey’re not specifically defined inside of Insect’s constructor.\ncontinues\n64 ❘ CHAPTER 4 All About Components\n(continued)\nFor example, let’s take the numberOfLegs out of the Animal class and make it\nspecific to the Insect subclass. We’ll leave weight as a property of Animal, since all\nanimals have a weight:\nclass Animal {\nconstructor(weight){\nthis.weight = weight;\n}\n}\nclass Insect extends Animal {\nconstructor(numberOfLegs,weight) {\nsuper(weight);\nthis.numberOfLegs = numberOfLegs;\n}\n}\nWith these two classes defined, we can now create an instance of the Insect class Fly:\nlet Fly = new Insect(6,.045);\nNow, the Fly instance can reference its own weight and numberOfLegs properties\ninternally using the this keyword, and these properties can be referenced externally\nusing the name of the instance:\nconsole.log(Fly.weight); // .045",
		"super(weight);\nthis.numberOfLegs = numberOfLegs;\n}\n}\nWith these two classes defined, we can now create an instance of the Insect class Fly:\nlet Fly = new Insect(6,.045);\nNow, the Fly instance can reference its own weight and numberOfLegs properties\ninternally using the this keyword, and these properties can be referenced externally\nusing the name of the instance:\nconsole.log(Fly.weight); // .045\nUnderstanding this\nOne of the really interesting (some would say confusing) things about JavaScript is\nthat it sometimes looks like an object‑o riented programming language, but it’s actu‑\nally a functional programming language.\nIn functional programming, programs are created by applying and composing func‑\ntions, and functions are “first‑ class citizens.” What this means is that JavaScript\nfunctions are treated like any other variable. They can be passed as values into other\nfunctions, they can return other functions, and they can be assigned as a value to\na variable.",
		"ally a functional programming language.\nIn functional programming, programs are created by applying and composing func‑\ntions, and functions are “first‑ class citizens.” What this means is that JavaScript\nfunctions are treated like any other variable. They can be passed as values into other\nfunctions, they can return other functions, and they can be assigned as a value to\na variable.\nBecause functions are so versatile, you can define functions as part of a class, or you\ncan pass functions as arguments into a class to be used by that class.\nThe this keyword plays a vital role in the ability of functions to be used inside of\nand shared between objects.\nHaving a good understanding of what the this keyword does and how to use it to\nbind functions to objects is important to being able to write React code with classes.\nthis Doesn’t Have a Value until Invocation\nFunction (or method) invocation in JavaScript happens when an expression that",
		"The this keyword plays a vital role in the ability of functions to be used inside of\nand shared between objects.\nHaving a good understanding of what the this keyword does and how to use it to\nbind functions to objects is important to being able to write React code with classes.\nthis Doesn’t Have a Value until Invocation\nFunction (or method) invocation in JavaScript happens when an expression that\nevaluates to a function is followed by open and close parentheses, optionally with\nTypes of Components ❘ 65\na comma‑ separated list of arguments between them. For example, here’s a function,\nfollowed by an invocation of the function:\n// function definition\nfunction sum(a,b){\nreturn a+b;\n}\n// function invocation\nlet mySum = sum(2,5);\nconsole.log(mySum); // 7\nWhat Is this in a Function?\nBy default, when you use the this keyword inside a function and then invoke\nthat function, this gets set to the global object, which in a web browser is the\nwindow object:\nfunction sum(a,b){",
		"followed by an invocation of the function:\n// function definition\nfunction sum(a,b){\nreturn a+b;\n}\n// function invocation\nlet mySum = sum(2,5);\nconsole.log(mySum); // 7\nWhat Is this in a Function?\nBy default, when you use the this keyword inside a function and then invoke\nthat function, this gets set to the global object, which in a web browser is the\nwindow object:\nfunction sum(a,b){\nthis.secretNumber = 100;\nreturn a+b;\n}\nlet mySum = sum(2,5);\nconsole.log(window.secretNumber); // 100\nWhat Is this in “strict” Mode?\nIf your JavaScript code is running in strict mode, however, this will be set to\nundefined instead of the global object:\nfunction getSecretNumber(){\n'use strict';\nthis.secretNumber = 100;\nreturn this.secretNumber;\n}\nconsole.log(getSecretNumber()); // error: cannot set property\n'secretNumber' of undefined.\nThe reason for the different behavior of this in strict mode is that use of global vari‑",
		"If your JavaScript code is running in strict mode, however, this will be set to\nundefined instead of the global object:\nfunction getSecretNumber(){\n'use strict';\nthis.secretNumber = 100;\nreturn this.secretNumber;\n}\nconsole.log(getSecretNumber()); // error: cannot set property\n'secretNumber' of undefined.\nThe reason for the different behavior of this in strict mode is that use of global vari‑\nables should be discouraged because when every function has access to a variable, it\nmakes it difficult to know which functions make use of or modify the variable, and\nchaos ensues.\nMore often than not, when you add properties to the global object, it’s a mistake.\nStrict mode makes this mistake have immediate consequences, rather than letting\nyour code appear to work correctly while containing potentially dangerous global\nvariables.\ncontinues\n66 ❘ CHAPTER 4 All About Components\n(continued)\nWhat Is this in Methods?\nRemember that a method is a function that’s stored in a property of an object.",
		"Strict mode makes this mistake have immediate consequences, rather than letting\nyour code appear to work correctly while containing potentially dangerous global\nvariables.\ncontinues\n66 ❘ CHAPTER 4 All About Components\n(continued)\nWhat Is this in Methods?\nRemember that a method is a function that’s stored in a property of an object.\nMethod invocation is when you access a method followed by parentheses (with\noptional arguments between the parentheses).\nIn the following code, the author object has a method named write, and we can\ninvoke it using author.write:\nconst author = {\nwrite: function(){\nreturn 'Writing!';\n}\n}\nlet status = author.write();\nJavaScript also allows you to write methods using “method” syntax. In method syn‑\ntax, you can eliminate the colon and the function keyword. So, the preceding object\ndeclaration can also be written like this:\nconst author = {\nwrite() {\nreturn 'Writing!';\n}\n}\nMore often than not, this shorter syntax is what you’ll see used in React\ncomponents.",
		"return 'Writing!';\n}\n}\nlet status = author.write();\nJavaScript also allows you to write methods using “method” syntax. In method syn‑\ntax, you can eliminate the colon and the function keyword. So, the preceding object\ndeclaration can also be written like this:\nconst author = {\nwrite() {\nreturn 'Writing!';\n}\n}\nMore often than not, this shorter syntax is what you’ll see used in React\ncomponents.\nIn method invocation, this is the object that owns the method:\nconst author = {\ntotalWords: 0,\nwrite: function(words) {\nthis.totalWords += words;\nreturn this.totalWords;\n}\n}\nlet totalWords = author.write(500);\nThis is all well and good, but remember it’s often the case that you’ll want to use a\nfunction with different objects, as in this case:\nconst author1 = {\ntotalWords: 0\n}\nconst author2 = {\ntotalWords: 0\n}\nTypes of Components ❘ 67\nconst write = function(words){\nthis.totalWords += words;\nreturn this.totalWords;\n}\nIf you invoke the write function now, this.totalWords will be undefined (in",
		"This is all well and good, but remember it’s often the case that you’ll want to use a\nfunction with different objects, as in this case:\nconst author1 = {\ntotalWords: 0\n}\nconst author2 = {\ntotalWords: 0\n}\nTypes of Components ❘ 67\nconst write = function(words){\nthis.totalWords += words;\nreturn this.totalWords;\n}\nIf you invoke the write function now, this.totalWords will be undefined (in\nstrict mode) or will try to access window.totalWords (if not in strict mode). To\nassociate the totalWords function with an object, you need to bind it to the object\nby using call, apply, or bind.\nFunction Binding with call\nThe JavaScript call function binds a function with an object and invokes the func‑\ntion. It accepts the name of the object you want to bind the function to, followed by\na list of individual arguments to pass into the function. To invoke the write function\nwithin the context of the author1 object and pass in the number 500, you can use\nthis statement:\nwrite.call(author1,500);",
		"The JavaScript call function binds a function with an object and invokes the func‑\ntion. It accepts the name of the object you want to bind the function to, followed by\na list of individual arguments to pass into the function. To invoke the write function\nwithin the context of the author1 object and pass in the number 500, you can use\nthis statement:\nwrite.call(author1,500);\nFunction Binding with apply\nThe apply function also binds a function with an object and invokes the function.\nIt accepts the name of the object you want to bind the function to, followed by an\narray that will be passed into the function. To invoke the write function within the\ncontext of the author1 object and pass in an array you can use this statement:\nwrite.apply(author1,[500]);\nFunction Binding with bind\nThe bind function works the same as call, but instead of invoking a function, it\nreturns a new function that’s bound to the specified object. To create a new function",
		"array that will be passed into the function. To invoke the write function within the\ncontext of the author1 object and pass in an array you can use this statement:\nwrite.apply(author1,[500]);\nFunction Binding with bind\nThe bind function works the same as call, but instead of invoking a function, it\nreturns a new function that’s bound to the specified object. To create a new function\nthat will invoke the write function within the context of the author1 object and\npass in 500 each time it’s invoked, you can use this statement:\nlet write500Words = write.bind(author1,500);\nwrite500Words();\nThe second argument to bind is optional. In React, it’s most common to see bind\nused with only the first argument.\nFunction binding is important in React components, because it allows you to define\na function in one component and then pass it as a variable into other components,\nwhile still operating on the component where the function was initially defined.",
		"write500Words();\nThe second argument to bind is optional. In React, it’s most common to see bind\nused with only the first argument.\nFunction binding is important in React components, because it allows you to define\na function in one component and then pass it as a variable into other components,\nwhile still operating on the component where the function was initially defined.\nThis method of passing a bound function to a child component looks like this:\ncontinues\n68 ❘ CHAPTER 4 All About Components\n(continued)\nclass Dog\neat () { this.tummy = “full” }\nthis.eat = this.eat.bind (this) ;\nclass Mouth\neat () ;\nA function that you pass as an argument to another function, to be executed from\nwithin that component, is called a callback function.\nStepping through a React Class Component\nOnce you have an understanding of how prototypal inheritance works in JavaScript, and you know\nthat classes are just another way to use function constructors, creating React components using the",
		"class Mouth\neat () ;\nA function that you pass as an argument to another function, to be executed from\nwithin that component, is called a callback function.\nStepping through a React Class Component\nOnce you have an understanding of how prototypal inheritance works in JavaScript, and you know\nthat classes are just another way to use function constructors, creating React components using the\nclass method is actually quite easy and it becomes a powerful tool in your React toolbox.\nLet’s take a look, piece by piece, at a basic class component.\nReact.Component\nReact.Component is the base class for every class component that you’ll make. It defines a number\nof methods, lifecycle methods, class properties, and instance properties that you can make use of and\nextend in your components.\nImporting React.Component\nBecause a custom component is a subclass of React.Component, any file that defines a class com‑",
		"React.Component\nReact.Component is the base class for every class component that you’ll make. It defines a number\nof methods, lifecycle methods, class properties, and instance properties that you can make use of and\nextend in your components.\nImporting React.Component\nBecause a custom component is a subclass of React.Component, any file that defines a class com‑\nponent (or more than one class component, in the case of a library) must start by importing React.\nYou’ll see two ways that this is typically done: by importing the entire React library, or by importing\nindividual objects from the React library.\nHere’s the import statement for importing the entire React library:\nimport React from 'react';\nThis import is called a “default import.”\nTypes of Components ❘ 69\nYou potentially save a few keystrokes inside your component by using a named import to import the\nComponent class specifically, as shown here:\nimport {Component} from 'react';\nThe Class Header",
		"individual objects from the React library.\nHere’s the import statement for importing the entire React library:\nimport React from 'react';\nThis import is called a “default import.”\nTypes of Components ❘ 69\nYou potentially save a few keystrokes inside your component by using a named import to import the\nComponent class specifically, as shown here:\nimport {Component} from 'react';\nThe Class Header\nIf you import the entire library into your new component module, the first line of your new compo‑\nnent will be as follows (assuming that your component is named MyComponent):\nclass MyComponent extends React.Component{\nIf you import Component using a named import, the header of your new component will look\nlike this:\nclass MyComponent extends Component{\nThe Constructor Function\nNext up is the constructor. If you include a constructor in your class, it will run one time when an\ninstance of the class is created. The constructor is where you will bind event handler functions to the",
		"If you import Component using a named import, the header of your new component will look\nlike this:\nclass MyComponent extends Component{\nThe Constructor Function\nNext up is the constructor. If you include a constructor in your class, it will run one time when an\ninstance of the class is created. The constructor is where you will bind event handler functions to the\ninstance of the class and set up the local state for the instance.\nA typical constructor in a component looks like this:\nconstructor(props) {\nsuper(props);\nthis.state = {\nscore: 0;\nuserInput: ''\n}\nthis.saveUserInput = this.saveUserInput.bind(this);\nthis.updateScore = this.updateScore.bind(this);\n}\nAfter the constructor header and the call to the super function, this constructor has two\npurposes— it initializes the component instance’s state, and it binds event handler methods to the\ncomponent instance.\nInitializing Local State",
		"super(props);\nthis.state = {\nscore: 0;\nuserInput: ''\n}\nthis.saveUserInput = this.saveUserInput.bind(this);\nthis.updateScore = this.updateScore.bind(this);\n}\nAfter the constructor header and the call to the super function, this constructor has two\npurposes— it initializes the component instance’s state, and it binds event handler methods to the\ncomponent instance.\nInitializing Local State\nEach instance of a React component maintains its own state, and the constructor is where you initial‑\nize this state. The state of a component determines whether and when a component should re‑ render.\nState and state management is at the heart of how React works, so I’ll introduce the topic here and\nI’ll go into much more detail about it in Chapter 6. For now, just know that the state of a component\nis stored in an object called state, and every time state changes, React attempts to re‑ render the UI.",
		"State and state management is at the heart of how React works, so I’ll introduce the topic here and\nI’ll go into much more detail about it in Chapter 6. For now, just know that the state of a component\nis stored in an object called state, and every time state changes, React attempts to re‑ render the UI.\nThe other object in a component instance that stores data is called props (which is short for proper‑\nties). This is data that is passed to a component by its parent component in a React component hier‑\narchy. If you’re going to use the props object in the constructor, you need to pass it to the superclass’s\nconstructor when you call super.\n70 ❘ CHAPTER 4 All About Components\nIn a component that makes use of the state object, the basic constructor should now look like this:\nimport {Component} from 'react';\nclass MyComponent extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {};\n}\n...\n}\nexport default MyComponent;\nBinding Event Handlers",
		"constructor when you call super.\n70 ❘ CHAPTER 4 All About Components\nIn a component that makes use of the state object, the basic constructor should now look like this:\nimport {Component} from 'react';\nclass MyComponent extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {};\n}\n...\n}\nexport default MyComponent;\nBinding Event Handlers\nEvent handlers are the functions that run in response to events. Binding makes the this keyword\nwork. By binding an event handler to the component instance, you also make it possible to share the\nfunction with other components while maintaining its link to the state of the instance with which\nit’s bound. The result is that no matter where the event handler is, it always uses and affects the data\nfrom its bound object.\nListing 4‑10 shows what happens when you don’t properly bind your event handler.\nLISTING 4- 10: Not binding your functions results in errors\nimport React from 'react';\nclass Foo extends React.Component{\nconstructor( props ){",
		"it’s bound. The result is that no matter where the event handler is, it always uses and affects the data\nfrom its bound object.\nListing 4‑10 shows what happens when you don’t properly bind your event handler.\nLISTING 4- 10: Not binding your functions results in errors\nimport React from 'react';\nclass Foo extends React.Component{\nconstructor( props ){\nsuper( props );\nthis.message = \"hello\";\n}\nhandleClick(event){\nconsole.log(this.message); // 'this' is undefined\n}\nrender(){\nreturn (\n<button type=\"button\" onClick={this.handleClick}>\nClick Me\n</button>\n);\n}\n}\nexport default Foo;\nWhat’s happening here is that we’re passing this.handleClick into the button component as\na prop. When we do that, it’s passed as a variable and becomes an ordinary function without an\nTypes of Components ❘ 71\nowner object. When the click event happens inside the button component, this falls back to refer‑\nring to the global object, and we get an error because this.message doesn’t exist.",
		"What’s happening here is that we’re passing this.handleClick into the button component as\na prop. When we do that, it’s passed as a variable and becomes an ordinary function without an\nTypes of Components ❘ 71\nowner object. When the click event happens inside the button component, this falls back to refer‑\nring to the global object, and we get an error because this.message doesn’t exist.\nTo solve this problem, you can use the bind function to create a new function that’s bound to the\nFoo class, as shown in Listing 4‑11. Once you do that, you can pass handleClick as a prop to other\ncomponents and it will always run within the context of Foo.\nLISTING 4- 11: Binding a function and using it in another class\nimport React from 'react';\nclass Foo extends React.Component{\nconstructor( props ){\nsuper( props );\nthis.message = \"hello\";\nthis.handleClick = this.handleClick.bind(this);\n}\nhandleClick(event){\nconsole.log(this.message); // 'hello'\n}\nrender(){\nreturn (",
		"components and it will always run within the context of Foo.\nLISTING 4- 11: Binding a function and using it in another class\nimport React from 'react';\nclass Foo extends React.Component{\nconstructor( props ){\nsuper( props );\nthis.message = \"hello\";\nthis.handleClick = this.handleClick.bind(this);\n}\nhandleClick(event){\nconsole.log(this.message); // 'hello'\n}\nrender(){\nreturn (\n<button type=\"button\" onClick={this.handleClick}>\nClick Me\n</button>\n);\n}\n}\nexport default Foo;\nYou’ll learn much more about the importance of binding event handlers in React, as well as how to\navoid having to think about it at all, in Chapters 6 and 7.\nManaging State in Class Components\nThe constructor function is the only place where you should ever directly update the state object\nof a component. For updating the state after the constructor function has run (during the life of the\ncomponent, in other words), React provides a function called setState.",
		"avoid having to think about it at all, in Chapters 6 and 7.\nManaging State in Class Components\nThe constructor function is the only place where you should ever directly update the state object\nof a component. For updating the state after the constructor function has run (during the life of the\ncomponent, in other words), React provides a function called setState.\nThe setState function tells React to update the state of the component using an object or function\nthat you pass into it.\nListing 4‑12 shows a class component that displays a counter and has a button for incrementing\nthat counter.\n72 ❘ CHAPTER 4 All About Components\nLISTING 4- 12: Using state and setState in a class component\nimport {Component} from 'react';\nclass Counter extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount(){\nthis.setState({count: this.state.count + 1});\n}\nrender(){\nreturn (\n<div>",
		"that counter.\n72 ❘ CHAPTER 4 All About Components\nLISTING 4- 12: Using state and setState in a class component\nimport {Component} from 'react';\nclass Counter extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount(){\nthis.setState({count: this.state.count + 1});\n}\nrender(){\nreturn (\n<div>\n<p>The current count is: {this.state.count}.</p>\n<button onClick = {()=>{this.incrementCount(this.state.count+1)}}>\nAdd 1\n</button>\n</div>\n);\n}\n}\nexport default Counter;\nA very important point to remember about the setState function (and one that I’ll repeat fre‑\nquently because it’s so important and can be the cause of many bugs in React apps) is that setState\nis asynchronous, and changes to state that you make using setState may be batched for perfor‑\nmance reasons.\nThe reason that the asynchronous nature of setState is important is that if you try to access state",
		"quently because it’s so important and can be the cause of many bugs in React apps) is that setState\nis asynchronous, and changes to state that you make using setState may be batched for perfor‑\nmance reasons.\nThe reason that the asynchronous nature of setState is important is that if you try to access state\nimmediately after setting it, you may get the old value rather than the new value that you expect. In\nListing 4‑13, I’ve added a console.log statement immediately after the setState function in the\nincrementCount method. Even though the console.log statement appears after setState, it will\nlog the value of this.state.count prior to the incrementing happening, as shown in Figure 4‑2.\nWe’ll talk about how to work with state to avoid this problem in Chapter 6.\nLISTING 4- 13: setState() is asynchronous\nimport {Component} from 'react';\nclass Counter extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}",
		"log the value of this.state.count prior to the incrementing happening, as shown in Figure 4‑2.\nWe’ll talk about how to work with state to avoid this problem in Chapter 6.\nLISTING 4- 13: setState() is asynchronous\nimport {Component} from 'react';\nclass Counter extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount(){\nthis.setState({count: this.state.count + 1});\nTypes of Components ❘ 73\nconsole.log(this.state.count);\n}\nrender(){\nreturn (\n<div>\n<p>The current count is: {this.state.count}.</p>\n<button onClick = {()=>{this.incrementCount(this.state.count+1)}}>\nAdd 1\n</button>\n</div>\n);\n}\n}\nexport default Counter;\nFIGURE 4- 2: Using state immediately after calling setState() may produce unexpected results\nThe Render Function\nThe render function is the only function that’s required in a class‑ based React component. It runs",
		"return (\n<div>\n<p>The current count is: {this.state.count}.</p>\n<button onClick = {()=>{this.incrementCount(this.state.count+1)}}>\nAdd 1\n</button>\n</div>\n);\n}\n}\nexport default Counter;\nFIGURE 4- 2: Using state immediately after calling setState() may produce unexpected results\nThe Render Function\nThe render function is the only function that’s required in a class‑ based React component. It runs\nwhen the component mounts and then again each time the component updates. It contains a return\nstatement that outputs the piece of the user interface that the component is responsible for.\n74 ❘ CHAPTER 4 All About Components\nLike any JavaScript function, the render function may contain JavaScript functions and variables.\nThe return statement inside the render function contains JSX or variables with JSX values.\nListing 4‑14 shows a component that outputs a simple static figure and caption.\nLISTING 4- 14: Rendering a figure and caption\nimport {Component} from 'react';",
		"74 ❘ CHAPTER 4 All About Components\nLike any JavaScript function, the render function may contain JavaScript functions and variables.\nThe return statement inside the render function contains JSX or variables with JSX values.\nListing 4‑14 shows a component that outputs a simple static figure and caption.\nLISTING 4- 14: Rendering a figure and caption\nimport {Component} from 'react';\nclass BasicFigure extends Component {\nrender() {\nreturn(\n<figure>\n<img src=\"images/cat.jpeg\" alt=\"a cat\" />\n<figcaption>This is a picture of a cat.</figcaption>\n</figure>\n);\n}\n}\nRemember that the return statement can only return one thing, such as one element, or one array, or\none string. In the preceding example, it returns a single <figure> element.\nThe beauty of React is that once you’ve built a simple component such as the one in Listing 4‑14,\nyou can reuse it as many times as you need to. However, there’s a major piece missing from this",
		"</figure>\n);\n}\n}\nRemember that the return statement can only return one thing, such as one element, or one array, or\none string. In the preceding example, it returns a single <figure> element.\nThe beauty of React is that once you’ve built a simple component such as the one in Listing 4‑14,\nyou can reuse it as many times as you need to. However, there’s a major piece missing from this\nBasicFigure component. It will currently output the same image and caption every time you use it.\nTo fix that, we need to use props.\nCreating and Using Props\nProps are the arguments that you pass into a component from a parent component. With JSX, the\nattributes that you write (which take the form of name=value in JSX elements) become properties\ninside the props object of the resulting component instance.\nTo illustrate how props work, let’s create a component that will make use of the BasicFigure com‑\nponent. I’ll call this component FigureList. The code for FigureList is shown in Listing 4‑15.",
		"attributes that you write (which take the form of name=value in JSX elements) become properties\ninside the props object of the resulting component instance.\nTo illustrate how props work, let’s create a component that will make use of the BasicFigure com‑\nponent. I’ll call this component FigureList. The code for FigureList is shown in Listing 4‑15.\nLISTING 4- 15: The FigureList component\nimport {Component} from 'react';\nimport BasicFigure from './BasicFigure';\nclass FigureList extends Component {\nrender() {\nreturn (\n<>\n<BasicFigure />\n<BasicFigure />\n<BasicFigure />\n</>\nTypes of Components ❘ 75\n)\n}\n}\nexport default FigureList;\nYou can probably figure out from looking at the code for this component and the BasicFigure com‑\nponent that the result of rendering FigureList will be that three identical figures and captions will\nbe outputted. To make our figures different, we need to pass data from FigureList to BasicFigure.\nThis is where props come in, as shown in Listing 4‑16.",
		")\n}\n}\nexport default FigureList;\nYou can probably figure out from looking at the code for this component and the BasicFigure com‑\nponent that the result of rendering FigureList will be that three identical figures and captions will\nbe outputted. To make our figures different, we need to pass data from FigureList to BasicFigure.\nThis is where props come in, as shown in Listing 4‑16.\nLISTING 4- 16: Using props to pass data to a child component\nimport {Component} from 'react';\nimport BasicFigure from './BasicFigure';\nclass FigureList extends Component {\nrender() {\nreturn (\n<div style={{display:\"flex\"}}>\n<BasicFigure filename=\"dog.jpg\" caption=\"Chauncey\" />\n<BasicFigure filename=\"cat.jpg\" caption=\"Murray\" />\n<BasicFigure filename=\"chickens.jpg\" caption=\"Lefty and Ginger\" />\n</div>\n)\n}\n}\nexport default FigureList;\nWith these attributes in place, the first part of rendering different output from a single component is",
		"render() {\nreturn (\n<div style={{display:\"flex\"}}>\n<BasicFigure filename=\"dog.jpg\" caption=\"Chauncey\" />\n<BasicFigure filename=\"cat.jpg\" caption=\"Murray\" />\n<BasicFigure filename=\"chickens.jpg\" caption=\"Lefty and Ginger\" />\n</div>\n)\n}\n}\nexport default FigureList;\nWith these attributes in place, the first part of rendering different output from a single component is\nin place. The BasicFigure component instances are all receiving different props.\nThe next step is to modify the BasicFigure component so that it makes use of the received props.\nWe can do this by inserting variables in place of static values in the return statement, as shown in\nListing 4‑17.\nLISTING 4- 17: Using props in a class component\nimport {Component} from 'react';\nclass BasicFigure extends Component {\nrender() {\nreturn(\n<figure>\n<img src={this.props.filename} alt={this.props.caption}/>\n<figcaption>{this.props.caption}</figcaption>\n</figure>\n);\n}\n}\nexport default BasicFigure;\n76 ❘ CHAPTER 4 All About Components",
		"Listing 4‑17.\nLISTING 4- 17: Using props in a class component\nimport {Component} from 'react';\nclass BasicFigure extends Component {\nrender() {\nreturn(\n<figure>\n<img src={this.props.filename} alt={this.props.caption}/>\n<figcaption>{this.props.caption}</figcaption>\n</figure>\n);\n}\n}\nexport default BasicFigure;\n76 ❘ CHAPTER 4 All About Components\nWith that done, the FigureList component will now render three BasicFigure components, each\nof which will output a figure element with different images and captions. I’ve changed the value of\nthe display style property to flex so that they’ll display in a row, rather than vertically, as shown in\nFigure 4‑3.\nFIGURE 4- 3: The result of rendering FigureList\nFunction Components\nNow that you understand JavaScript classes, how the this keyword works in JavaScript, what the\nconstructor is, and the basics of writing React components using the class method, we can get to the\ngood stuff.",
		"the display style property to flex so that they’ll display in a row, rather than vertically, as shown in\nFigure 4‑3.\nFIGURE 4- 3: The result of rendering FigureList\nFunction Components\nNow that you understand JavaScript classes, how the this keyword works in JavaScript, what the\nconstructor is, and the basics of writing React components using the class method, we can get to the\ngood stuff.\nAlthough a knowledge of classes is important for understanding how React works, the React world is\nmoving very quickly away from using classes whenever possible. The reason: using classes is com‑\nplicated, and many people don’t understand how this works. If you do have an understanding of\nclasses and how the this keyword works in JavaScript, you’ll have a better appreciation and under‑\nstanding of how function components work, so I do recommend learning about classes still.\nThe function component was created to simplify the creation of React components. To illustrate how",
		"plicated, and many people don’t understand how this works. If you do have an understanding of\nclasses and how the this keyword works in JavaScript, you’ll have a better appreciation and under‑\nstanding of how function components work, so I do recommend learning about classes still.\nThe function component was created to simplify the creation of React components. To illustrate how\nmuch easier writing a function component can be than a class component, consider the simple To Do\nList example class in Listing 4‑18.\nLISTING 4- 18: A typical class component\nimport React from 'react';\nclass ToDoClass extends React.Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nitem: '',\ntodolist: []\n}\nthis.handleSubmit = this.handleSubmit.bind(this);\nthis.handleChange = this.handleChange.bind(this);\n}\nTypes of Components ❘ 77\nhandleSubmit(e){\ne.preventDefault();\nconst list = [...this.state.todolist, this.state.item];\nthis.setState({\ntodolist:list\n})\n}\nhandleChange(e){",
		"class ToDoClass extends React.Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nitem: '',\ntodolist: []\n}\nthis.handleSubmit = this.handleSubmit.bind(this);\nthis.handleChange = this.handleChange.bind(this);\n}\nTypes of Components ❘ 77\nhandleSubmit(e){\ne.preventDefault();\nconst list = [...this.state.todolist, this.state.item];\nthis.setState({\ntodolist:list\n})\n}\nhandleChange(e){\nthis.setState({item:e.target.value});\n}\nrender(){\nconst currentTodos = this.state.todolist.map(\n(todo,index)=><p key={index}>{todo}</p>);\nreturn (\n<form onSubmit={this.handleSubmit}>\n<input type=\"text\"\nid=\"todoitem\"\nvalue={this.state.item}\nonChange={this.handleChange}\nplaceholder=\"what to do?\" />\n<button type=\"submit\">\nAdd\n</button>\n{currentTodos}\n</form>\n);\n}\n}\nexport default ToDoClass;\nListing 4‑19 shows how you can write a component that does the same thing as the class in List‑\ning 4‑18 using a function component.\nLISTING 4- 19: A typical function component\nimport React,{useState} from 'react';",
		"value={this.state.item}\nonChange={this.handleChange}\nplaceholder=\"what to do?\" />\n<button type=\"submit\">\nAdd\n</button>\n{currentTodos}\n</form>\n);\n}\n}\nexport default ToDoClass;\nListing 4‑19 shows how you can write a component that does the same thing as the class in List‑\ning 4‑18 using a function component.\nLISTING 4- 19: A typical function component\nimport React,{useState} from 'react';\nfunction ToDoFunction(props){\nconst [item,setItem] = useState('');\nconst [todolist,setTodoList] = useState([]);\nconst handleSubmit = (e)=>{\ne.preventDefault();\nconst list = [...todolist, item];\nsetTodoList(list)\n}\nconst currentTodos = todolist.map((todo,index)=><p key={index}>{todo}</p>);\nreturn (\n<form onSubmit={handleSubmit}>\n<input type=\"text\"\ncontinues\n78 ❘ CHAPTER 4 All About Components\nLISTING 4-19 (continued)\nid=\"todoitem\"\nvalue={item}\nonChange={(e)=>{setItem(e.target.value)}}\nplaceholder=\"what to do?\" />\n<button type=\"submit\">\nAdd\n</button>\n{currentTodos}\n</form>\n);\n}",
		"setTodoList(list)\n}\nconst currentTodos = todolist.map((todo,index)=><p key={index}>{todo}</p>);\nreturn (\n<form onSubmit={handleSubmit}>\n<input type=\"text\"\ncontinues\n78 ❘ CHAPTER 4 All About Components\nLISTING 4-19 (continued)\nid=\"todoitem\"\nvalue={item}\nonChange={(e)=>{setItem(e.target.value)}}\nplaceholder=\"what to do?\" />\n<button type=\"submit\">\nAdd\n</button>\n{currentTodos}\n</form>\n);\n}\nexport default ToDoFunction;\nNotice how much simpler the function component version is. There’s no render method, no con‑\nstructor, and no binding of this. It’s even possible to further simplify this function component by\nremoving the import of React, since we’re not directly using it, using an arrow function for the com‑\nponent, and moving the export statement up to the function expression, as shown in Listing 4‑20.\nLISTING 4- 20: Further simplifying a function component\nimport {useState} from 'react';\nexport const ToDoFunction = (props)=>{\nconst [item,setItem] = useState('');",
		"removing the import of React, since we’re not directly using it, using an arrow function for the com‑\nponent, and moving the export statement up to the function expression, as shown in Listing 4‑20.\nLISTING 4- 20: Further simplifying a function component\nimport {useState} from 'react';\nexport const ToDoFunction = (props)=>{\nconst [item,setItem] = useState('');\nconst [todolist,setTodoList] = useState();\nconst handleSubmit = (e)=>{\ne.preventDefault();\nconst list = [...todolist, item];\nsetTodoList(list)\n}\nconst currentTodos = todolist.map((todo,index)=><p key={index}>{todo}</p>);\nreturn (\n<form onSubmit={handleSubmit}>\n<input type=\"text\"\nid=\"todoitem\"\nvalue={item}\nonChange={(e)=>{setItem(e.target.value)}}\nplaceholder=\"what to do?\" />\n<button type=\"submit\">\nAdd\n</button>\n{currentTodos}\n</form>\n);\n}\nTypes of Components ❘ 79\nNote that in this example, we’ve changed the export from a default export to a named export. To",
		"return (\n<form onSubmit={handleSubmit}>\n<input type=\"text\"\nid=\"todoitem\"\nvalue={item}\nonChange={(e)=>{setItem(e.target.value)}}\nplaceholder=\"what to do?\" />\n<button type=\"submit\">\nAdd\n</button>\n{currentTodos}\n</form>\n);\n}\nTypes of Components ❘ 79\nNote that in this example, we’ve changed the export from a default export to a named export. To\nimport this component into another component, you’ll need to surround the name of the component\nwith curly braces, like this:\nimport {ToDoFunction} from './ToDoFunction';\nNow that you’ve seen how much more simple function components can be than class components,\nlet’s look at how to write them and what their limitations are.\nWhat Are Function Components?\nFunction components are JavaScript functions that return React elements.\nWhen they were first introduced into React, function components were a simplified way to write cer‑\ntain kinds of components called “stateless functional components.” Stateless functional components",
		"let’s look at how to write them and what their limitations are.\nWhat Are Function Components?\nFunction components are JavaScript functions that return React elements.\nWhen they were first introduced into React, function components were a simplified way to write cer‑\ntain kinds of components called “stateless functional components.” Stateless functional components\nare also known as “dumb components” or “presentational components.”\nStateless functional components simply accept props from their parent and return a piece of the user\ninterface. They don’t perform additional operations, such as fetching and posting data, and they don’t\nhave their own internal state data.\nIn version 16.8 of React, however, a new feature was added to React called hooks. Hooks allow func‑\ntion components to do most of the things that class components can do, such as interacting with data\nstores and using state. The result is that function components have now become the primary way that",
		"have their own internal state data.\nIn version 16.8 of React, however, a new feature was added to React called hooks. Hooks allow func‑\ntion components to do most of the things that class components can do, such as interacting with data\nstores and using state. The result is that function components have now become the primary way that\nmost React components are written.\nReact’s official documentation states that class components will continue to be supported for the\nforeseeable future. At this point, however, no one can foresee how much longer they’ll be necessary. If\nyou’re currently writing class components, there’s no need to convert them to function components.\nIf you’re coming to React from a background working with object‑ oriented languages, you may feel\nmore comfortable working with class components than with function components and that’s fine too.\nWith function components being so much simpler to work with, you may very well want to use them",
		"you’re currently writing class components, there’s no need to convert them to function components.\nIf you’re coming to React from a background working with object‑ oriented languages, you may feel\nmore comfortable working with class components than with function components and that’s fine too.\nWith function components being so much simpler to work with, you may very well want to use them\nexclusively, and that’s great! Be aware, however, that fully functional function components weren’t\nintroduced into React until years after it became one of the most popular UI libraries, so you’re going\nto come into contact with a lot of class components. As long as you understand them and how to\nconvert them to function components (which we’ll cover in detail in Chapter 11), you may never need\nto write another class component.\nHow to Write Function Components\nSince a function component is simply a JavaScript function, it starts the same way as any other",
		"to come into contact with a lot of class components. As long as you understand them and how to\nconvert them to function components (which we’ll cover in detail in Chapter 11), you may never need\nto write another class component.\nHow to Write Function Components\nSince a function component is simply a JavaScript function, it starts the same way as any other\nfunction— as either a function expression or a function declaration. The choice of whether to use an\nexpression or a declaration is mostly a matter of style and personal choice.\nHere’s an example of a function component created using a function declaration:\nfunction Foo(props){\nreturn <h1>Welcome</h1>;\n}\nexport default Foo;\n80 ❘ CHAPTER 4 All About Components\nHere’s an example of a function component created using a function expression:\nconst Foo = function(props){\nreturn <h1>Welcome</h1>;\n}\nexport default Foo;\nComponents created using function expressions can also be written using JavaScript’s arrow function",
		"function Foo(props){\nreturn <h1>Welcome</h1>;\n}\nexport default Foo;\n80 ❘ CHAPTER 4 All About Components\nHere’s an example of a function component created using a function expression:\nconst Foo = function(props){\nreturn <h1>Welcome</h1>;\n}\nexport default Foo;\nComponents created using function expressions can also be written using JavaScript’s arrow function\nsyntax, which saves several characters. For example:\nconst Foo = (props) => {\nreturn <h1>Welcome</h1>;\n}\nexport default Foo;\nThe difference in terms of performance or actual bytes of data between using the function keyword\nand using an arrow function is negligible. Many React developers opt for the arrow syntax because it\nallows additional shortcuts (as described in the following section), and because arrow functions are\ngenerally more convenient to use internally inside of components, why not use them everywhere and\nbe consistent? Also, arrow functions look kind of cool.",
		"and using an arrow function is negligible. Many React developers opt for the arrow syntax because it\nallows additional shortcuts (as described in the following section), and because arrow functions are\ngenerally more convenient to use internally inside of components, why not use them everywhere and\nbe consistent? Also, arrow functions look kind of cool.\nWhether you choose to use function expressions or function declarations for your function com‑\nponents, it’s a good practice (and looks cleaner) if you stick to one or the other for every function\ncomponent you write.\nOptimizations and Function Component Shortcuts\nOne of the challenges in writing any type of computer code is to balance readability with concise‑\nness. JavaScript offers many ways to minimize the number of characters and lines of code required\nto perform tasks, and React developers, in particular, are fond of using the shorthand syntax when‑\never possible.",
		"component you write.\nOptimizations and Function Component Shortcuts\nOne of the challenges in writing any type of computer code is to balance readability with concise‑\nness. JavaScript offers many ways to minimize the number of characters and lines of code required\nto perform tasks, and React developers, in particular, are fond of using the shorthand syntax when‑\never possible.\nFor example, the following is a perfectly valid function component:\nexport const Foo = props => <h1>Hello, World!</h1>;\nThat’s the whole thing! The preceding code snippet takes advantage of the following rules of arrow\nfunctions:\n1. The parentheses around the parameter list are optional when a function only takes one\nparameter.\n2. The return keyword is optional when an arrow function doesn’t do anything except\nreturn data.\n3. The curly braces around the function body are optional if you skip the return keyword.\nTypes of Components ❘ 81\nJAVASCRIPT LESSON: VARIABLES",
		"functions:\n1. The parentheses around the parameter list are optional when a function only takes one\nparameter.\n2. The return keyword is optional when an arrow function doesn’t do anything except\nreturn data.\n3. The curly braces around the function body are optional if you skip the return keyword.\nTypes of Components ❘ 81\nJAVASCRIPT LESSON: VARIABLES\nWith the ES2015 version of JavaScript, we gained two new keywords for declaring\nvariables: const and let. We also gained some new ways to work with variables,\nincluding the destructuring assignment syntax.\nIf it’s been a while since you’ve written any JavaScript, the new keywords and ways\nto work with variables will be new to you. They are widely used and relied upon by\nmost React apps, however, so it’s important that you understand when, why, and\nhow to use these new tools.\nGoodbye to var\nIn the original JavaScript syntax, and up until 2015, the way to create a variable was",
		"If it’s been a while since you’ve written any JavaScript, the new keywords and ways\nto work with variables will be new to you. They are widely used and relied upon by\nmost React apps, however, so it’s important that you understand when, why, and\nhow to use these new tools.\nGoodbye to var\nIn the original JavaScript syntax, and up until 2015, the way to create a variable was\nwith the var keyword. The var keyword is still present in JavaScript, and it always\nwill be. The simplest form of using var looks like this:\nvar x;\nWhen you want to assign a value to x or change the value of x, you can simply use\nthe assignment operator:\nx=10;\nYou can also initialize a variable created using var at the same time as you declare it:\nvar x=10;\nJavaScript evaluates declarations first within their scope through a process called\nhoisting. When you use the var keyword to declare a variable, JavaScript also initial‑\nizes the variable with a value of undefined during the hoisting. What this means in",
		"the assignment operator:\nx=10;\nYou can also initialize a variable created using var at the same time as you declare it:\nvar x=10;\nJavaScript evaluates declarations first within their scope through a process called\nhoisting. When you use the var keyword to declare a variable, JavaScript also initial‑\nizes the variable with a value of undefined during the hoisting. What this means in\npractice is that it’s possible to use a variable created with var before it’s declared, as\nin the following example:\nx = 10;\nconsole.log(x);\nvar x;\nThe previous example, when compiled by a JavaScript interpreter, is exactly\nthe same as:\nvar x;\nx = 10;\nconsole.log(x);\nand\nvar x=10;\nconsole.log(x);\nVariables created using var have function scope. What this means is that if\nyou declare a variable inside a function, you can use that variable anywhere in\nthe function.\ncontinues\n82 ❘ CHAPTER 4 All About Components\ncontinued\nIf you declare a variable outside of a function, it will have global scope, meaning that",
		"the same as:\nvar x;\nx = 10;\nconsole.log(x);\nand\nvar x=10;\nconsole.log(x);\nVariables created using var have function scope. What this means is that if\nyou declare a variable inside a function, you can use that variable anywhere in\nthe function.\ncontinues\n82 ❘ CHAPTER 4 All About Components\ncontinued\nIf you declare a variable outside of a function, it will have global scope, meaning that\nyou can use it anywhere in your program.\nIn reality, if a global is what you want (and if you’re not using “strict” mode) you\ndidn’t even need to use the var keyword, because if you just assigned a value to a\nname, the result will be a global variable, no matter where in your program you\ndo the assignment. Another way to think about what happens when you create a\nvariable without declaring it is that a new property is created on the global object\n(window in the case of a browser). This “feature” of loose‑ mode JavaScript is called",
		"name, the result will be a global variable, no matter where in your program you\ndo the assignment. Another way to think about what happens when you create a\nvariable without declaring it is that a new property is created on the global object\n(window in the case of a browser). This “feature” of loose‑ mode JavaScript is called\nimplicit globals, and it can be very dangerous, which is why strict mode disallows it.\nIn modern JavaScript, even variables created using the var keyword are considered\nto be dangerous, and their use is discouraged. The reason is that function scope is\nalmost always unnecessarily broad and it makes it too easy to accidentally overwrite\nor redeclare a variable.\nMost developers and experts now recommend using the new const and let key‑\nwords exclusively.\nUsing const\nThe const keyword creates a variable that can only have one value during its\nlifetime, which we call a constant. To create a constant, just use the const keyword\nfollowed by a valid name:\nconst x;",
		"or redeclare a variable.\nMost developers and experts now recommend using the new const and let key‑\nwords exclusively.\nUsing const\nThe const keyword creates a variable that can only have one value during its\nlifetime, which we call a constant. To create a constant, just use the const keyword\nfollowed by a valid name:\nconst x;\nHowever, because you can’t change a constant, and because declaring a vari‑\nable automatically assigns it a value of undefined, if you want your constant to\nhave a value other than undefined, you must initialize it at the same time as the\ndeclaration:\nconst x = 10;\nAttempting to change the value of a const will result in an error in JavaScript. Note,\nhowever, that if you assign an object or an array to a constant, you can still change\nthe properties of that object or the items in the array. You would not be able to reas‑\nsign the variable with a completely new object or array, however.\nBlock Scoped Variables with let",
		"declaration:\nconst x = 10;\nAttempting to change the value of a const will result in an error in JavaScript. Note,\nhowever, that if you assign an object or an array to a constant, you can still change\nthe properties of that object or the items in the array. You would not be able to reas‑\nsign the variable with a completely new object or array, however.\nBlock Scoped Variables with let\nThe other new way to declare variables is with the let keyword, which creates a\nblock‑s coped variable. This is also known as lexical variable scoping. In JavaScript,\na block is created by a pair of curly braces. Since loops and conditional statements\nas well as functions create blocks, let makes it possible to have variables that are\nfunction‑s coped in practice (by declaring them at the top level of a function), but\nit also enables you to create variables that have more limited scope, such as inside\nof a loop.\nVariables created using const also have block scope.\nTypes of Components ❘ 83",
		"as well as functions create blocks, let makes it possible to have variables that are\nfunction‑s coped in practice (by declaring them at the top level of a function), but\nit also enables you to create variables that have more limited scope, such as inside\nof a loop.\nVariables created using const also have block scope.\nTypes of Components ❘ 83\nDestructuring Assignment\nDestructuring assignment syntax lets you create variables by unpacking the elements\nin an array or the properties of an object. For example, say you have the follow‑\ning object:\nconst User = {\nfirstName: 'Lesley',\nlastName: 'Altenwerth',\nuserName: 'roosevelt86',\naddress: '81592 Daniel Underpass',\ncity: 'Haileeshire',\nbirthday: '1963- 10- 12'\n}\nIf you want to create individual variables from the properties in this object, one way\nto do it is to declare and assign individual variables, like this:\nconst firstName = User.firstName;\nconst lastName = User.lastName;\nconst userName = User.userName;\n...",
		"lastName: 'Altenwerth',\nuserName: 'roosevelt86',\naddress: '81592 Daniel Underpass',\ncity: 'Haileeshire',\nbirthday: '1963- 10- 12'\n}\nIf you want to create individual variables from the properties in this object, one way\nto do it is to declare and assign individual variables, like this:\nconst firstName = User.firstName;\nconst lastName = User.lastName;\nconst userName = User.userName;\n...\nUsing destructuring syntax, you can do it all in one statement:\nconst {firstName,lastName,userName,address,city,birthday} = User;\nTo use destructuring with arrays, use square brackets:\nconst [firstName,lastName] = ['Lesley','Altenwerth'];\nManaging State in Function Components\nEach time a JavaScript function runs, the variables inside it are initialized. Because functional compo‑\nnents are merely JavaScript functions, it’s not possible for them to have persistent local variables.\nReact provides hooks to allow functional components to create and access data that persists from one",
		"const [firstName,lastName] = ['Lesley','Altenwerth'];\nManaging State in Function Components\nEach time a JavaScript function runs, the variables inside it are initialized. Because functional compo‑\nnents are merely JavaScript functions, it’s not possible for them to have persistent local variables.\nReact provides hooks to allow functional components to create and access data that persists from one\ninvocation of a functional component to the next (aka “state”).\nHooks are functions that let you “hook” into functionality of class components without writing a\nclass. React has many built‑i n hooks and even lets you write your own hooks. The hook that lets you\npersist data with functional components is useState.\nThe first step in using useState is to import it from the React library, like this:\nimport {useState} from 'react';\nOnce imported, you can invoke useState inside your functional component as many times as you",
		"class. React has many built‑i n hooks and even lets you write your own hooks. The hook that lets you\npersist data with functional components is useState.\nThe first step in using useState is to import it from the React library, like this:\nimport {useState} from 'react';\nOnce imported, you can invoke useState inside your functional component as many times as you\nneed to. The useState function accepts an initial value as an argument and each time you invoke\nuseState it returns an array containing a stateful variable and a function for updating that variable.\nUsing destructuring syntax, you can extract this array and function into two variables:\nconst [todos, setTodos] = useState([{item: 'Learn About Hooks'}]);\n84 ❘ CHAPTER 4 All About Components\nListing 4‑21 shows a functional component that uses useState to create and update a counter.\nLISTING 4- 21: Using state in functional components\nimport {useState} from 'react';\nfunction Counter() {\nconst [count, setCount] = useState(0);\nreturn (",
		"const [todos, setTodos] = useState([{item: 'Learn About Hooks'}]);\n84 ❘ CHAPTER 4 All About Components\nListing 4‑21 shows a functional component that uses useState to create and update a counter.\nLISTING 4- 21: Using state in functional components\nimport {useState} from 'react';\nfunction Counter() {\nconst [count, setCount] = useState(0);\nreturn (\n<div>\n<p>The current count is: {count}.</p>\n<button onClick = {()=>{setCount(count+1)}}>\nAdd 1\n</button>\n</div>\n);\n}\nexport default Counter;\nI’ll cover hooks in detail in Chapter 11.\nDifferences between Function and Class Components\nTable 4‑2 summarizes the main differences between function components and class components.\nTABLE 4-2 : Functions vs. Classes\nFUNCTION COMPONENTS CLASS COMPONENTS\nAccepts props as arguments and returns a React element Extends React.Component\nNo render method Requires a render method\nNo internal state (can be simulated using hooks) Has internal state\nCan use hooks Cannot use hooks",
		"Table 4‑2 summarizes the main differences between function components and class components.\nTABLE 4-2 : Functions vs. Classes\nFUNCTION COMPONENTS CLASS COMPONENTS\nAccepts props as arguments and returns a React element Extends React.Component\nNo render method Requires a render method\nNo internal state (can be simulated using hooks) Has internal state\nCan use hooks Cannot use hooks\nCannot use lifecycle methods (can be simulated using hooks) Can use lifecycle methods\nREACT COMPONENT CHILDREN\nComponents that are rendered inside other components are called children, and the component\nthey’re rendered inside of is called their parent. As in the physical world, being a child doesn’t prevent\na component from being a parent to some other child, and all parents except for the root component\nare also children.\nA React UI of any complexity will have many components nested within other components and the\nparent/child terminology is how their relationships are described.",
		"they’re rendered inside of is called their parent. As in the physical world, being a child doesn’t prevent\na component from being a parent to some other child, and all parents except for the root component\nare also children.\nA React UI of any complexity will have many components nested within other components and the\nparent/child terminology is how their relationships are described.\nReact Component Children ❘ 85\nIn the React component shown in Listing 4‑22, the UsernameInput, PasswordInput, and\nLoginSubmit components are all children of LoginForm. Technically, the built‑ in form component is\nthe child of LoginForm, and the three custom components are its grandchildren.\nLISTING 4- 22: A component made up of three child components\nexport default function LoginForm() {\nreturn (\n<form>\n<UsernameInput />\n<PasswordInput />\n<LoginSubmit />\n</form>\n)\n}\nthis.props.children\nEvery component in a React UI has a property called children that stores the children of that com‑",
		"the child of LoginForm, and the three custom components are its grandchildren.\nLISTING 4- 22: A component made up of three child components\nexport default function LoginForm() {\nreturn (\n<form>\n<UsernameInput />\n<PasswordInput />\n<LoginSubmit />\n</form>\n)\n}\nthis.props.children\nEvery component in a React UI has a property called children that stores the children of that com‑\nponent. By using this.props.children (or props.children in the case of function components) in\nthe return statement of a component, you can create components where the child components aren’t\nknown until the component is invoked.\nFor example, Listing 4‑23 shows a component named ThingsThatAreFunny, which you can wrap\naround any other components and it will render them with a title of “Here are some funny things.”\nLISTING 4- 23: Presenting ThingsThatAreFunny\nexport default function ThingsThatAreFunny(props) {\nreturn (\n<>\n<h1>Here are some funny things.</h1>\n{props.children}\n</>\n)\n}",
		"known until the component is invoked.\nFor example, Listing 4‑23 shows a component named ThingsThatAreFunny, which you can wrap\naround any other components and it will render them with a title of “Here are some funny things.”\nLISTING 4- 23: Presenting ThingsThatAreFunny\nexport default function ThingsThatAreFunny(props) {\nreturn (\n<>\n<h1>Here are some funny things.</h1>\n{props.children}\n</>\n)\n}\nTo use the ThingsThatAreFunny component, split it into starting and ending tags instead of using the\nself‑ closing slash at the end of the component element name. Between the starting and ending tags,\ninclude child elements that you want to be rendered inside of it, as shown in Listing 4‑24.\nLISTING 4- 24: Passing children into a component\nimport ThingsThatAreFunny from './ThingsThatAreFunny';\nimport Joke from './Joke';\ncontinues\n86 ❘ CHAPTER 4 All About Components\nLISTING 4-24 (continued)\nexport default function ThingsILike(props){\nreturn (\n<ThingsThatAreFunny>\n<ul>\n<li><Joke id=\"0\" /></li>",
		"include child elements that you want to be rendered inside of it, as shown in Listing 4‑24.\nLISTING 4- 24: Passing children into a component\nimport ThingsThatAreFunny from './ThingsThatAreFunny';\nimport Joke from './Joke';\ncontinues\n86 ❘ CHAPTER 4 All About Components\nLISTING 4-24 (continued)\nexport default function ThingsILike(props){\nreturn (\n<ThingsThatAreFunny>\n<ul>\n<li><Joke id=\"0\" /></li>\n<li><Joke id=\"1\" /></li>\n</ul>\n</ThingsThatAreFunny>\n)\n}\nAssuming that the Joke component outputs one joke, the result of rendering the ThingsILike com‑\nponent is shown in Figure 4‑4.\nFIGURE 4- 4: Rendering the ThingsILike component\nManipulating Children\nReact provides several built‑ in ways to access information about and manipulate elements. These are:\n➤➤ isValidElement\n➤➤ cloneElement\n➤➤ React.Children\nReact.Children\nReact.Children provides several utility functions that operate on the children of a component. For",
		"ponent is shown in Figure 4‑4.\nFIGURE 4- 4: Rendering the ThingsILike component\nManipulating Children\nReact provides several built‑ in ways to access information about and manipulate elements. These are:\n➤➤ isValidElement\n➤➤ cloneElement\n➤➤ React.Children\nReact.Children\nReact.Children provides several utility functions that operate on the children of a component. For\neach of these, you can pass in props.children as an argument. These utilities are:\n➤➤ React.Children.map. Invokes a function for each immediate child element and returns a\nnew array of elements.\n➤➤ React.Children.forEach. Invokes a function for each immediate child but doesn’t\nreturn anything.\n➤➤ React.Children.count. Returns the number of components in children.\n➤➤ React.Children.only. Verifies that children only has one child.\n➤➤ React.Children.toArray. Converts children to an array.\nReact Component Children ❘ 87\nisValidElement\nThe isValidElement function takes an object as an argument and returns either true or false",
		"return anything.\n➤➤ React.Children.count. Returns the number of components in children.\n➤➤ React.Children.only. Verifies that children only has one child.\n➤➤ React.Children.toArray. Converts children to an array.\nReact Component Children ❘ 87\nisValidElement\nThe isValidElement function takes an object as an argument and returns either true or false\ndepending on whether the object is a React element.\ncloneElement\nThe cloneElement function creates a copy of an element passed into it. Here’s the basic syntax for\ncloneElement:\nconst NewElement = React.cloneElement(element,[props],[children]);\nWith cloneElement, you can create new elements from a component’s child elements, and modify\nthem in the process. For example, say you have a NavBar component that has NavItem children. You\ncan render these in your App component, as shown in Listing 4‑25.\nLISTING 4- 25: Rendering a NavBar inside of App\nimport NavBar from './NavBar';\nimport NavItem from './NavItem';\nfunction App(props){\nreturn (",
		"With cloneElement, you can create new elements from a component’s child elements, and modify\nthem in the process. For example, say you have a NavBar component that has NavItem children. You\ncan render these in your App component, as shown in Listing 4‑25.\nLISTING 4- 25: Rendering a NavBar inside of App\nimport NavBar from './NavBar';\nimport NavItem from './NavItem';\nfunction App(props){\nreturn (\n<NavBar>\n<NavItem />\n<NavItem />\n<NavItem />\n</NavBar>);\n}\nexport default App;\nThe NavBar component in this example could use props.children to render all of the NavItems\nthat are children of it, as shown in Listing 4‑26.\nLISTING 4- 26: Rendering the children using props.children\nfunction NavBar(props){\nreturn (\n<div>\n{props.children}\n</div>\n)\n}\nexport default NavBar;\nHowever, what if you want to add an onClick attribute to each NavItem from within the NavBar\ncomponent? Because props.children isn’t actually the children (it’s a descriptor of the children),",
		"that are children of it, as shown in Listing 4‑26.\nLISTING 4- 26: Rendering the children using props.children\nfunction NavBar(props){\nreturn (\n<div>\n{props.children}\n</div>\n)\n}\nexport default NavBar;\nHowever, what if you want to add an onClick attribute to each NavItem from within the NavBar\ncomponent? Because props.children isn’t actually the children (it’s a descriptor of the children),\nyou can’t modify the children by using props.children.\n88 ❘ CHAPTER 4 All About Components\nInstead, what you need to do is to clone the children from within the NavBar component and then\nadd or change properties in them, as shown in Listing 4‑27.\nLISTING 4- 27: Cloning the children in NavBar.js\nimport React from 'react';\nfunction NavBar(props){\nreturn (\n<div>\n{React.Children.map(props.children, child => {\nreturn React.cloneElement(child, {\nonClick: props.onClick })\n})}\n</div>\n)\n}\nexport default NavBar;\nWith that done, you can then pass a function into NavBar, as shown in Listing 4‑28, and it will be",
		"LISTING 4- 27: Cloning the children in NavBar.js\nimport React from 'react';\nfunction NavBar(props){\nreturn (\n<div>\n{React.Children.map(props.children, child => {\nreturn React.cloneElement(child, {\nonClick: props.onClick })\n})}\n</div>\n)\n}\nexport default NavBar;\nWith that done, you can then pass a function into NavBar, as shown in Listing 4‑28, and it will be\nadded to each of its child components.\nLISTING 4- 28: Passing onClick into the parent component\nimport NavBar from './NavBar';\nimport NavItem from './NavItem';\nfunction App(props){\nreturn (\n<NavBar onClick={()=>{console.log('clicked');}}>\n<NavItem />\n<NavItem />\n<NavItem />\n</NavBar>);\n}\nexport default App;\nThe child components can then make use of this new prop, as shown in Listing 4‑29.\nLISTING 4- 29: Making use of props in a child component\nfunction NavItem(props){\nreturn (\n<button onClick={props.onClick}>Click Me</button>\n)\n}\nexport default NavItem;\nThe Component Lifecycle ❘ 89\nTHE COMPONENT LIFECYCLE",
		"<NavItem />\n<NavItem />\n<NavItem />\n</NavBar>);\n}\nexport default App;\nThe child components can then make use of this new prop, as shown in Listing 4‑29.\nLISTING 4- 29: Making use of props in a child component\nfunction NavItem(props){\nreturn (\n<button onClick={props.onClick}>Click Me</button>\n)\n}\nexport default NavItem;\nThe Component Lifecycle ❘ 89\nTHE COMPONENT LIFECYCLE\nDuring the time when a React application is running, components become active, do their thing,\nand are destroyed. At each stage in the life of a component, certain events are fired and methods are\ninvoked. These events and methods make up the component lifecycle.\nThe stages of a component’s life are:\n➤➤ Mounting: Mounting is where a component is constructed using the props passed into it and\nthe default state, and the JSX returned by the component is rendered.\n➤➤ Updating: Updating happens when the state of the component changes and the component is\nre‑ rendered.",
		"invoked. These events and methods make up the component lifecycle.\nThe stages of a component’s life are:\n➤➤ Mounting: Mounting is where a component is constructed using the props passed into it and\nthe default state, and the JSX returned by the component is rendered.\n➤➤ Updating: Updating happens when the state of the component changes and the component is\nre‑ rendered.\n➤➤ Unmounting: Unmounting is the end of the component lifecycle, when the component is\nremoved from the active application.\n➤➤ Error handling: The error handling methods run when an error happens during a compo‑\nnent’s lifecycle.\nIn class components, you can override the lifecycle methods to run your own code in response to\nlifecycle events. Function components can simulate lifecycle methods using a hook called useEffect,\nwhich I’ll cover in detail in Chapter 11.\nUnderstanding the main events in the lifecycle of a component is key to understanding how React",
		"nent’s lifecycle.\nIn class components, you can override the lifecycle methods to run your own code in response to\nlifecycle events. Function components can simulate lifecycle methods using a hook called useEffect,\nwhich I’ll cover in detail in Chapter 11.\nUnderstanding the main events in the lifecycle of a component is key to understanding how React\nworks. Figure 4‑5 shows the component lifecycle as a flowchart.\nMounting Updating Unmounting\nconstructor New props setState() forceUpdate()\n“Render phase” getDerivedStateFromProps\nPure and has no side\neffects. May be\npaused, aborted, or\nrestarted by React. shouldComponentUpdate\nrender\n“Pre-commit phase”\ngetSnapshotBeforeUpdate\nCan read the DOM.\nReact updates DOM and refs\n“Commit phase”\nCan work with DOM,\nrun side effects,\nschedule updates.\ncomponentDidMount componentDidUpdate componentWillUnmount\nFIGURE 4- 5: The component lifecycle\n90 ❘ CHAPTER 4 All About Components",
		"Pure and has no side\neffects. May be\npaused, aborted, or\nrestarted by React. shouldComponentUpdate\nrender\n“Pre-commit phase”\ngetSnapshotBeforeUpdate\nCan read the DOM.\nReact updates DOM and refs\n“Commit phase”\nCan work with DOM,\nrun side effects,\nschedule updates.\ncomponentDidMount componentDidUpdate componentWillUnmount\nFIGURE 4- 5: The component lifecycle\n90 ❘ CHAPTER 4 All About Components\nThe following sections will examine the four stages of the component lifecycle and then will explore\nhow you can avoid errors and improve performance with the lifecycle as well.\nMounting\nThe mounting stage includes everything from when a component is first constructed until it is\ninserted into the DOM. During the mounting lifecycle stage, the following methods run, in this order:\n➤➤ constructor\n➤➤ static getDerivedStateFromProps\n➤➤ render\n➤➤ componentDidMount\nconstructor()\nYou’ve already learned about the constructor. This is the method that automatically runs in an",
		"Mounting\nThe mounting stage includes everything from when a component is first constructed until it is\ninserted into the DOM. During the mounting lifecycle stage, the following methods run, in this order:\n➤➤ constructor\n➤➤ static getDerivedStateFromProps\n➤➤ render\n➤➤ componentDidMount\nconstructor()\nYou’ve already learned about the constructor. This is the method that automatically runs in an\ninstance of a class when it’s created. In a React component, it may include a call to the super method,\ninitialization of the component’s state object, and binding of event handlers.\nstatic getDerivedStateFromProps\nThis method is a static method, meaning that it doesn’t have access to the this keyword. The pur‑\npose of getDerivedStateFromProps is to check whether the props that the component uses have\nchanged and to use the new props to update the state. This method runs both during the mounting\nstage as well as during the updating stage.\nrender",
		"static getDerivedStateFromProps\nThis method is a static method, meaning that it doesn’t have access to the this keyword. The pur‑\npose of getDerivedStateFromProps is to check whether the props that the component uses have\nchanged and to use the new props to update the state. This method runs both during the mounting\nstage as well as during the updating stage.\nrender\nLike getDerivedStateFromProps, the render method also runs once during the mounting stage.\nAfter mounting, render runs every time the component updates. This is the method that generates\nthe JSX output of your component, and it’s the only required method in a class component.\ncomponentDidMount()\nThe componentDidMount method runs when the component has finished mounting and has been\ninserted in the browser DOM. This is the point at which it’s safe to do things that depend on DOM\nnodes, or to fetch remote data.\nUpdating\nAfter your component has mounted, the updating lifecycle methods start running. React components",
		"componentDidMount()\nThe componentDidMount method runs when the component has finished mounting and has been\ninserted in the browser DOM. This is the point at which it’s safe to do things that depend on DOM\nnodes, or to fetch remote data.\nUpdating\nAfter your component has mounted, the updating lifecycle methods start running. React components\nupdate their data and re‑r ender in response to changes to the state object made using the setState\nfunction. Every time a component updates, the following methods run, in this order:\n➤➤ static getDerivedStateFromProps\n➤➤ shouldComponentUpdate\nThe Component Lifecycle ❘ 91\n➤➤ render\n➤➤ getSnapshotBeforeUpdate\n➤➤ componentDidUpdate\nThe getDerivedStateFromProps and render methods serve the same purposes in the updating\nstage as they do during the mounting stage. So, let’s take a look at the three lifecycle methods that are\nunique to the updating stage.\nshouldComponentUpdate",
		"➤➤ static getDerivedStateFromProps\n➤➤ shouldComponentUpdate\nThe Component Lifecycle ❘ 91\n➤➤ render\n➤➤ getSnapshotBeforeUpdate\n➤➤ componentDidUpdate\nThe getDerivedStateFromProps and render methods serve the same purposes in the updating\nstage as they do during the mounting stage. So, let’s take a look at the three lifecycle methods that are\nunique to the updating stage.\nshouldComponentUpdate\nThe default behavior of a React component is to update every time the state changes. There are times,\nhowever, when you might want to tell React that a change to the state doesn’t affect a component and\nso it’s not necessary to go through the updating process.\nThis method, when it’s present, must return either true or false. If you have a component that you\nknow will never need to be updated once it’s mounted, you can prevent it from updating by using\nthis code:\nshouldComponentUpdate(){\nreturn false;\n}\nMore often, the way shouldComponentUpdate is used is to compare the previous props and state",
		"so it’s not necessary to go through the updating process.\nThis method, when it’s present, must return either true or false. If you have a component that you\nknow will never need to be updated once it’s mounted, you can prevent it from updating by using\nthis code:\nshouldComponentUpdate(){\nreturn false;\n}\nMore often, the way shouldComponentUpdate is used is to compare the previous props and state\nwith the new props and state and to decide whether to update the component. This is possible\nbecause React passes the props and state that will be used for the upcoming rendering into\nshouldComponentUpdate. In Listing 4‑30, the value of a prop is compared with the value of that\nprop in the nextProp object to determine whether to re‑ render.\nLISTING 4- 30: Comparing previous and next props in shouldComponentUpdate\nclass ToDoItem extends Component {\nshouldComponentUpdate(nextProps, nextState) {\nreturn nextProps.isChecked != this.props.isChecked;\n}\n...\n}\ngetSnapshotBeforeUpdate",
		"shouldComponentUpdate. In Listing 4‑30, the value of a prop is compared with the value of that\nprop in the nextProp object to determine whether to re‑ render.\nLISTING 4- 30: Comparing previous and next props in shouldComponentUpdate\nclass ToDoItem extends Component {\nshouldComponentUpdate(nextProps, nextState) {\nreturn nextProps.isChecked != this.props.isChecked;\n}\n...\n}\ngetSnapshotBeforeUpdate\nThis lifecycle method happens right before the rendered output from the component is made active in\nthe DOM. The purpose of this method is to allow you to capture information about the state of the\nbrowser (or other output device) prior to it changing.\nAlthough it’s rare that you’ll have a need to use this lifecycle method, one example use for it\nis to maintain the scroll position of an element (such as a text box) between renders. If an\nupdate to the browser DOM would affect what the user is currently viewing in the browser,",
		"browser (or other output device) prior to it changing.\nAlthough it’s rare that you’ll have a need to use this lifecycle method, one example use for it\nis to maintain the scroll position of an element (such as a text box) between renders. If an\nupdate to the browser DOM would affect what the user is currently viewing in the browser,\ngetSnapshotBeforeUpdate can be used to find out the relevant information about the browser\nDOM so that it can be restored after the update happens.\n92 ❘ CHAPTER 4 All About Components\ncomponentDidUpdate\nThis method runs immediately after a component updates. It’s useful for performing network requests\nbased on new props passed to the component, or for performing operations that depend on the snap‑\nshot of the DOM created during the getSnapShotBeforeUpdate method.\nIf your component has a shouldComponentUpdate method that returns false, the component won’t\nupdate and this method won’t run.\nUnmounting",
		"based on new props passed to the component, or for performing operations that depend on the snap‑\nshot of the DOM created during the getSnapShotBeforeUpdate method.\nIf your component has a shouldComponentUpdate method that returns false, the component won’t\nupdate and this method won’t run.\nUnmounting\nThe process of removing a component from the DOM is called unmounting. Only one lifecycle\nmethod, componentWillUnmount, happens during this process.\ncomponentWillUnmount\nAs its name implies, componentWillUnmount is invoked right before a component is removed from\nthe DOM. If you need to do any cleanup in your application related to the component that\nwill be unmounted, this is the place to do it. Examples of tasks that are commonly done in the\ncomponentWillUnmount method include:\n➤➤ Stopping any network requests that are in progress.\n➤➤ Stopping timers.\n➤➤ Removing event listeners created in componentDidMount.\nError Handling",
		"the DOM. If you need to do any cleanup in your application related to the component that\nwill be unmounted, this is the place to do it. Examples of tasks that are commonly done in the\ncomponentWillUnmount method include:\n➤➤ Stopping any network requests that are in progress.\n➤➤ Stopping timers.\n➤➤ Removing event listeners created in componentDidMount.\nError Handling\nThe fourth type of lifecycle methods are the ones that only run when something goes\nwrong with your component. These lifecycle methods are getDerivedStateFromError and\ncomponentDidCatch. I’ll talk about both of these methods further in Chapter 13, but I want to\nintroduce them to you here.\ngetDerivedStateFromError\nIf an error occurs in a component’s descendant components, the component will run the\ngetDerivedStateFromError method. This lifecycle method receives the error that occurred and\nshould return an object that will be used to update the state.\ncomponentDidCatch",
		"introduce them to you here.\ngetDerivedStateFromError\nIf an error occurs in a component’s descendant components, the component will run the\ngetDerivedStateFromError method. This lifecycle method receives the error that occurred and\nshould return an object that will be used to update the state.\ncomponentDidCatch\nThe componentDidCatch lifecycle method runs after a descendant component throws an error.\nBecause componentDidCatch doesn’t run during the render phase of the lifecycle, it’s useful for per‑\nforming tasks such as error logging.\nImproving Performance and Avoiding Errors\nLifecycle methods can be used to improve the performance of your React application and to prevent\nerrors. In the following sections I’ll talk about a few tools and techniques you can use to make your\ncomponents the best they can be.\nThe Component Lifecycle ❘ 93\nAvoiding Memory Leaks\nTo demonstrate the use of several lifecycle methods, we can look at a common problem in React",
		"Lifecycle methods can be used to improve the performance of your React application and to prevent\nerrors. In the following sections I’ll talk about a few tools and techniques you can use to make your\ncomponents the best they can be.\nThe Component Lifecycle ❘ 93\nAvoiding Memory Leaks\nTo demonstrate the use of several lifecycle methods, we can look at a common problem in React\napplications— a memory leak—a nd how to fix it.\nA memory leak is a fault in a computer program where memory is allocated unnecessarily. This can\nhappen when a component is unmounted without removing timers or network requests involving the\ncomponent continue to happen after the unmounting.\nBecause a memory leak is a wasted use of resources, having a memory leak in your program can lead\nto reduced performance and unexpected behaviors. Memory leaks have a tendency to build up the\nlonger a program is running, and so you may not notice them at first but things can start to get weird",
		"component continue to happen after the unmounting.\nBecause a memory leak is a wasted use of resources, having a memory leak in your program can lead\nto reduced performance and unexpected behaviors. Memory leaks have a tendency to build up the\nlonger a program is running, and so you may not notice them at first but things can start to get weird\nas they accumulate. So, it’s best to take action to avoid them.\nTo avoid memory leaks, you should always make sure to properly clean up after your components\nusing the componentWillUnmount() method.\nListing 4‑31 shows a component that uses the JavaScript setInterval function to increment\na counter.\nLISTING 4- 31: A React component with a potential memory leak\nimport {Component} from 'react';\nclass Counter extends Component{\nconstructor(){\nsuper();\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount(){\nthis.setState({count: this.state.count + 1});\nconsole.log(this.state.count);\n}\ncomponentDidMount(){",
		"a counter.\nLISTING 4- 31: A React component with a potential memory leak\nimport {Component} from 'react';\nclass Counter extends Component{\nconstructor(){\nsuper();\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount(){\nthis.setState({count: this.state.count + 1});\nconsole.log(this.state.count);\n}\ncomponentDidMount(){\nthis.interval = setInterval(()=>{\nthis.incrementCount();\n},1000)\n}\nrender(){\nreturn (<p>The current count is: {this.state.count}.</p>);\n}\n}\nexport default Counter;\nThe component’s parent has a method, invoked using a button, that toggles whether the Counter\ncomponent is rendered or not, as shown in Listing 4‑32.\n94 ❘ CHAPTER 4 All About Components\nLISTING 4- 32: Toggling the rendering of the Counter\nimport {useState} from 'react';\nimport {Counter} from './Counter';\nfunction CounterController() {\nconst [displayCounter,setDisplayCounter] = useState(true);\nfunction toggleCounter(){\nsetDisplayCounter(!displayCounter);\n};\nreturn (",
		"component is rendered or not, as shown in Listing 4‑32.\n94 ❘ CHAPTER 4 All About Components\nLISTING 4- 32: Toggling the rendering of the Counter\nimport {useState} from 'react';\nimport {Counter} from './Counter';\nfunction CounterController() {\nconst [displayCounter,setDisplayCounter] = useState(true);\nfunction toggleCounter(){\nsetDisplayCounter(!displayCounter);\n};\nreturn (\n<div className=\"App\">\n{displayCounter ? <Counter /> : null}\n<button onClick={toggleCounter}>Toggle Count</button>\n</div>\n);\n}\nexport default CounterController;\nWhen the App component mounts, the Counter component will also mount and the timer will start\nrunning and incrementing the counter in the browser and in the console, as shown in Figure 4‑6.\nFIGURE 4- 6: Incrementing a counter\nThe Component Lifecycle ❘ 95\nWhen you click the Toggle Count button, the Counter component will disappear. However, the timer\ncreated by the setInterval function in the Counter component is never cleared, and so it continues",
		"running and incrementing the counter in the browser and in the console, as shown in Figure 4‑6.\nFIGURE 4- 6: Incrementing a counter\nThe Component Lifecycle ❘ 95\nWhen you click the Toggle Count button, the Counter component will disappear. However, the timer\ncreated by the setInterval function in the Counter component is never cleared, and so it continues\nto run after the component is removed.\nAfter the component is unmounted, React will log a message to the browser console to tell you that\nyou’re attempting to call setState on an unmounted component, as shown in Figure 4‑7.\nFIGURE 4- 7: The result of attempting to call setState on an unmounted component\nTrying to call setState on an unmounted component won’t do anything, since an unmounted com‑\nponent doesn’t have state. But, as React’s error message points out, it’s indicative of a memory leak.\nTo fix this problem, you can use the componentWillUnmount method in the Counter component",
		"FIGURE 4- 7: The result of attempting to call setState on an unmounted component\nTrying to call setState on an unmounted component won’t do anything, since an unmounted com‑\nponent doesn’t have state. But, as React’s error message points out, it’s indicative of a memory leak.\nTo fix this problem, you can use the componentWillUnmount method in the Counter component\nto call clearInterval, which will stop the timer before the Counter component is unmounted, as\nshown in Listing 4‑33.\n96 ❘ CHAPTER 4 All About Components\nLISTING 4- 33: Fixing a memory leak\nimport {Component} from 'react';\nclass Counter extends Component{\nconstructor(){\nsuper();\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount(){\nthis.setState({count: this.state.count + 1});\nconsole.log(this.state.count);\n}\ncomponentDidMount(){\nthis.interval = setInterval(()=>{\nthis.incrementCount();\n},1000)\n}\ncomponentWillUnmount(){\nclearInterval(this.interval);\n}\nrender(){",
		"class Counter extends Component{\nconstructor(){\nsuper();\nthis.state = {count: 0};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount(){\nthis.setState({count: this.state.count + 1});\nconsole.log(this.state.count);\n}\ncomponentDidMount(){\nthis.interval = setInterval(()=>{\nthis.incrementCount();\n},1000)\n}\ncomponentWillUnmount(){\nclearInterval(this.interval);\n}\nrender(){\nreturn (<p>The current count is: {this.state.count}.</p>);\n}\n}\nexport default Counter;\nNow Counter will be properly unmounted and the timer will be cleared when it’s removed from the\nbrowser. If you click the Toggle Counter button again, the counter will start over as you would expect\nit to, because a new timer will be created.\nReact.PureComponent\nIf you have a component that only accepts props and returns JSX, without modifying state or affect‑\ning anything outside of itself, that component is known as a “pure component.” It gets this name\nfrom the concept of a pure function.",
		"it to, because a new timer will be created.\nReact.PureComponent\nIf you have a component that only accepts props and returns JSX, without modifying state or affect‑\ning anything outside of itself, that component is known as a “pure component.” It gets this name\nfrom the concept of a pure function.\nA key characteristic of a pure function is that it always returns the same result when given the\nsame input.\nPure components are opportunities to improve the performance of your React user interface. Because\ntheir output only depends on props passed to them, a simple comparison of the previous props and\nthe new props will tell you whether the component will change when re‑ rendered.\nOne way to do this comparison is by using the shouldComponentUpdate lifecycle method along with\nReact’s shallowCompare function, as shown in Listing 4‑34.\nThe Component Lifecycle ❘ 97\nLISTING 4- 34: Using shouldComponentUpdate and shallowCompare\nimport React from 'react';",
		"the new props will tell you whether the component will change when re‑ rendered.\nOne way to do this comparison is by using the shouldComponentUpdate lifecycle method along with\nReact’s shallowCompare function, as shown in Listing 4‑34.\nThe Component Lifecycle ❘ 97\nLISTING 4- 34: Using shouldComponentUpdate and shallowCompare\nimport React from 'react';\nimport shallowCompare from 'react- addons- shallow- compare';\nclass ShallowCompare extends React.Component {\nshouldComponentUpdate(nextProps, nextState) {\nreturn shallowCompare(this, nextProps, nextState);\n}\nrender() {\nreturn <div>foo</div>;\n}\n}\nexport default ShallowCompare;\nAnother way to accomplish the same thing as the code in Listing 4‑34 is to write your class compo‑\nnent by extending React.PureComponent instead of React.Component, as shown in Listing 4‑35.\nLISTING 4- 35: Extending React.PureComponent\nimport React from 'react';\nclass PureComponentExample extends React.PureComponent {\nrender() {\nreturn <div>foo</div>;\n}\n}",
		"}\n}\nexport default ShallowCompare;\nAnother way to accomplish the same thing as the code in Listing 4‑34 is to write your class compo‑\nnent by extending React.PureComponent instead of React.Component, as shown in Listing 4‑35.\nLISTING 4- 35: Extending React.PureComponent\nimport React from 'react';\nclass PureComponentExample extends React.PureComponent {\nrender() {\nreturn <div>foo</div>;\n}\n}\nexport default PureComponentExample;\nReact.memo\nFunction components can also be pure components, but because they can’t use lifecycle methods or\nextend React.PureComponent, a different method is required to optimize them.\nReact.memo() is a higher‑ order function, meaning that it wraps around another function and adds\nits functionality to that function. When you wrap your function component in React.memo(), it per‑\nforms a comparison of the previous and next props and skip rendering if they’re the same.\nThe name of React.memo() refers to memoization, which is the caching of the results of a function",
		"React.memo() is a higher‑ order function, meaning that it wraps around another function and adds\nits functionality to that function. When you wrap your function component in React.memo(), it per‑\nforms a comparison of the previous and next props and skip rendering if they’re the same.\nThe name of React.memo() refers to memoization, which is the caching of the results of a function\nand using the cached result if the function has the same input as when the cache was created.\nListing 4‑36 shows how to use React.memo().\n98 ❘ CHAPTER 4 All About Components\nLISTING 4- 36: Using React.memo\nimport React from 'react';\nfunction ExampleComponent(props){\nreturn (<p>Hi, {props.firstName}. This component returns the same thing when\ngiven the same props.</p>);\n}\nexport default React.memo(ExampleComponent);\nReact.StrictMode\nReact.StrictMode is a component that you can wrap around your components to activate addi‑",
		"98 ❘ CHAPTER 4 All About Components\nLISTING 4- 36: Using React.memo\nimport React from 'react';\nfunction ExampleComponent(props){\nreturn (<p>Hi, {props.firstName}. This component returns the same thing when\ngiven the same props.</p>);\n}\nexport default React.memo(ExampleComponent);\nReact.StrictMode\nReact.StrictMode is a component that you can wrap around your components to activate addi‑\ntional checks of your code and produce warning messages that can be helpful during development.\nThe default Create React App application wraps the root component with a <StrictMode> element\nto turn on strict mode for the entire component tree. But, you can also just use <StrictMode> on\nparts of your application by applying it more selectively.\nRENDERING COMPONENTS\nThe end result of the mounting and updating stages of the lifecycle in React is a single rendered\ncomponent, called the root component. Remember that by “rendered” we mean that all of the JSX for",
		"to turn on strict mode for the entire component tree. But, you can also just use <StrictMode> on\nparts of your application by applying it more selectively.\nRENDERING COMPONENTS\nThe end result of the mounting and updating stages of the lifecycle in React is a single rendered\ncomponent, called the root component. Remember that by “rendered” we mean that all of the JSX for\nthe root component and its subcomponents has been parsed and the resulting tree of components has\nbeen created.\nOnce React’s work has been done and the tree of components has been created, it’s the job of a sepa‑\nrate node package to render the component in a way that it can be seen and used by people.\nRendering with ReactDOM\nThe most common place for a tree of React elements to end up being used is in a web browser. The\nlibrary responsible for converting a React component into HTML and inserting it into the DOM and\nthen managing updates to the DOM is ReactDOM.",
		"rate node package to render the component in a way that it can be seen and used by people.\nRendering with ReactDOM\nThe most common place for a tree of React elements to end up being used is in a web browser. The\nlibrary responsible for converting a React component into HTML and inserting it into the DOM and\nthen managing updates to the DOM is ReactDOM.\nReactDOM includes several methods that you can use to interact with the DOM, but the one that’s\nabsolutely necessary for every React application designed for the browser to use is ReactDOM.render.\nIf you look at the index.js file at the root of the src folder in a React project created using Cre‑\nate React App, you’ll see where ReactDOM.render is invoked and where a single React element\n(which may be optionally wrapped with a React.StrictMode component) is passed in, as shown in\nListing 4‑37.\nRendering Components ❘ 99\nLISTING 4- 37: ReactDOM.render renders a single element in the DOM\nReactDOM.render(\n<React.StrictMode>\n<App/>",
		"ate React App, you’ll see where ReactDOM.render is invoked and where a single React element\n(which may be optionally wrapped with a React.StrictMode component) is passed in, as shown in\nListing 4‑37.\nRendering Components ❘ 99\nLISTING 4- 37: ReactDOM.render renders a single element in the DOM\nReactDOM.render(\n<React.StrictMode>\n<App/>\n</React.StrictMode>,\ndocument.getElementById('root')\n);\nThe beauty of ReactDOM.render is that it performs an incredible number of calculations and DOM\nmanipulations, controls the timing of DOM updates, manages the virtual DOM, and more—b ut as\nfar as you, the programmer, are concerned, it’s a black box. All you need to do is feed it a valid React\ncomponent and a DOM node where you want that component to be rendered and ReactDOM.render\ntakes it from there.\nIf you examine the code in Listing 4‑37, you’ll see that, in this case, we’re telling ReactDOM.render\nto render the App component (you can ignore the StrictMode wrapper) inside the HTML element",
		"component and a DOM node where you want that component to be rendered and ReactDOM.render\ntakes it from there.\nIf you examine the code in Listing 4‑37, you’ll see that, in this case, we’re telling ReactDOM.render\nto render the App component (you can ignore the StrictMode wrapper) inside the HTML element\nnode that has an id attribute with a value of root.\nEvery React application designed for rendering to web browsers will have a single HTML file that\nimports the React and ReactDOM libraries, plus all the rest of the JavaScript that the application\nneeds. In the case of a Create React App application, this file is public/index.html. Listing 4‑38\nshows a version of Create React App’s index.html file (with the HTML comments and unimportant\nmeta tags removed to save space). When a JavaScript application lives within a single HTML file like\nthis, we call it a single page app.\nLISTING 4- 38: Create React App’s index.html file\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf- 8\" />",
		"shows a version of Create React App’s index.html file (with the HTML comments and unimportant\nmeta tags removed to save space). When a JavaScript application lives within a single HTML file like\nthis, we call it a single page app.\nLISTING 4- 38: Create React App’s index.html file\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf- 8\" />\n<link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1\" />\n...\n<title>React App</title>\n</head>\n<body>\n<noscript>You need to enable JavaScript to run this app.</noscript>\n<div id=\"root\"></div>\n...\n</body>\n</html>\n100 ❘ CHAPTER 4 All About Components\nVirtual DOM\nAfter the root component has been mounted, the job of ReactDOM.render is to monitor changes\nto the rendered element coming in from React and figure out the most efficient way to update the\nbrowser DOM to match the newly rendered application through a process called reconciliation.",
		"<div id=\"root\"></div>\n...\n</body>\n</html>\n100 ❘ CHAPTER 4 All About Components\nVirtual DOM\nAfter the root component has been mounted, the job of ReactDOM.render is to monitor changes\nto the rendered element coming in from React and figure out the most efficient way to update the\nbrowser DOM to match the newly rendered application through a process called reconciliation.\nAs a programmer, you can think of rendering a React UI as a continual process of replacing a previ‑\nous tree of elements with a new one: and this is in fact what React is doing. But, once a new tree of\nelements gets to ReactDOM.render’s reconciliation process, it looks for the minimal set of changes\nand just makes those.\nFor example, compare the element shown in Listing 4‑39 with the element in Listing 4‑40. The\nsecond listing could be the <nav> element that results from the user clicking the “About Us” link.\nLISTING 4- 39: The initial element tree\n<nav>\n<ul>\n<li><a href=\"/\" className=\"active navlink\">Home</a></li>",
		"and just makes those.\nFor example, compare the element shown in Listing 4‑39 with the element in Listing 4‑40. The\nsecond listing could be the <nav> element that results from the user clicking the “About Us” link.\nLISTING 4- 39: The initial element tree\n<nav>\n<ul>\n<li><a href=\"/\" className=\"active navlink\">Home</a></li>\n<li><a href=\"/aboutus\" className=\"navlink\">About Us</a></li>\n</ul>\n</nav>\nLISTING 4- 40: The element tree after the user clicks a link\n<nav>\n<ul>\n<li><a href=\"/\" className=\"navlink\">Home</a></li>\n<li><a href=\"/aboutus\" className=\"active navlink\">About Us</a></li>\n</ul>\n</nav>\nThe only difference between these two element trees is which one has the active class. ReactDOM\n.render will find this difference during reconciliation and will simply remove active from the first\nlink’s class element and add it to the second link’s class element without modifying anything else.\nThis process of rendering the new UI in memory and then comparing it with the previous UI and fig‑",
		"The only difference between these two element trees is which one has the active class. ReactDOM\n.render will find this difference during reconciliation and will simply remove active from the first\nlink’s class element and add it to the second link’s class element without modifying anything else.\nThis process of rendering the new UI in memory and then comparing it with the previous UI and fig‑\nuring out the minimal set of changes that can be applied to the browser DOM to make the previous\nstate match the new one is what we call the Virtual DOM.\nOne important thing to know about how reconciliation works is that updates to the browser DOM\nwon’t always happen in the same order as when they were rendered in the Virtual DOM. This is\nbecause ReactDOM.render may batch changes if it creates more efficiency.\nOnce again, the Virtual DOM’s inner workings happen without your intervention, and you won’t\nneed to know exactly what’s happening in the reconciliation process (except perhaps in very rare",
		"won’t always happen in the same order as when they were rendered in the Virtual DOM. This is\nbecause ReactDOM.render may batch changes if it creates more efficiency.\nOnce again, the Virtual DOM’s inner workings happen without your intervention, and you won’t\nneed to know exactly what’s happening in the reconciliation process (except perhaps in very rare\ncases). Knowing that it exists is important, however.\nRendering Components ❘ 101\nIf you’d like to learn more about how reconciliation works, you can read about it in more detail at\nhttps://reactjs.org/docs/reconciliation.html.\nOther Rendering Engines\nReact doesn’t care whether you render the elements that it outputs in a web browser, on a billboard,\nas a mobile app, as text in a terminal application, or in any other user interface device.\nAlthough ReactDOM is the most commonly used rendering engine, and thus the one that most books\nand tutorials on React focus on, other rendering engines can and do exist. The following sections",
		"React doesn’t care whether you render the elements that it outputs in a web browser, on a billboard,\nas a mobile app, as text in a terminal application, or in any other user interface device.\nAlthough ReactDOM is the most commonly used rendering engine, and thus the one that most books\nand tutorials on React focus on, other rendering engines can and do exist. The following sections\nexplore a few of the most common ones.\nReact Native\nReact Native converts React elements into native mobile applications. React Native has a set of built‑\nin elements that, when rendered, result in the creation of commonly used native app components such\nas View, Text, ScrollView, and Image.\nAfter React renders a tree of React Native elements, the React Native rendering engine compiles these\nelements into platform‑ specific code for different mobile operating systems (such as Android or iOS).\nListing 4‑41 shows a “Hello, World” component written with React Native.",
		"as View, Text, ScrollView, and Image.\nAfter React renders a tree of React Native elements, the React Native rendering engine compiles these\nelements into platform‑ specific code for different mobile operating systems (such as Android or iOS).\nListing 4‑41 shows a “Hello, World” component written with React Native.\nLISTING 4- 41: Your first React Native component\nimport React from 'react';\nimport { Text, View } from 'react-n ative';\nconst YourApp = () => {\nreturn (\n<View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n<Text>\nHello, World!\n</Text>\n</View>\n);\n}\nexport default YourApp;\nEverything here is standard React and JavaScript, and everything you’re learning about React also\napplies to React Native. The only difference is that React Native adds a library of components that\nare relevant to native mobile apps, and React Native components are compiled into native mobile\napps rather than for web browsers.",
		"<Text>\nHello, World!\n</Text>\n</View>\n);\n}\nexport default YourApp;\nEverything here is standard React and JavaScript, and everything you’re learning about React also\napplies to React Native. The only difference is that React Native adds a library of components that\nare relevant to native mobile apps, and React Native components are compiled into native mobile\napps rather than for web browsers.\nAfter you write your React Native code, it needs to be compiled to generate platform‑ specific code\nthat you can deploy on mobile devices or to app stores. You can compile React Native components\nusing a Node.js program called Expo CLI (CLI stands for “command‑l ine interface”), or by using the\nReact Native CLI.\n102 ❘ CHAPTER 4 All About Components\nReact Native CLI requires you to have the appropriate native app development tools installed (either\nXCode for iOS apps, or Android Studio for Android apps). Expo CLI compiles your apps and deploys\nthem inside a wrapper Expo mobile app on mobile phones.",
		"React Native CLI.\n102 ❘ CHAPTER 4 All About Components\nReact Native CLI requires you to have the appropriate native app development tools installed (either\nXCode for iOS apps, or Android Studio for Android apps). Expo CLI compiles your apps and deploys\nthem inside a wrapper Expo mobile app on mobile phones.\nWhile React Native CLI is more familiar to developers who already have experience with mobile app\ndevelopment, Expo is great because it’s so easy to use and will have you writing functioning mobile\napps very quickly.\nFigure 4‑8 shows the “Hello, World!” app from Listing 4‑41 running on an iPhone.\nFIGURE 4- 8: Hello, React Native\nReactDOMServer\nReactDOMServer renders React components and returns an HTML string. It can be used on a web\nserver to generate the initial HTML for a React application, which can then be served to web brows‑\ners to speed up the initial loading of the user interface.\nComponent Terminology ❘ 103",
		"FIGURE 4- 8: Hello, React Native\nReactDOMServer\nReactDOMServer renders React components and returns an HTML string. It can be used on a web\nserver to generate the initial HTML for a React application, which can then be served to web brows‑\ners to speed up the initial loading of the user interface.\nComponent Terminology ❘ 103\nOnce the initial HTML for the application is rendered on the server and served to a web browser, the\nregular ReactDOM renderer takes over and handles updates. This technique is referred to as “Isomor‑\nphic React” or “Universal React.”\nReact Konsul\nReact Konsul renders React components to the browser console. It includes a handful of built‑ in\ncomponents, including container, text, image, button, and group, that allow developers to create\ninteractive views inside the JavaScript console of a browser.\nThe use cases for React Konsul are rather limited, but it can render images, interactive buttons, and",
		"React Konsul\nReact Konsul renders React components to the browser console. It includes a handful of built‑ in\ncomponents, including container, text, image, button, and group, that allow developers to create\ninteractive views inside the JavaScript console of a browser.\nThe use cases for React Konsul are rather limited, but it can render images, interactive buttons, and\nstyled text instead of the simple plain text console log messages that JavaScript outputs by default.\nreact- pdf\nWith react‑ pdf, you can use React components to render PDF files. The built‑i n components for\nassembling PDFs include Document, Page, View, and Text. Once you’ve composed your PDF docu‑\nment using these components, you can render them in the browser using ReactDOM.render, or you\ncan save them as PDF documents using ReactPDF.render.\nCOMPONENT TERMINOLOGY\nComponents and elements are the building blocks of React. If you understand components and",
		"assembling PDFs include Document, Page, View, and Text. Once you’ve composed your PDF docu‑\nment using these components, you can render them in the browser using ReactDOM.render, or you\ncan save them as PDF documents using ReactPDF.render.\nCOMPONENT TERMINOLOGY\nComponents and elements are the building blocks of React. If you understand components and\nJavaScript, you’re more than halfway to being a React developer. React components come with a lot\nof terminology, however. To help you keep everything straight, here’s a handy overview of some of the\nmost commonly used lingo in React component development:\n➤➤ Class component: A class component is a React component created by extending React\n.Component or React.PureComponent.\n➤➤ Function component: A function component is a JavaScript function that returns JSX code.\n➤➤ State: State is the data in a React user interface that determines when updates will happen.",
		"most commonly used lingo in React component development:\n➤➤ Class component: A class component is a React component created by extending React\n.Component or React.PureComponent.\n➤➤ Function component: A function component is a JavaScript function that returns JSX code.\n➤➤ State: State is the data in a React user interface that determines when updates will happen.\n➤➤ Props: Props are the data that’s passed from a parent component to a child component. In\nJSX, props are created using attributes (in the name=value format).\n➤➤ Stateful component: A stateful component is a component that has internal state, stored in\neither the state object (in the case of class components) or created using hooks (in the case of\nfunction components).\n➤➤ Stateless component: A stateless component is one that doesn’t have its own internal\nstate. Stateless components are also known as “dumb” components or “presentational”\ncomponents.",
		"➤➤ Stateful component: A stateful component is a component that has internal state, stored in\neither the state object (in the case of class components) or created using hooks (in the case of\nfunction components).\n➤➤ Stateless component: A stateless component is one that doesn’t have its own internal\nstate. Stateless components are also known as “dumb” components or “presentational”\ncomponents.\n➤➤ Pure component: A pure component is one that always returns the same output when given\nthe same input.\n➤➤ Root component: The root component is the single component that contains all the other\ncomponents in your React application. Rendering the root component (using ReactDOM)\ncauses the entire component tree to be rendered.\n104 ❘ CHAPTER 4 All About Components\n➤➤ Parent component/child component: As in the HTML DOM, the relationship between com‑\nponents in a React component tree is described using the terms parent and child.",
		"components in your React application. Rendering the root component (using ReactDOM)\ncauses the entire component tree to be rendered.\n104 ❘ CHAPTER 4 All About Components\n➤➤ Parent component/child component: As in the HTML DOM, the relationship between com‑\nponents in a React component tree is described using the terms parent and child.\n➤➤ Component lifecycle: The component lifecycle is the progression of events and methods\nthat happen during the life of a React component. It starts with mounting and ends with\nunmounting. In between mounting and unmounting, the update lifecycle methods happen.\nSUMMARY\nReact components are the building blocks of React. In this chapter, you learned:\n➤➤ The two methods for creating React components: class and function.\n➤➤ How React components return React elements.\n➤➤ How to use React’s built‑i n components.\n➤➤ How to pass data between components by using JSX attributes.",
		"unmounting. In between mounting and unmounting, the update lifecycle methods happen.\nSUMMARY\nReact components are the building blocks of React. In this chapter, you learned:\n➤➤ The two methods for creating React components: class and function.\n➤➤ How React components return React elements.\n➤➤ How to use React’s built‑i n components.\n➤➤ How to pass data between components by using JSX attributes.\n➤➤ How data passed using attributes in React elements becomes props in child components.\n➤➤ How to manage state in a class component.\n➤➤ How to manage state in a function component.\n➤➤ What lifecycle methods are and how to use them in a class component.\n➤➤ How to prevent memory leaks in React components.\n➤➤ How to use PureComponent and React.memo.\n➤➤ How to render React components using ReactDOM.\nIn the next chapter, you’ll learn how to use in‑ browser tools to inspect and test React components.\nOnward!\n5\nReact DevTools",
		"➤➤ How to manage state in a function component.\n➤➤ What lifecycle methods are and how to use them in a class component.\n➤➤ How to prevent memory leaks in React components.\n➤➤ How to use PureComponent and React.memo.\n➤➤ How to render React components using ReactDOM.\nIn the next chapter, you’ll learn how to use in‑ browser tools to inspect and test React components.\nOnward!\n5\nReact DevTools\nReact applications can get rather large and complex. With a large tree of components and sub‑\ncomponents and all of their props and state and events, having a way to easily see what’s going\non inside each component, as well as to be able to filter out the noise and focus on just the\ncomponents that you’re interested in, becomes essential to debugging problems. React DevTools\ncan also show you where performance issues exist in your code. In this chapter, you’ll learn:\n➤➤ How to install React DevTools.\n➤➤ How to inspect components with React DevTools.\n➤➤ How to search for components in React DevTools.",
		"components that you’re interested in, becomes essential to debugging problems. React DevTools\ncan also show you where performance issues exist in your code. In this chapter, you’ll learn:\n➤➤ How to install React DevTools.\n➤➤ How to inspect components with React DevTools.\n➤➤ How to search for components in React DevTools.\n➤➤ Filtering and selecting components in React DevTools.\nINSTALLATION AND GETTING STARTED\nIn this book’s Introduction, you installed React Developer Tools (also known as React Dev‑\nTools) and I briefly covered how it works. If you haven’t yet installed React DevTools, follow\nthe instructions in the Introduction to install it in Google Chrome or Mozilla Firefox, then\nreturn to this chapter.\nBefore we can experiment with any of the React DevTools features, we first need an app to\nwork with. I’ve created the beginnings of a bookstore app, as shown in Figure 5‑1, which you\ncan download and use for working with the React DevTools.",
		"the instructions in the Introduction to install it in Google Chrome or Mozilla Firefox, then\nreturn to this chapter.\nBefore we can experiment with any of the React DevTools features, we first need an app to\nwork with. I’ve created the beginnings of a bookstore app, as shown in Figure 5‑1, which you\ncan download and use for working with the React DevTools.\nReact Bookstore is a simple store and shopping cart application that displays a randomized grid\nof books, using data from an external file. Each book in React Bookstore has an Add To Cart\nbutton underneath it that will add the book to the cart, and that toggles to a button for remov‑\ning the book from the cart.\nReact Bookstore’s shopping cart simply displays a list of the books that have been added to the\nshopping cart and calculates a total price. The React Bookstore is part of my GitHub repository\nfor this book.\n106 ❘ CHAPTER 5 React Devtools\nFIGURE 5- 1: The React Bookstore sample app",
		"ing the book from the cart.\nReact Bookstore’s shopping cart simply displays a list of the books that have been added to the\nshopping cart and calculates a total price. The React Bookstore is part of my GitHub repository\nfor this book.\n106 ❘ CHAPTER 5 React Devtools\nFIGURE 5- 1: The React Bookstore sample app\nIf you haven’t already downloaded and installed the repository, use the following steps to do so:\n1. Open the integrated terminal in Visual Studio Code.\n2. Type the following command to check whether you have the Git version control system\ninstalled on your computer:\ngit - - version\nIf Git is installed, the terminal will respond with a version number, and you can skip to\nstep 3. If it’s not installed, you can download the latest version for your operating system\nfrom https://git- scm.com/downloads.\n3. You may need to close and re‑o pen the VS Code terminal before you’ll be able to do this\nstep. Make sure that the current working directory in VS Code’s terminal is where you want",
		"step 3. If it’s not installed, you can download the latest version for your operating system\nfrom https://git- scm.com/downloads.\n3. You may need to close and re‑o pen the VS Code terminal before you’ll be able to do this\nstep. Make sure that the current working directory in VS Code’s terminal is where you want\nto place the example files. If it’s not, you can either right‑ click a directory in the VS Code\nExplorer pane and select Open in Integrated Terminal or you can use the UNIX cd command\nto change the directory from within the terminal.\nInspecting Components ❘ 107\n4. Clone my repository by entering this command into the terminal:\ngit clone https://github.com/chrisminnick/react- js- foundations\nAfter a moment, all of the files will be downloaded.\nNOTE If you have any issues using Git to clone the example code repository,\nyou can simply use a browser to go to the repository URL and download it as a\n.zip file by clicking the Code link.",
		"4. Clone my repository by entering this command into the terminal:\ngit clone https://github.com/chrisminnick/react- js- foundations\nAfter a moment, all of the files will be downloaded.\nNOTE If you have any issues using Git to clone the example code repository,\nyou can simply use a browser to go to the repository URL and download it as a\n.zip file by clicking the Code link.\n5. Install and start up the React Bookstore example:\ncd react- js- foundations/react- book- store\nnpm install\nnpm start\nThe React Bookstore example is a work in progress that you can use throughout this book to try out\nnew things you learn about React. The application shows a randomized list of 100 great books, and\nyou can add and remove the books from a shopping cart.\nIt’s obviously a simple app which is as yet unfinished, but it’s a good starting point for learning about\nReact and React DevTools.\nNOTE The React Bookstore is open source, and you can do whatever you want",
		"new things you learn about React. The application shows a randomized list of 100 great books, and\nyou can add and remove the books from a shopping cart.\nIt’s obviously a simple app which is as yet unfinished, but it’s a good starting point for learning about\nReact and React DevTools.\nNOTE The React Bookstore is open source, and you can do whatever you want\nwith it. I make no claims as to its suitability for anything more than learning\nReact.\nINSPECTING COMPONENTS\nThe most common reason to use React DevTools is to inspect your React component tree. Follow\nthese steps to get started with the DevTools Components window:\n1. Start up the react- book-store app if it isn’t already running.\n2. Open the Developer Tools in your browser. If the current browser window contains a React\napp, you’ll see the React DevTools Components and Profiler tabs, as shown in Figure 5‑2.\n3. Click the Components tab and you’ll see the list of components that make up the React\nBookstore, as shown in Figure 5‑3.",
		"1. Start up the react- book-store app if it isn’t already running.\n2. Open the Developer Tools in your browser. If the current browser window contains a React\napp, you’ll see the React DevTools Components and Profiler tabs, as shown in Figure 5‑2.\n3. Click the Components tab and you’ll see the list of components that make up the React\nBookstore, as shown in Figure 5‑3.\n4. Click the components on the left to inspect each one.\nInspecting the components in a React app will show you the relationship between the components,\nany hooks or state being using in the component, the data and functions that were passed to the com‑\nponent, and the file that contains the source code for each component.\n108 ❘ CHAPTER 5 React Devtools\nFIGURE 5- 2: The Chrome Developer Tools with React DevTools installed\nWorking with the Component Tree\nThe left side of the Components window shows a nested list containing each of the components",
		"any hooks or state being using in the component, the data and functions that were passed to the com‑\nponent, and the file that contains the source code for each component.\n108 ❘ CHAPTER 5 React Devtools\nFIGURE 5- 2: The Chrome Developer Tools with React DevTools installed\nWorking with the Component Tree\nThe left side of the Components window shows a nested list containing each of the components\nthat make up the current view in the browser. In the React Bookstore app, this includes the root\ncomponent, App, the ProductList component, a long list of Product components, and the Cart\ncomponent.\nEach parent component has an arrow next to it, which you can click to expand or collapse the chil‑\ndren within that component. For example, if you collapse the ProductList, the outline will look like\nFigure 5‑4.\nWith ProductList collapsed, you can see that the React Bookstore is made up of two main sections:",
		"component.\nEach parent component has an arrow next to it, which you can click to expand or collapse the chil‑\ndren within that component. For example, if you collapse the ProductList, the outline will look like\nFigure 5‑4.\nWith ProductList collapsed, you can see that the React Bookstore is made up of two main sections:\nthe list of products, and the cart. The list of products includes all of the products being viewed (which\nis currently all of them) and the cart contains any items that are currently in your shopping cart.\nInspecting Components ❘ 109\nFIGURE 5- 3: The React DevTools Components tab\nFIGURE 5- 4: The component tree with ProductList collapsed\n110 ❘ CHAPTER 5 React Devtools\nIf you click the Add to Cart button under one of the products, you’ll see that in the browser window,\nthe title and price of that product are added to the cart area of the screen, and in the Component win‑\ndow of React DevTools, a CartItem component is added as a child of Cart. If you click Add To Cart",
		"FIGURE 5- 4: The component tree with ProductList collapsed\n110 ❘ CHAPTER 5 React Devtools\nIf you click the Add to Cart button under one of the products, you’ll see that in the browser window,\nthe title and price of that product are added to the cart area of the screen, and in the Component win‑\ndow of React DevTools, a CartItem component is added as a child of Cart. If you click Add To Cart\nfor several products, several CartItem children will be created, as shown in Figure 5‑5.\nFIGURE 5- 5: Creating new CartItem children\nSearching for Components\nThere are two ways to search for components. One is using the Search input box. The other is using\nregular expressions.\nUsing the Search Input Box\nIn a large tree of components, the Search input box above the component tree view can be very help‑\nful for locating specific components. The search box can accept either a string or a regular expression\nthat will be matched against the component names.\nUsing Regular Expressions",
		"regular expressions.\nUsing the Search Input Box\nIn a large tree of components, the Search input box above the component tree view can be very help‑\nful for locating specific components. The search box can accept either a string or a regular expression\nthat will be matched against the component names.\nUsing Regular Expressions\nRegular expressions are a way to search for text based on a pattern. To distinguish regular expres‑\nsions from ordinary text searches, React DevTools uses slashes before and after the expression. For\nexample, if you wanted to find all of the components that contain the word “Product,” you could do\nso using the following regular expression:\n/Product/\nRight now, however, this regular expression will highlight the exact same list of components as if you\njust searched for the word “product” without the slashes before and after it.\nWhere regular expressions come in handy is for more complex searches than can be done with ordi‑",
		"so using the following regular expression:\n/Product/\nRight now, however, this regular expression will highlight the exact same list of components as if you\njust searched for the word “product” without the slashes before and after it.\nWhere regular expressions come in handy is for more complex searches than can be done with ordi‑\nnary text searches. For example, if you wanted to select all of the Product components, but not the\nProductList component, you could use a regular expression such as this one:\n/Product$/\nInspecting Components ❘ 111\nThe dollar sign at the end indicates that you’re only looking for component names that end with the\nword “Product.”\nIf you want to find components that match the name Cart or the name ProductList, you can use\nthe OR operator, which is a vertical bar in regular expressions, like this:\n/(Cart$|ProductList)/\nIn addition to the “ends with” operator ($), regular expressions also have a “begins with” operator,",
		"word “Product.”\nIf you want to find components that match the name Cart or the name ProductList, you can use\nthe OR operator, which is a vertical bar in regular expressions, like this:\n/(Cart$|ProductList)/\nIn addition to the “ends with” operator ($), regular expressions also have a “begins with” operator,\nwhich is the caret (^). For example, the following regular expression search will find any component\nwith a “c” in its name:\n/c/\nThe result of running the preceding regular expression search is shown in Figure 5‑6.\nFIGURE 5- 6: Searching for components containing “c”\nIf you add a ^ to the beginning of the search term, it will only show the Cart and CartItem compo‑\nnents, as shown in Figure 5‑7.\n112 ❘ CHAPTER 5 React Devtools\nFIGURE 5- 7: Searching for components starting with “c”\nI’ve only touched on a few of the capabilities of regular expressions here. For a more complete list\nof the capabilities of regular expressions and more examples of how to use them, visit the Mozilla",
		"nents, as shown in Figure 5‑7.\n112 ❘ CHAPTER 5 React Devtools\nFIGURE 5- 7: Searching for components starting with “c”\nI’ve only touched on a few of the capabilities of regular expressions here. For a more complete list\nof the capabilities of regular expressions and more examples of how to use them, visit the Mozilla\nDeveloper Network Regular Expressions Cheatsheet at https://developer.mozilla.org/en- US/\ndocs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet.\nFiltering Components\nWhen you first open the React DevTools, you’re actually only seeing a partial list of the React compo‑\nnents that make up your user interface. Although all of the custom components that make up what’s\ncurrently on the screen are showing, the built‑ in HTML components (which React DevTools refers to\nas “host components”) are hidden.\nTo reveal all of the host components as well as the custom components, you can adjust the filtering in\nthe View Settings.",
		"nents that make up your user interface. Although all of the custom components that make up what’s\ncurrently on the screen are showing, the built‑ in HTML components (which React DevTools refers to\nas “host components”) are hidden.\nTo reveal all of the host components as well as the custom components, you can adjust the filtering in\nthe View Settings.\nClick the gear icon in the upper right of the Component window’s tree view, and the settings dialog\nbox will open, as shown in Figure 5‑8.\nInspecting Components ❘ 113\nFIGURE 5- 8: React DevTools’ View Settings\nThe Components tab in the settings dialog will be open, and you’ll see a checkbox for expanding the\ntree of components by default. Underneath that is an area where you can define filters that will be\napplied to the component tree.\nThe default component tree filter hides all host components. If you disable this filter, you’ll see why\nyou may also want to uncheck the “Expand component tree by default” checkbox and why it’s so",
		"tree of components by default. Underneath that is an area where you can define filters that will be\napplied to the component tree.\nThe default component tree filter hides all host components. If you disable this filter, you’ll see why\nyou may also want to uncheck the “Expand component tree by default” checkbox and why it’s so\nimportant for React DevTools to have a Search feature— when you include the host components, the\nlist of components becomes very long (as shown in Figure 5‑9).\nFIGURE 5- 9: The component tree view with the default filter disabled\n114 ❘ CHAPTER 5 React Devtools\nHIGHER-O RDER COMPONENTS\nIn functional programming, a higher‑ order function is a function that takes another\nfunction as an argument and whose return value is a function. In React, a higher‑\norder component is one that takes a component as input and returns another\ncomponent.\nThe reason for writing a component that accepts a component and returns a com‑",
		"114 ❘ CHAPTER 5 React Devtools\nHIGHER-O RDER COMPONENTS\nIn functional programming, a higher‑ order function is a function that takes another\nfunction as an argument and whose return value is a function. In React, a higher‑\norder component is one that takes a component as input and returns another\ncomponent.\nThe reason for writing a component that accepts a component and returns a com‑\nponent is that it’s a convenient way to add functionality to components using the\nconcept of composition.\nOften in React, we refer to the component that is passed to a higher‑ order compo‑\nnent as the “wrapped” component. If you think of a higher‑ order component as like\nwrapping paper, you’ll understand the idea. When you wrap a box with gift wrap‑\nping paper, the result is a new thing that we might call a “present,” which includes\nboth the box and the wrapping. We can express the wrapping of a box like this in\nJavaScript code:\nconst Present = wrappingPaper(Box);",
		"nent as the “wrapped” component. If you think of a higher‑ order component as like\nwrapping paper, you’ll understand the idea. When you wrap a box with gift wrap‑\nping paper, the result is a new thing that we might call a “present,” which includes\nboth the box and the wrapping. We can express the wrapping of a box like this in\nJavaScript code:\nconst Present = wrappingPaper(Box);\nHigher‑ order components are not a feature of React, but rather a pattern for\nusing React.\nYou’ll see more examples of higher‑ order components in future chapters, including\nin Chapter 12, where we’ll talk about how to give a component the ability to have\nReact applications respond to the browser URL with React Router.\nThe filter feature in the settings dialog allows you to create filters based on the location, name, type,\nand whether components are higher‑ order components.\nSelecting Components\nIn addition to finding components using the Search input box, you can also select components just by",
		"React applications respond to the browser URL with React Router.\nThe filter feature in the settings dialog allows you to create filters based on the location, name, type,\nand whether components are higher‑ order components.\nSelecting Components\nIn addition to finding components using the Search input box, you can also select components just by\nclicking on them in the tree view, or by using the Select tool, which is shown in Figure 5‑10.\nNo matter how you select a component, once you do, the inner workings of that component will\nshow up in the pane on the right side of the Components window. If multiple components are\nselected, the details for the first selected component will be shown.\nEDITING COMPONENT DATA IN DEVTOOLS\nThe right side of the Components window in React DevTools displays information about the cur‑\nrently selected component, including its state and props data, hooks used by the component,",
		"show up in the pane on the right side of the Components window. If multiple components are\nselected, the details for the first selected component will be shown.\nEDITING COMPONENT DATA IN DEVTOOLS\nThe right side of the Components window in React DevTools displays information about the cur‑\nrently selected component, including its state and props data, hooks used by the component,\nthe ancestors of the component, and the location of the component’s source code, as shown in\nFigure 5‑11.\nEditing Component Data in DevTools ❘ 115\nFIGURE 5- 10: The React DevTools Select tool\nFIGURE 5- 11: Viewing component details\n116 ❘ CHAPTER 5 React Devtools\nThe hooks, state, and props data in this pane can all be edited. Follow these steps to see how edit‑\ning component data in React DevTools can be helpful for quickly testing React applications in\nthe browser:\n1. If it’s not already running, start up the React Bookstore demo app and open it in\nyour browser.",
		"FIGURE 5- 11: Viewing component details\n116 ❘ CHAPTER 5 React Devtools\nThe hooks, state, and props data in this pane can all be edited. Follow these steps to see how edit‑\ning component data in React DevTools can be helpful for quickly testing React applications in\nthe browser:\n1. If it’s not already running, start up the React Bookstore demo app and open it in\nyour browser.\n2. Open the Developer Tools window in your browser and click the Components tab. You’ll see\na list of the components that make up the React Bookstore.\n3. Click the root component (App) in the component tree view. App’s props and hooks will\nshow up on the right side of the DevTools window.\n4. Notice that App currently has two state hooks. The first one displayed is the state of the cart.\nThe second one is the state of the products list.\nHOOKS AND STATE\nBecause of the way React handles multiple state hooks in a function, the only way to",
		"3. Click the root component (App) in the component tree view. App’s props and hooks will\nshow up on the right side of the DevTools window.\n4. Notice that App currently has two state hooks. The first one displayed is the state of the cart.\nThe second one is the state of the products list.\nHOOKS AND STATE\nBecause of the way React handles multiple state hooks in a function, the only way to\ntell the two hooks in React Bookstore apart is by the order in which they appear and\nthe data within them. In a simple application, this isn’t a problem. In larger applica‑\ntions, better ways to organize the state are required.\nOne way to improve the structure of the state data in React Bookstore is by emulat‑\ning how state works in class components and using a single state object. For exam‑\nple, the App component currently contains two calls to useState— one to create the\nproducts state, and one to create the inCart state. To combine these into a single\ntree, you can use the following statement:",
		"One way to improve the structure of the state data in React Bookstore is by emulat‑\ning how state works in class components and using a single state object. For exam‑\nple, the App component currently contains two calls to useState— one to create the\nproducts state, and one to create the inCart state. To combine these into a single\ntree, you can use the following statement:\nconst [state,setState] = useState({products:[],inCart:[]});\nWith this done, you can access state.products and state.inCart, and you can\nmodify your state data by calling the setState function.\n5. Expand the first state hook. When the React Bookstore first loads, it just contains an\nempty array.\n6. In the browser window, click the Add to Cart button underneath one of the products to add\nthe product to the cart.\n7. Notice that a new item is added to the first state array.\n8. Double‑ click the value of the item you just added to the inCart state. It will become editable.",
		"5. Expand the first state hook. When the React Bookstore first loads, it just contains an\nempty array.\n6. In the browser window, click the Add to Cart button underneath one of the products to add\nthe product to the cart.\n7. Notice that a new item is added to the first state array.\n8. Double‑ click the value of the item you just added to the inCart state. It will become editable.\n9. Change the number to any number between 0 and 99. The product corresponding to that\nnumber will appear in the cart.\n10. Try using a number that’s higher than 99 or lower than 0. The result will be an error, as\nshown in Figure 5‑12.\nEditing Component Data in DevTools ❘ 117\nFIGURE 5- 12: Attempting to add an out-o f- range ID to the cart\n11. Click your browser’s refresh button to restore the default state.\n12. Try adding a non‑ numeric character to the inCart array. This will also result in an error.\n13. Change a value inside the first object in the product state array and see how it changes in the",
		"shown in Figure 5‑12.\nEditing Component Data in DevTools ❘ 117\nFIGURE 5- 12: Attempting to add an out-o f- range ID to the cart\n11. Click your browser’s refresh button to restore the default state.\n12. Try adding a non‑ numeric character to the inCart array. This will also result in an error.\n13. Change a value inside the first object in the product state array and see how it changes in the\nbrowser window.\n14. Click the ProductList component in the component tree view. Notice how the state hook\ninside App becomes props inside ProductList.\n15. Click the first Product component in the component tree view, and notice that it receives a\nsingle object (one product) from the ProductList component.\n16. See how many different ways you can break the application by changing the data contained\nwithin or passed to a component, and think about how you might modify the application to\nprevent the possibility of this error happening.\n118 ❘ CHAPTER 5 React Devtools",
		"single object (one product) from the ProductList component.\n16. See how many different ways you can break the application by changing the data contained\nwithin or passed to a component, and think about how you might modify the application to\nprevent the possibility of this error happening.\n118 ❘ CHAPTER 5 React Devtools\nWORKING WITH ADDITIONAL DEVTOOLS FUNCTIONALITY\nIn addition to viewing and inspecting component data, the DevTools Components window has a few\nother options that can help you with an app’s components.\nLook at the icons in the upper‑ right corner of the component data window. Hovering over each one\nof these will give you a description of its purpose. As of this writing, there are four icons, which pro‑\nvide the following functionality:\n➤➤ Suspend the selected component. Suspense is a new feature in React which allows you to\nwrap a component in a Suspense element to tell that component to wait for some code to be",
		"of these will give you a description of its purpose. As of this writing, there are four icons, which pro‑\nvide the following functionality:\n➤➤ Suspend the selected component. Suspense is a new feature in React which allows you to\nwrap a component in a Suspense element to tell that component to wait for some code to be\nloaded. If a highlighted component is wrapped in the Suspense element, this button in Dev‑\nTools will cause a component to go into this waiting (suspended) state.\n➤➤ Inspect the matching DOM element. Clicking this button will open the Chrome DevTools\nelement inspector window and highlight the HTML generated by the selected component.\n➤➤ Log this component data to the console. This option will cause the data in the component\ndata inspection window to be output to the JavaScript console. After clicking this button,\nswitch to the Console in Chrome DevTools and you’ll see the data for the selected component\nunder a link titled [Click to expand], as shown in Figure 5‑13.",
		"➤➤ Log this component data to the console. This option will cause the data in the component\ndata inspection window to be output to the JavaScript console. After clicking this button,\nswitch to the Console in Chrome DevTools and you’ll see the data for the selected component\nunder a link titled [Click to expand], as shown in Figure 5‑13.\n➤➤ View source for this element. This option will take you to the JavaScript source file that cre‑\nates the element, such as the function or class that defines the component.\nFIGURE 5- 13: Logging component data to the console\nProfiling ❘ 119\nReact DevTools is a powerful tool for quickly viewing a list of the React components in your applica‑\ntion and drilling down into them to see their state and props. Being able to access the inner data of\ncomponents as they run in the browser is the first step in being able to fix bugs and improve your\ncomponents.\nPROFILING",
		"FIGURE 5- 13: Logging component data to the console\nProfiling ❘ 119\nReact DevTools is a powerful tool for quickly viewing a list of the React components in your applica‑\ntion and drilling down into them to see their state and props. Being able to access the inner data of\ncomponents as they run in the browser is the first step in being able to fix bugs and improve your\ncomponents.\nPROFILING\nThe React DevTools Profiler tab gives you information about the performance of a React application.\nTo use it, start by recording or importing a usage session that you wish to analyze.\n1. Click the Start Profiling icon in the upper‑ left corner of the Profiler, which will turn into a red\nStop Profiling icon to indicate that recording is in progress.\n2. Interact with the application in the browser window. Click buttons, fill out and submit any\nforms, and so forth.\n3. Click the red Stop Profiling icon.\nOnce you’ve recorded some Profiler data, you can switch to the Flamegraph tab to see how your",
		"Stop Profiling icon to indicate that recording is in progress.\n2. Interact with the application in the browser window. Click buttons, fill out and submit any\nforms, and so forth.\n3. Click the red Stop Profiling icon.\nOnce you’ve recorded some Profiler data, you can switch to the Flamegraph tab to see how your\ncomponents render. The Flamegraph chart is shown in Figure 5‑14.\nFIGURE 5- 14: The Flamegraph chart\n120 ❘ CHAPTER 5 React Devtools\nFor each time you did something while profiling the app that caused a state change (and therefore a\nre‑ rendering of the UI), there will be a separate Flamegraph chart.\nYou can navigate through each rendering by clicking items in the bar graph in the upper right of the\nFlamegraph window or by clicking the arrows to the left and right of the bar graph.\nThe Ranked chart shows each of the components that rendered during your profiling, in order of how\nlong they took to render. In our React Bookstore app, the component that takes the longest to render,",
		"You can navigate through each rendering by clicking items in the bar graph in the upper right of the\nFlamegraph window or by clicking the arrows to the left and right of the bar graph.\nThe Ranked chart shows each of the components that rendered during your profiling, in order of how\nlong they took to render. In our React Bookstore app, the component that takes the longest to render,\nby far, is ProductList, as shown in Figure 5‑15.\nFIGURE 5- 15: Viewing the Ranked chart\nIt’s pretty easy to see ProductList is the slowest component— each rendering of ProductList\nrequires 100 Product components to be rendered. There are several ways to optimize this. The most\neffective ways involve rendering fewer components. For example, you could require the user to click a\n“View More” button after the first batch of books is displayed.\nAnother way is to use a technique called list virtualization or windowing. List virtualization optimizes",
		"requires 100 Product components to be rendered. There are several ways to optimize this. The most\neffective ways involve rendering fewer components. For example, you could require the user to click a\n“View More” button after the first batch of books is displayed.\nAnother way is to use a technique called list virtualization or windowing. List virtualization optimizes\nlong lists by only rendering a small subset of the list at a time.\nSummary ❘ 121\nThe simplest technique for optimizing the ProductList component is to use memoization. Since the\nProductList component always renders the same data when given the same props, this data can all\nbe cached by React and re‑r endering can be minimized.\nFigure 5‑16 shows the Ranked chart after wrapping the ProductList and Product components in\nthe React.memo function.\nFIGURE 5- 16: Ranked chart after optimizing\nSUMMARY\nInspecting and optimizing your code are critical and ongoing processes in any software development",
		"be cached by React and re‑r endering can be minimized.\nFigure 5‑16 shows the Ranked chart after wrapping the ProductList and Product components in\nthe React.memo function.\nFIGURE 5- 16: Ranked chart after optimizing\nSUMMARY\nInspecting and optimizing your code are critical and ongoing processes in any software development\nproject. React DevTools is a powerful tool for looking inside your React user interfaces while they’re\nrunning and for testing the performance of individual components as well as an entire React app.\nIn this chapter, you learned:\n➤➤ How to access React DevTools.\n➤➤ How to navigate and search the DevTools component tree.\n122 ❘ CHAPTER 5 React Devtools\n➤➤ How to filter components in the DevTools tree.\n➤➤ How to modify component data in DevTools.\n➤➤ How to inspect components in DevTools.\n➤➤ How to use the DevTools Profiler to analyze component performance.\nIn the next chapter, you’ll learn how to manage data and data flow within a React application.\n6\nReact Data Flow",
		"122 ❘ CHAPTER 5 React Devtools\n➤➤ How to filter components in the DevTools tree.\n➤➤ How to modify component data in DevTools.\n➤➤ How to inspect components in DevTools.\n➤➤ How to use the DevTools Profiler to analyze component performance.\nIn the next chapter, you’ll learn how to manage data and data flow within a React application.\n6\nReact Data Flow\nData, and moving data between the different parts of an application, is a critical piece of any\ninteractive user interface. In this chapter, you’ll learn:\n➤➤ What one- way data flow means.\n➤➤ The benefits of one- way data flow.\n➤➤ How to initialize state in a React user interface.\n➤➤ How to decide where the state should “live.”\n➤➤ How to decide what data should be in state.\n➤➤ Methods for updating state.\n➤➤ How and why to treat state as immutable.\n➤➤ How to pass data between components.\n➤➤ The value of “shallow” copying and merging.\n➤➤ How to validate incoming props with PropTypes.\n➤➤ How and why to provide default props.",
		"➤➤ How to decide where the state should “live.”\n➤➤ How to decide what data should be in state.\n➤➤ Methods for updating state.\n➤➤ How and why to treat state as immutable.\n➤➤ How to pass data between components.\n➤➤ The value of “shallow” copying and merging.\n➤➤ How to validate incoming props with PropTypes.\n➤➤ How and why to provide default props.\n➤➤ New JavaScript syntax for working with props and state.\n➤➤ How to convert between function and class components.\nONE- WAY DATA FLOW\nOne of the defining characteristics of React that distinguishes it from most other front- end UI\nlibraries is its use of one-w ay data flow, also known as unidirectional data flow. One- way data\nflow means that all of the data in a React application flows from parent components to child\ncomponents. Another common way to describe the flow of data in React is “Data flows down\n(or downstream), and events flow up (or upstream).”\n124 ❘ CHAPTER 6 React Data Flow",
		"libraries is its use of one-w ay data flow, also known as unidirectional data flow. One- way data\nflow means that all of the data in a React application flows from parent components to child\ncomponents. Another common way to describe the flow of data in React is “Data flows down\n(or downstream), and events flow up (or upstream).”\n124 ❘ CHAPTER 6 React Data Flow\nWhile one-w ay data flow eliminates a common cause of complexity and errors in user interfaces, it\ncan also create confusion and frustration unless you fully understand the ins and outs of using it to\nyour advantage. In this chapter, I’ll take a step- by- step and thorough approach, with plenty of exam-\nple code, to covering everything you need to know about data flow within React, using both class\ncomponents and function components.\nUnderstanding One- Way Data Flow\nFigure 6-1 illustrates how unidirectional data flow works.\nComponent\nComponent Component\nData Events\nComponent Component Component Component",
		"ple code, to covering everything you need to know about data flow within React, using both class\ncomponents and function components.\nUnderstanding One- Way Data Flow\nFigure 6-1 illustrates how unidirectional data flow works.\nComponent\nComponent Component\nData Events\nComponent Component Component Component\nFIGURE 6- 1: Unidirectional data flow\nUnidirectional data flow doesn’t mean that child components can’t send data to parent components.\nSending data from child components (for example, an input form) to parent components (for exam-\nple, the form containing the input) is a critical part of interactivity. However, one- way data flow does\nmean that the way you send data from a child component to a parent component or between sibling\ncomponents is different from how you pass data from a parent to a child.\nTo understand one-w ay data flow, it’s helpful to look at an example of two-w ay data flow. To use\ntwo- way binding in Angular, you can use a combination of brackets, like this:",
		"mean that the way you send data from a child component to a parent component or between sibling\ncomponents is different from how you pass data from a parent to a child.\nTo understand one-w ay data flow, it’s helpful to look at an example of two-w ay data flow. To use\ntwo- way binding in Angular, you can use a combination of brackets, like this:\n<search- form [(term)]=\"searchTerm\"></search- form>\nAssuming that the preceding code causes a search form to be rendered, the combination of square\nbrackets and parentheses indicate that the searchTerm variable should be passed into the component\nrepresented by the search- form element (downstream data flow) and that when the value of the\nsearch term changes within the component represented by the search- form element, the value of the\nsearchTerm variable should be updated (upstream data flow).\nIn React, passing data downstream is done using props, like this:\n<SearchForm term={searchTerm} />",
		"represented by the search- form element (downstream data flow) and that when the value of the\nsearch term changes within the component represented by the search- form element, the value of the\nsearchTerm variable should be updated (upstream data flow).\nIn React, passing data downstream is done using props, like this:\n<SearchForm term={searchTerm} />\nHowever, because of unidirectional data flow, updating the value of the searchTerm variable from\nwithin the SearchForm component requires an event to be triggered. In function components, the\nevent that allows you to pass data upstream is created when you use the useState hook.\nOne-W ay Data Flow ❘ 125\nBefore we get to how that works, let’s look briefly at why React uses one-w ay data flow and the\nbenefits of it.\nWhy One- Way Data Flow?\nTwo-w ay data flow, also known as bidirectional data flow, where a component’s data can be modified\nby its parent and changes within the component can directly affect data in the parent, is convenient.",
		"One-W ay Data Flow ❘ 125\nBefore we get to how that works, let’s look briefly at why React uses one-w ay data flow and the\nbenefits of it.\nWhy One- Way Data Flow?\nTwo-w ay data flow, also known as bidirectional data flow, where a component’s data can be modified\nby its parent and changes within the component can directly affect data in the parent, is convenient.\nHowever, it also increases the complexity of a user interface, and this, in turn, increases the potential\nfor errors.\nFigure 6-2 shows an example of a user interface that makes use of two- way data flow. Notice that\nthere are multiple ways for data in the model to be changed, and the controller is required in order to\nmanage changes.\nController\nModel View\nFIGURE 6- 2: Bidirectional data flow\nIn bidirectional data flow, it’s not possible to tell whether the view was updated by the user interact-\ning with the view or by the data in the model changing.",
		"there are multiple ways for data in the model to be changed, and the controller is required in order to\nmanage changes.\nController\nModel View\nFIGURE 6- 2: Bidirectional data flow\nIn bidirectional data flow, it’s not possible to tell whether the view was updated by the user interact-\ning with the view or by the data in the model changing.\nFigure 6-3 shows a diagram of one-w ay data flow in a user interface. The only way that a view\n(what’s displayed in the browser) can be changed is by changing the data in the model (which is the\nstate object in React).\nView\nState Action\nFIGURE 6- 3: Data flowing in one direction\n126 ❘ CHAPTER 6 React Data Flow\nA view in unidirectional data flow can be expressed as a simple function:\nV = function(data)\nIf you want to test whether a piece of data in unidirectional data flow is being properly updated, or\ntest that the change to a variable in unidirectional data flow has the intended consequences, there’s",
		"View\nState Action\nFIGURE 6- 3: Data flowing in one direction\n126 ❘ CHAPTER 6 React Data Flow\nA view in unidirectional data flow can be expressed as a simple function:\nV = function(data)\nIf you want to test whether a piece of data in unidirectional data flow is being properly updated, or\ntest that the change to a variable in unidirectional data flow has the intended consequences, there’s\nonly one thing to test: whether changing the state of the application modifies the view as expected.\nPROPS\nProps in React are the primary way that data is shared between parent components and child com-\nponents. To create a prop, simply give a React custom element an attribute, using the name=value\nformat. Inside the component instance created by that element, the attribute will become a property\nof the props object.\nHere are some key points about props:\n➤➤ A component can receive any number of props.\n➤➤ A prop’s value can be of any type of JavaScript data or an expression that evaluates to a",
		"ponents. To create a prop, simply give a React custom element an attribute, using the name=value\nformat. Inside the component instance created by that element, the attribute will become a property\nof the props object.\nHere are some key points about props:\n➤➤ A component can receive any number of props.\n➤➤ A prop’s value can be of any type of JavaScript data or an expression that evaluates to a\nvalue or function.\n➤➤ Props are read- only.\nLet’s take a look at each of these points in more detail.\nComponents Receive Props\nWhen you write a JSX element in React, the attributes that you give an element are passed to the\ncomponent as properties in an object. For example, consider this JSX element:\n<Taco meat=\"chicken\" produce={[cabbage,radish,cilantro]} sauce=\"hot\" />\nIf Taco is a function component, this element is the same as the following JavaScript function call:\nTaco({meat:\"chicken\",produce:[cabbage,radish,cilantro],sauce:\"hot\"});",
		"component as properties in an object. For example, consider this JSX element:\n<Taco meat=\"chicken\" produce={[cabbage,radish,cilantro]} sauce=\"hot\" />\nIf Taco is a function component, this element is the same as the following JavaScript function call:\nTaco({meat:\"chicken\",produce:[cabbage,radish,cilantro],sauce:\"hot\"});\nInside the Taco function’s header, the object passed to the function is given the name props, which is\nhow you can access it inside of the function:\nfunction Taco(props){\nreturn (<p>Your {props.sauce} {props.meat} taco will be ready shortly.</p>\n}\nexport default Taco;\nBecause props is a JavaScript object, you can have as many or as few properties in the prop object as\nyou need, and there’s no requirement that each prop be passed each time you use a component.\nProps Can Be Any Data Type\nThe props you pass to a component can be any type of JavaScript data, including any of the six",
		"}\nexport default Taco;\nBecause props is a JavaScript object, you can have as many or as few properties in the prop object as\nyou need, and there’s no requirement that each prop be passed each time you use a component.\nProps Can Be Any Data Type\nThe props you pass to a component can be any type of JavaScript data, including any of the six\nprimitive data types (undefined, Boolean, Number, String, BigInt, and Symbol) as well as objects,\nfunctions, arrays, and even null.\nProps ❘ 127\nBecause of JSX’s ability to include JavaScript expressions through the use of curly braces, the data\npassed to a component through the props object can be determined through the use of a variable or\nany JavaScript expression or function call.\nProps Are Read- Only\nOnce data has been passed to a component using props, that data is treated as immutable. This means\nthat although a component receives props, once those props are values inside the component, your\ncomponent can’t change them.",
		"passed to a component through the props object can be determined through the use of a variable or\nany JavaScript expression or function call.\nProps Are Read- Only\nOnce data has been passed to a component using props, that data is treated as immutable. This means\nthat although a component receives props, once those props are values inside the component, your\ncomponent can’t change them.\nThis is the strictest rule in React: a component must act like a pure function with regard to its props.\nThe reason for this rule is that React only re- renders components in response to state changes. Props\nare the mechanism for updating components according to state changes. If you were to change the\nvalue of a prop inside a component, it would cause the internal data of your component to be out of\nsync with what’s displayed in your browser and the value of the prop would be reset by the parent\ncomponent with the next render. In other words: changing props inside a component won’t have the",
		"are the mechanism for updating components according to state changes. If you were to change the\nvalue of a prop inside a component, it would cause the internal data of your component to be out of\nsync with what’s displayed in your browser and the value of the prop would be reset by the parent\ncomponent with the next render. In other words: changing props inside a component won’t have the\neffect that you want.\nIf you attempt to change the value of a prop, you’ll get an error. However, the problem with mutating\nprops can be illustrated by looking at what happens when you change any variable inside a compo-\nnent without triggering a re-r ender.\nIn Listing 6-1, a stateful variable is passed as a prop from a parent component (App) to a child com-\nponent (PropsMutator). Inside PropsMutator, a local variable is created to hold the value of the\nprop. This local variable is also used inside the return statement.",
		"nent without triggering a re-r ender.\nIn Listing 6-1, a stateful variable is passed as a prop from a parent component (App) to a child com-\nponent (PropsMutator). Inside PropsMutator, a local variable is created to hold the value of the\nprop. This local variable is also used inside the return statement.\nA function called changeProp increments the value of the local copy of the prop and then logs it to\nthe console.\nLISTING 6- 1: Changing local variables doesn’t update the view\nimport {useState} from 'react';\nfunction App(){\nconst [theNumber,setTheNumber] = useState(0);\nreturn (\n<PropsMutator theNumber = {theNumber} setTheNumber = {setTheNumber} />\n)\n}\nfunction PropsMutator(props){\nlet myNumber = props.theNumber;\nconst changeProp = ()=>{\nmyNumber = myNumber + 1;\nconsole.log(\"my number is: \" + myNumber);\n}\nreturn (\n<>\ncontinues\n128 ❘ CHAPTER 6 React Data Flow\nLISTING 6-1 (continued)\n<h1>My number is: {myNumber}</h1>\n<h1>props.theNumber is: {props.theNumber}</h1>",
		"return (\n<PropsMutator theNumber = {theNumber} setTheNumber = {setTheNumber} />\n)\n}\nfunction PropsMutator(props){\nlet myNumber = props.theNumber;\nconst changeProp = ()=>{\nmyNumber = myNumber + 1;\nconsole.log(\"my number is: \" + myNumber);\n}\nreturn (\n<>\ncontinues\n128 ❘ CHAPTER 6 React Data Flow\nLISTING 6-1 (continued)\n<h1>My number is: {myNumber}</h1>\n<h1>props.theNumber is: {props.theNumber}</h1>\n<button onClick = {changeProp}>change myNumber</button><br />\n<button onClick={()=>{props.setTheNumber(props.theNumber + 1)}}>\nuse setTheNumber\n</button>\n</>\n)\n}\nexport default App;\nFigure 6-4 shows what happens when you run this component and click the change myNumber but-\nton several times.\nFIGURE 6- 4: Changing local variables doesn’t update the view\nThe second button in Listing 6-1 shows the correct way to modify a value that will be used in the\nreturn method. In this button, we call a state change function, setTheNumber (which is passed to",
		"</>\n)\n}\nexport default App;\nFigure 6-4 shows what happens when you run this component and click the change myNumber but-\nton several times.\nFIGURE 6- 4: Changing local variables doesn’t update the view\nThe second button in Listing 6-1 shows the correct way to modify a value that will be used in the\nreturn method. In this button, we call a state change function, setTheNumber (which is passed to\nthe component from its parent) and pass in a new value. The state change function modifies the state\nvariable and then re- renders, which causes the new value to be passed into the child component.\nFigure 6-5 shows the result of clicking the change myNumber button several times, followed by click-\ning the use setTheNumber button, followed by clicking change myNumber again.\nProps ❘ 129\nMake sure that you understand this example before moving on to the next section, because if you see\nwhat’s happening in Figure 6-5, the distinction between props and state will make perfect sense and",
		"Figure 6-5 shows the result of clicking the change myNumber button several times, followed by click-\ning the use setTheNumber button, followed by clicking change myNumber again.\nProps ❘ 129\nMake sure that you understand this example before moving on to the next section, because if you see\nwhat’s happening in Figure 6-5, the distinction between props and state will make perfect sense and\nyou’ll have a much better idea of when to use each.\nFIGURE 6- 5: Local variable and props confusion\nValidating Incoming Props with PropTypes\nWhen you invoke a JavaScript function and pass in arguments, the function doesn’t care what type\nof data the arguments are, whether they’re passed in at all, or whether more or fewer arguments are\npassed in than the function defines. The same things are true with props that you pass from a parent\ncomponent to a child component.\nFor programs to operate correctly, however, it often is important that the props that are passed to",
		"of data the arguments are, whether they’re passed in at all, or whether more or fewer arguments are\npassed in than the function defines. The same things are true with props that you pass from a parent\ncomponent to a child component.\nFor programs to operate correctly, however, it often is important that the props that are passed to\na component are the same type of data that the component is expecting. For example, if your com-\nponent expects a prop called itemPrice to be a number, an error may occur if a parent component\npasses itemPrice as an object.\nReact programmers (and programmers in general) must account for the possibility of incorrect data\ntypes being passed to any function that receives arguments. But, it’s not always easy to figure out and\ndetect possible data type problems with a dynamically typed language such as JavaScript.\nTo help with keeping track of a component’s expected input and finding possible problems, we can\nuse a tool called PropTypes.",
		"types being passed to any function that receives arguments. But, it’s not always easy to figure out and\ndetect possible data type problems with a dynamically typed language such as JavaScript.\nTo help with keeping track of a component’s expected input and finding possible problems, we can\nuse a tool called PropTypes.\n130 ❘ CHAPTER 6 React Data Flow\nWhat Is PropTypes?\nPropTypes is a tool for type checking and documenting props in React components. For each prop\nin your component, you can specify rules that the value coming into the prop will be tested against.\nIf the prop value doesn’t pass those rules, a message will be displayed in the JavaScript console in\nyour browser.\nPropTypes only displays these warning messages when you’re using the development version of React.\nOnce your app is deployed and using the production version of React, PropTypes is silent.\nFor example, the WelcomeMessage component in Listing 6-2 uses a prop called firstName to display",
		"your browser.\nPropTypes only displays these warning messages when you’re using the development version of React.\nOnce your app is deployed and using the production version of React, PropTypes is silent.\nFor example, the WelcomeMessage component in Listing 6-2 uses a prop called firstName to display\na customized header message. You can tell from looking at the code in this component that the value\nof the firstName prop should be a string.\nLISTING 6- 2: A component that uses a string prop\nfunction WelcomeMessage(props){\nreturn (<p>Welcome back, {props.firstName}!</p>);\n}\nexport default WelcomeMessage;\nBy now, you should be able to guess what the output of this component will be when you pass a first\nname into it through an element like the following:\n<WelcomeMessage firstName = \"Grover\" />\nBut, what happens if you pass something that’s not a string into the firstName prop? The following\nelement passes an array into the firstName prop:\n<WelcomeMessage firstName = {['Jimmy','Joe']} />",
		"By now, you should be able to guess what the output of this component will be when you pass a first\nname into it through an element like the following:\n<WelcomeMessage firstName = \"Grover\" />\nBut, what happens if you pass something that’s not a string into the firstName prop? The following\nelement passes an array into the firstName prop:\n<WelcomeMessage firstName = {['Jimmy','Joe']} />\nThe result may not be what you’d expect, as shown in Figure 6-6.\nReact doesn’t consider this case to be an error, so it may not be obvious at first what the cause of the\nunexpected output is. This is especially true in components that make use of many different props.\nListing 6-3 shows how you can use PropTypes to validate this prop.\nLISTING 6- 3: Validating that a prop is a string\nimport PropTypes from 'prop- types';\nfunction WelcomeMessage(props){\nreturn (<p>Welcome back, {props.firstName}!</p>);\n}\nWelcomeMessage.propTypes = {\nfirstName:PropTypes.string\n}\nexport default WelcomeMessage;\nProps ❘ 131",
		"Listing 6-3 shows how you can use PropTypes to validate this prop.\nLISTING 6- 3: Validating that a prop is a string\nimport PropTypes from 'prop- types';\nfunction WelcomeMessage(props){\nreturn (<p>Welcome back, {props.firstName}!</p>);\n}\nWelcomeMessage.propTypes = {\nfirstName:PropTypes.string\n}\nexport default WelcomeMessage;\nProps ❘ 131\nFIGURE 6- 6: Passing the wrong prop type\nWith the PropType specified for firstName, when WelcomeMessage receives a value of firstName\nthat isn’t a string, a warning message will be displayed in the console, as shown in Figure 6-7.\nUse of PropTypes in React is optional, and whether you use it or not, it won’t fix errors by itself. It\nalso won’t cause your application to not compile if a prop fails its checks. It’s purely a development\ntool. However, it’s a great way to catch bugs in your components and to document your components.\nGetting into the habit of using PropTypes will improve your React components and make it easier for",
		"also won’t cause your application to not compile if a prop fails its checks. It’s purely a development\ntool. However, it’s a great way to catch bugs in your components and to document your components.\nGetting into the habit of using PropTypes will improve your React components and make it easier for\nother programmers who may use your component in the future to know what data it requires.\nGetting Started with PropTypes\nPropTypes is not part of the core React library. To use it, you first have to install it. If you boot-\nstrapped your app with Create React App, it’s already been installed for you. Otherwise, you can\ninstall it by running the following command from the root of your project:\nnpm install prop- types - - save\nOnce PropTypes is installed, you’ll need to include the PropTypes library into each component where\nyou use it. At the beginning of the file containing your component, use the following import:\nimport PropTypes from 'prop- types;",
		"install it by running the following command from the root of your project:\nnpm install prop- types - - save\nOnce PropTypes is installed, you’ll need to include the PropTypes library into each component where\nyou use it. At the beginning of the file containing your component, use the following import:\nimport PropTypes from 'prop- types;\nOnce imported, PropTypes works the same with both function and class components, but where you\nplace the PropTypes may differ.\n132 ❘ CHAPTER 6 React Data Flow\nFIGURE 6- 7: PropTypes displaying a warning\nTo use PropTypes, you just need to add a property called propTypes to the component. Note that\nthe PropTypes library, which contains different ways of validating props, starts with a capital P. The\nproperty that you add to your component to cause it to do type checking starts with a lowercase p.\nThe propTypes property is a static property, meaning it operates at the component level, not the",
		"To use PropTypes, you just need to add a property called propTypes to the component. Note that\nthe PropTypes library, which contains different ways of validating props, starts with a capital P. The\nproperty that you add to your component to cause it to do type checking starts with a lowercase p.\nThe propTypes property is a static property, meaning it operates at the component level, not the\ncomponent instance. In class components, this means that you can use the static keyword to put your\npropTypes property in the body of your class, as shown in Listing 6-4.\nLISTING 6- 4: PropTypes inside a component’s body\nimport PropTypes from 'prop- types';\nimport {Component} from 'react';\nclass WelcomeMessage extends Component {\nstatic propTypes = {\nfirstName: PropTypes.string\n}\nrender(){\nreturn(<h1>Welcome, {this.props.firstName}!</h1>);\n}\n}\nexport default WelcomeMessage;\nProps ❘ 133\nYou can also add the propTypes object into your class component by putting it outside of the class",
		"import PropTypes from 'prop- types';\nimport {Component} from 'react';\nclass WelcomeMessage extends Component {\nstatic propTypes = {\nfirstName: PropTypes.string\n}\nrender(){\nreturn(<h1>Welcome, {this.props.firstName}!</h1>);\n}\n}\nexport default WelcomeMessage;\nProps ❘ 133\nYou can also add the propTypes object into your class component by putting it outside of the class\nbody, as shown in Listing 6-5.\nLISTING 6- 5: Putting propTypes outside the class body\nimport PropTypes from 'prop- types';\nimport {Component} from 'react';\nclass WelcomeMessage extends Component {\nrender(){\nreturn(<h1>Welcome, {this.props.firstName}!</h1>);\n}\n}\nWelcomeMessage.propTypes = {\nfirstName: PropTypes.string\n}\nexport default WelcomeMessage;\nIn function components, the propTypes object always goes outside of the function body, as shown in\nListing 6-6.\nLISTING 6- 6: Using propTypes with a function component\nimport PropTypes from 'prop- types';\nfunction MyComponent(props){",
		"render(){\nreturn(<h1>Welcome, {this.props.firstName}!</h1>);\n}\n}\nWelcomeMessage.propTypes = {\nfirstName: PropTypes.string\n}\nexport default WelcomeMessage;\nIn function components, the propTypes object always goes outside of the function body, as shown in\nListing 6-6.\nLISTING 6- 6: Using propTypes with a function component\nimport PropTypes from 'prop- types';\nfunction MyComponent(props){\nreturn (<p>The value is {props.itemValue}</p>);\n}\nMyComponent.propTypes = {\nitemValue: PropTypes.number\n}\nexport default MyComponent;\nWhat Can PropTypes Validate?\nPropTypes can perform a wide variety of checks on a component’s props, including the data type\n(as you’ve seen), whether required props are passed, the shape of properties passed as objects, and\nmore. In this section, I’ll explain and demonstrate all of the different validation rules contained in\nPropTypes.\nValidating Data Type\nYou’ve already seen how to check whether a prop is one of JavaScript’s data types. The validators for",
		"(as you’ve seen), whether required props are passed, the shape of properties passed as objects, and\nmore. In this section, I’ll explain and demonstrate all of the different validation rules contained in\nPropTypes.\nValidating Data Type\nYou’ve already seen how to check whether a prop is one of JavaScript’s data types. The validators for\nJavaScript types are:\n➤➤ PropTypes.array\n134 ❘ CHAPTER 6 React Data Flow\n➤➤ PropTypes.bool\n➤➤ PropTypes.func\n➤➤ PropTypes.number\n➤➤ PropTypes.object\n➤➤ PropTypes.string\n➤➤ PropTypes.symbol\nThe purpose of each of these should be self- evident, but note that a couple of the validators, bool and\nfunc, have names that are different from the names of the JavaScript data types.\nWhen you use one of these data type validators by itself, PropTypes will treat the prop as optional. In\nother words, a missing prop won’t trigger a PropType warning message by default.\nValidating Required Props",
		"The purpose of each of these should be self- evident, but note that a couple of the validators, bool and\nfunc, have names that are different from the names of the JavaScript data types.\nWhen you use one of these data type validators by itself, PropTypes will treat the prop as optional. In\nother words, a missing prop won’t trigger a PropType warning message by default.\nValidating Required Props\nIf a component requires a prop to be passed to it, you can indicate to PropTypes that a prop is\nrequired by appending the isRequired validator to the data type validator, as shown in Listing 6-7.\nLISTING 6- 7: Appending the isRequired validator\nMyComponent.propTypes = {\nfirstName: PropTypes.string.isRequired,\nmiddleName: PropTypes.string,\nlastName: PropTypes.string.isRequired\n}\nBeyond whether a prop exists and is of a particular data type, you can also do checks that are specific\nto how the prop data functions within React.\nValidating Nodes",
		"LISTING 6- 7: Appending the isRequired validator\nMyComponent.propTypes = {\nfirstName: PropTypes.string.isRequired,\nmiddleName: PropTypes.string,\nlastName: PropTypes.string.isRequired\n}\nBeyond whether a prop exists and is of a particular data type, you can also do checks that are specific\nto how the prop data functions within React.\nValidating Nodes\nThe node validator checks whether the prop’s value is something that can be rendered. React calls\nanything that can be rendered in a component a node. The things that can be rendered in a compo-\nnent are numbers, strings, elements, and arrays containing numbers, strings, or elements:\nuserMessage: PropTypes.node\nThe node validator is useful in cases where you may not care whether the value of the prop is a string\nor number or element, but you do care that it can be rendered.\nIf one of your components does try to render a prop that isn’t a node, it will cause your program to",
		"nent are numbers, strings, elements, and arrays containing numbers, strings, or elements:\nuserMessage: PropTypes.node\nThe node validator is useful in cases where you may not care whether the value of the prop is a string\nor number or element, but you do care that it can be rendered.\nIf one of your components does try to render a prop that isn’t a node, it will cause your program to\ncrash and display an error in the browser as well as in the console even if you’re not using PropTypes.\nYou can view this default error message by trying to render a prop value that isn’t a number, string,\nelement, or an array of renderable data. For example, the component in Listing 6-8 renders the values\npassed into the url and linkName props.\nProps ❘ 135\nLISTING 6- :8 Trying to render a non- node value\nfunction SiteLink(props) {\nreturn (\n<a href={props.url}>{props.linkName}</a>\n);\n}\nexport default SiteLink;\nThe following element invokes the SiteLink function component, passing in an object as",
		"element, or an array of renderable data. For example, the component in Listing 6-8 renders the values\npassed into the url and linkName props.\nProps ❘ 135\nLISTING 6- :8 Trying to render a non- node value\nfunction SiteLink(props) {\nreturn (\n<a href={props.url}>{props.linkName}</a>\n);\n}\nexport default SiteLink;\nThe following element invokes the SiteLink function component, passing in an object as\nthe linkName:\n<SiteLink url=\"http://example.com\" linkName={{name:'Example'}} />\nFigure 6-8 shows the error message that displays when you try to render an object. Notice that the\nerror message doesn’t specify which prop caused the error, just that there was one and the element in\nwhich it occurred.\nFIGURE 6- 8: The not- renderable error message\n136 ❘ CHAPTER 6 React Data Flow\nYou can use PropTypes.node to find out which prop caused the error.\nListing 6-9 shows how to use PropTypes.node to validate that props.linkName can be rendered,",
		"error message doesn’t specify which prop caused the error, just that there was one and the element in\nwhich it occurred.\nFIGURE 6- 8: The not- renderable error message\n136 ❘ CHAPTER 6 React Data Flow\nYou can use PropTypes.node to find out which prop caused the error.\nListing 6-9 shows how to use PropTypes.node to validate that props.linkName can be rendered,\nand Figure 6-9 shows that attempting to render an object still causes the same error messages to be\ndisplayed, but PropTypes displays which prop caused the error.\nLISTING 6- 9: Using PropTypes.node\nimport PropTypes from 'prop- types';\nfunction SiteLink(props) {\nreturn (\n<a href=\"{props.url}\">{props.linkName}</a>\n);\n}\nSiteLink.propTypes = {\nlinkName: PropTypes.node\n}\nexport default SiteLink;\nFIGURE 6- 9: PropTypes tell which attribute caused the error\nProps ❘ 137\nIn order to properly handle a case where an object value may be passed into a prop that will be ren-",
		"import PropTypes from 'prop- types';\nfunction SiteLink(props) {\nreturn (\n<a href=\"{props.url}\">{props.linkName}</a>\n);\n}\nSiteLink.propTypes = {\nlinkName: PropTypes.node\n}\nexport default SiteLink;\nFIGURE 6- 9: PropTypes tell which attribute caused the error\nProps ❘ 137\nIn order to properly handle a case where an object value may be passed into a prop that will be ren-\ndered, you can use error boundaries, which you’ll learn about in Chapter 13.\nValidating React Elements\nIf you want to make sure that a prop is a React element, you can use PropTypes.element. You\nmight use the element validator to test whether the children prop contains an element, as shown in\nListing 6-10.\nLISTING 6- 10: Validating React elements\nimport PropTypes from 'prop- types';\nfunction BorderBox(props){\nreturn(\n<div style={{border:\"1px solid black\"}}>{props.children}</div>\n)\n}\nBorderBox.propTypes = {\nchildren: PropTypes.element.isRequired\n}\nexport default BorderBox;",
		"might use the element validator to test whether the children prop contains an element, as shown in\nListing 6-10.\nLISTING 6- 10: Validating React elements\nimport PropTypes from 'prop- types';\nfunction BorderBox(props){\nreturn(\n<div style={{border:\"1px solid black\"}}>{props.children}</div>\n)\n}\nBorderBox.propTypes = {\nchildren: PropTypes.element.isRequired\n}\nexport default BorderBox;\nHere’s an example of a use of the BorderBox element defined in Listing 6-10 that will cause the\nPropType.element validation to fail:\n<BorderBox>\n<p>The first paragraph</p>\n<p>The second paragraph</p>\n</BorderBox>\nFigure 6-10 shows the warning message that will be displayed in the preceding case.\nElement Type Validation\nIf you want to test whether the prop value is a React element type, you can use elementType, as\nshown in Listing 6-11.\nLISTING 6- 11: Using the elementType validator\nFamilyTree.propTypes = {\npet: PropTypes.elementType\n}",
		"<p>The first paragraph</p>\n<p>The second paragraph</p>\n</BorderBox>\nFigure 6-10 shows the warning message that will be displayed in the preceding case.\nElement Type Validation\nIf you want to test whether the prop value is a React element type, you can use elementType, as\nshown in Listing 6-11.\nLISTING 6- 11: Using the elementType validator\nFamilyTree.propTypes = {\npet: PropTypes.elementType\n}\nThe difference between the element validator and the elementType validator is that the\nelement validator checks for a rendered element (for example, <MyComponent />), while\nthe elementType validator checks for an unrendered element (for example, MyComponent).\n138 ❘ CHAPTER 6 React Data Flow\nFIGURE 6- 10: Failing PropTypes.element validation\nJavaScript Class Validation\nPropTypes.instanceOf tests that the supplied prop is an instance of a particular JavaScript class\n(meaning that it has this class in its prototype chain). To use it, you can use the instanceOf validator,",
		"138 ❘ CHAPTER 6 React Data Flow\nFIGURE 6- 10: Failing PropTypes.element validation\nJavaScript Class Validation\nPropTypes.instanceOf tests that the supplied prop is an instance of a particular JavaScript class\n(meaning that it has this class in its prototype chain). To use it, you can use the instanceOf validator,\nas shown in Listing 6-12. The instanceOf validator uses the JavaScript instanceOf operator.\nLISTING 6- 12: Validating that a prop is an instance of a class\nimport {Component} from 'react';\nimport {PropTypes} from 'prop- types';\nimport Person from './Person';\nclass FamilyTree extends Component {\nrender(){\nreturn(\n<p>{this.props.father.firstName}</p>\n)\n}\n}\nFamilyTree.propTypes = {\nfather: PropTypes.instanceOf(Person)\n}\nexport default FamilyTree;\nProps ❘ 139\nLimiting Props to Certain Values or Types\nPropTypes.oneOf is a function that tests whether the value of a prop is one of the specific items in a",
		"import Person from './Person';\nclass FamilyTree extends Component {\nrender(){\nreturn(\n<p>{this.props.father.firstName}</p>\n)\n}\n}\nFamilyTree.propTypes = {\nfather: PropTypes.instanceOf(Person)\n}\nexport default FamilyTree;\nProps ❘ 139\nLimiting Props to Certain Values or Types\nPropTypes.oneOf is a function that tests whether the value of a prop is one of the specific items in a\nlist. To use it, pass an array of possible values into the oneOf function, as shown in Listing 6-13.\nLISTING 6- 13: Using PropTypes.oneOf\nimport PropTypes from 'prop- types';\nfunction DisplayPrimaryColor(props){\nreturn(\n<p>You picked: {props.primaryColor}</p>\n)\n}\nDisplayPrimaryColor.propTypes = {\nprimaryColor:PropTypes.oneOf(['red','yellow','blue'])\n}\nexport default DisplayPrimaryColor;\nWith the oneOfType validator, you can check whether the value of a prop is one of a list of data\ntypes. To use it, pass an array containing the allowed data types, using names of PropTypes’s data\ntype validators:",
		"return(\n<p>You picked: {props.primaryColor}</p>\n)\n}\nDisplayPrimaryColor.propTypes = {\nprimaryColor:PropTypes.oneOf(['red','yellow','blue'])\n}\nexport default DisplayPrimaryColor;\nWith the oneOfType validator, you can check whether the value of a prop is one of a list of data\ntypes. To use it, pass an array containing the allowed data types, using names of PropTypes’s data\ntype validators:\nComponent.propTypes = {\nmyProp:PropTypes.oneOfType([\nPropTypes.bool,\nPropTypes.string,\nPropTypes.number\n])\n}\nAdditional Validators\nPropTypes.arrayOf tests that the prop is an array in which each of the elements matches a pro-\nvided type:\nMyComponent.propTypes = {\nstudents: PropType.arrayOf(\nPropTypes.instanceOf(Person)\n)\n}\nPropTypes.objectOf tests that the prop is an object in which each of the properties of the object\nmatch a provided type:\nMyComponent.propTypes = {\nscores: PropTypes.objectOf(\nPropTypes.number\n)\n}\n140 ❘ CHAPTER 6 React Data Flow",
		"vided type:\nMyComponent.propTypes = {\nstudents: PropType.arrayOf(\nPropTypes.instanceOf(Person)\n)\n}\nPropTypes.objectOf tests that the prop is an object in which each of the properties of the object\nmatch a provided type:\nMyComponent.propTypes = {\nscores: PropTypes.objectOf(\nPropTypes.number\n)\n}\n140 ❘ CHAPTER 6 React Data Flow\nPropTypes.shape tests whether a prop value is an object containing specific properties:\nMyComponent.propTypes = {\nuserData: PropTypes.shape({\nid: PropTypes.number,\nfullname: PropTypes.string,\nbirthdate: PropTypes.instanceOf(Date),\nisAdmin: PropTypes.bool\n})\n}\nPropTypes.exact performs a strict object match on the prop, meaning that it must include only the\nspecified properties, each of which must pass its validation:\nMyComponent.propTypes = {\ntoDoItem: PropTypes.exact({\ndescription: PropTypes.string,\nisFinished: PropTypes.bool\n})\n}\nCreating Custom PropTypes\nIf what you want to validate isn’t covered by any of the built- in validators, you can create your own.",
		"specified properties, each of which must pass its validation:\nMyComponent.propTypes = {\ntoDoItem: PropTypes.exact({\ndescription: PropTypes.string,\nisFinished: PropTypes.bool\n})\n}\nCreating Custom PropTypes\nIf what you want to validate isn’t covered by any of the built- in validators, you can create your own.\nA custom validator is a function that will automatically receive three arguments when it’s used:\n➤➤ An object containing all of the props received by the component.\n➤➤ The prop being tested.\n➤➤ The name of the component.\nIn a custom prop, you can write the Error object that is returned when the validation fails.\nFor example, you might write a custom validator to check whether a prop is a 10- digit phone\nnumber, as shown in Listing 6-14.\nLISTING 6- 14: Using a custom validator to test for a phone number\nimport PropTypes from 'prop- types';\nfunction Contact(props){\nreturn(\n<li>{props.fullName}: {props.phone}</li>\n)\n}\nconst isPhoneNumber = function(props, propName, componentName) {",
		"For example, you might write a custom validator to check whether a prop is a 10- digit phone\nnumber, as shown in Listing 6-14.\nLISTING 6- 14: Using a custom validator to test for a phone number\nimport PropTypes from 'prop- types';\nfunction Contact(props){\nreturn(\n<li>{props.fullName}: {props.phone}</li>\n)\n}\nconst isPhoneNumber = function(props, propName, componentName) {\nconst regex = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-] \\d{3}[\\s.- ]\\d{4}$/;\nif (!regex.test(props[propName])) {\nreturn new Error(`Invalid prop ${propName} passed to ${componentName}.\nExpected a phone number.`);\n}\nProps ❘ 141\n}\nContact.propTypes = {\nfullName: PropTypes.string,\nphone: isPhoneNumber,\n}\nexport default Contact;\nFigure 6-11 shows the browser console returning the custom error message when this PropType fails.\nFIGURE 6- 11: A custom PropType validator failing\nDefault Props\nPropTypes can tell you when a component doesn’t receive a prop or when it receives the wrong",
		"Expected a phone number.`);\n}\nProps ❘ 141\n}\nContact.propTypes = {\nfullName: PropTypes.string,\nphone: isPhoneNumber,\n}\nexport default Contact;\nFigure 6-11 shows the browser console returning the custom error message when this PropType fails.\nFIGURE 6- 11: A custom PropType validator failing\nDefault Props\nPropTypes can tell you when a component doesn’t receive a prop or when it receives the wrong\ndata type, but using PropTypes by itself won’t fix any of the problems it reveals. To solve problems\nrevealed by PropTypes, you often need to look at the parent component that’s passing incorrect data\nto the component. But, ideally, each component in a React app should be able to function in some\ncapacity without crashing your entire user interface, even if something unexpected happens in a par-\nent component. This is where setting default values for props comes in.\nFor example, the StoresNearYou component in Listing 6-15 renders a Map component and a",
		"to the component. But, ideally, each component in a React app should be able to function in some\ncapacity without crashing your entire user interface, even if something unexpected happens in a par-\nent component. This is where setting default values for props comes in.\nFor example, the StoresNearYou component in Listing 6-15 renders a Map component and a\nStoreList component based on location data passed into it as props.latitude and props.longi-\ntude. Many things can go wrong with geolocation, however, and it’s possible that the parent com-\nponent won’t be able to pass this required data. The result is that the values passed to the Map and\nStoreList components would be invalid and could even result in the app crashing.\n142 ❘ CHAPTER 6 React Data Flow\nLISTING 6- 15: A component without default props\nimport Map from './Map';\nimport StoreList from './StoreList';\nfunction StoresNearYou(props){\nreturn(\n<>\n<div id=\"map- container\">",
		"ponent won’t be able to pass this required data. The result is that the values passed to the Map and\nStoreList components would be invalid and could even result in the app crashing.\n142 ❘ CHAPTER 6 React Data Flow\nLISTING 6- 15: A component without default props\nimport Map from './Map';\nimport StoreList from './StoreList';\nfunction StoresNearYou(props){\nreturn(\n<>\n<div id=\"map- container\">\n<Map latitude={props.latitude} longitude={props.longitude} />\n</div>\n<div id=\"store- list\">\n<StoreList latitude={props.latitude} longitude={props.longitude} />\n</div>\n</>\n)\n}\nexport default StoresNearYou;\nOne way to solve this problem is by using the || (OR) operator to set fallback values for latitude and\nlongitude, as shown in Listing 6-16.\nLISTING 6- 16: Setting defaults with the OR operator\nimport Map from './Map';\nimport StoreList from './StoreList';\nfunction StoresNearYou(props){\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={props.latitude || \"37.3230\"}",
		"}\nexport default StoresNearYou;\nOne way to solve this problem is by using the || (OR) operator to set fallback values for latitude and\nlongitude, as shown in Listing 6-16.\nLISTING 6- 16: Setting defaults with the OR operator\nimport Map from './Map';\nimport StoreList from './StoreList';\nfunction StoresNearYou(props){\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={props.latitude || \"37.3230\"}\nlongitude={props.longitude || \"122.0322\"}\n/>\n</div>\n<div id=\"store- list\">\n<StoreList\nlatitude={props.latitude || \"37.3230\"}\nlongitude={props.longitude || \"122.0322\"}\n/>\n</div>\n</>\n)\n}\nexport default StoresNearYou;\nHowever, this can quickly get messy and confusing in larger components involving many different\nprops, and using inline default values like this creates duplication of effort.\nProps ❘ 143\nThe next improvement to this code might be to separate the properties in the props object into vari-",
		"longitude={props.longitude || \"122.0322\"}\n/>\n</div>\n</>\n)\n}\nexport default StoresNearYou;\nHowever, this can quickly get messy and confusing in larger components involving many different\nprops, and using inline default values like this creates duplication of effort.\nProps ❘ 143\nThe next improvement to this code might be to separate the properties in the props object into vari-\nables outside of the return statement and set the default values just once, as shown in Listing 6-17.\nLISTING 6- 17: Destructuring props and setting defaults\nimport Map from './Map';\nimport StoreList from './StoreList';\nfunction StoresNearYou(props){\nconst latitude = props.latitude || \"37.3230\";\nconst longitude = props.longitude || \"122.0322\";\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={latitude}\nlongitude={longitude}\n/>\n</div>\n<div id=\"store- list\">\n<StoreList\nlatitude={latitude}\nlongitude={longitude}\n/>\n</div>\n</>\n)\n}\nexport default StoresNearYou;",
		"import StoreList from './StoreList';\nfunction StoresNearYou(props){\nconst latitude = props.latitude || \"37.3230\";\nconst longitude = props.longitude || \"122.0322\";\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={latitude}\nlongitude={longitude}\n/>\n</div>\n<div id=\"store- list\">\n<StoreList\nlatitude={latitude}\nlongitude={longitude}\n/>\n</div>\n</>\n)\n}\nexport default StoresNearYou;\nThis is a great improvement in terms of the cleanliness of the code, but it does introduce additional\nvariables, perhaps unnecessarily. We can do better.\nReact components have a defaultProps object that can be used to set values for props that aren’t\npassed into a component. Like propTypes, defaultProps is a property of the component, rather\nthan of an instance of the component. Therefore, to set defaultProps in a class component, you\ncan either define it inside the component by using the static keyword, or set it outside of the\ncomponent.",
		"React components have a defaultProps object that can be used to set values for props that aren’t\npassed into a component. Like propTypes, defaultProps is a property of the component, rather\nthan of an instance of the component. Therefore, to set defaultProps in a class component, you\ncan either define it inside the component by using the static keyword, or set it outside of the\ncomponent.\nListing 6-18 shows how to set defaultProps as a static property, and Listing 6-19 shows how to set\nit outside of the class definition.\nLISTING 6- 18: Setting defaultProps as a static property\nimport {Component} from 'react';\nclass StoresNearYou extends Component{\ncontinues\n144 ❘ CHAPTER 6 React Data Flow\nLISTING 6-18 (continued)\nstatic defaultProps = {\nlatitude: \"37.3230\",\nlongitude: \"122.0322\"\n}\nrender(){\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={this.props.latitude}\nlongitude={this.props.longitude}\n/>\n</div>\n<div id=\"store- list\">\n<StoreList\nlatitude={this.props.latitude}",
		"import {Component} from 'react';\nclass StoresNearYou extends Component{\ncontinues\n144 ❘ CHAPTER 6 React Data Flow\nLISTING 6-18 (continued)\nstatic defaultProps = {\nlatitude: \"37.3230\",\nlongitude: \"122.0322\"\n}\nrender(){\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={this.props.latitude}\nlongitude={this.props.longitude}\n/>\n</div>\n<div id=\"store- list\">\n<StoreList\nlatitude={this.props.latitude}\nlongitude={this.props.longitude}\n/>\n</div>\n</>\n)\n}\n}\nexport default StoresNearYou;\nLISTING 6- 19: Setting defaultProps outside of the component body\nimport {Component} from 'react';\nclass StoresNearYou extends Component{\nrender(){\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={this.props.latitude}\nlongitude={this.props.longitude}\n/>\n</div>\n<div id=\"store- list\">\n<StoreList\nlatitude={this.props.latitude}\nlongitude={this.props.longitude}\n/>\n</div>\n</>\n)\nReact State ❘ 145\n}\n}\nStoresNearYou.defaultProps = {\nlatitude: \"37.3230\",\nlongitude: \"122.0322\"\n}\nexport default StoresNearYou;",
		"render(){\nreturn(\n<>\n<div id=\"map- container\">\n<Map\nlatitude={this.props.latitude}\nlongitude={this.props.longitude}\n/>\n</div>\n<div id=\"store- list\">\n<StoreList\nlatitude={this.props.latitude}\nlongitude={this.props.longitude}\n/>\n</div>\n</>\n)\nReact State ❘ 145\n}\n}\nStoresNearYou.defaultProps = {\nlatitude: \"37.3230\",\nlongitude: \"122.0322\"\n}\nexport default StoresNearYou;\nYou can set defaultProps in function components outside of the function body, as shown in\nListing 6-20.\nLISTING 6- 20: Setting defaultProps for a function component\nfunction StoresNearYou(props){\nreturn(\n<>\n<div id=\"map- container\">\n<Map latitude={props.latitude} longitude={props.longitude} />\n</div>\n<div id=\"store- list\">\n<StoreList latitude={props.latitude} longitude={props.longitude} />\n</div>\n</>\n)\n}\nStoresNearYou.defaultProps = {\nlatitude: \"37.3230\",\nlongitude: \"122.0322\"\n}\nexport default StoresNearYou;\nWith the defaultProps property set, StoresNearYou will use the default values for props.lati-",
		"<Map latitude={props.latitude} longitude={props.longitude} />\n</div>\n<div id=\"store- list\">\n<StoreList latitude={props.latitude} longitude={props.longitude} />\n</div>\n</>\n)\n}\nStoresNearYou.defaultProps = {\nlatitude: \"37.3230\",\nlongitude: \"122.0322\"\n}\nexport default StoresNearYou;\nWith the defaultProps property set, StoresNearYou will use the default values for props.lati-\ntude and props.longitude if it’s invoked without passing props, or if it’s rendered before it receives\nprops (which can often happen in cases where a component depends on the result of an asynchronous\nfunction).\nREACT STATE\nIf all you want to do is render a static component that never changes, all you need is props. However,\nthe real value of React is in how it enables interactive web applications and manages updates to com-\nponents in response to input.\nThe key to React’s ability to be reactive is the concept and object called state.\n146 ❘ CHAPTER 6 React Data Flow\nWhat Is state?",
		"function).\nREACT STATE\nIf all you want to do is render a static component that never changes, all you need is props. However,\nthe real value of React is in how it enables interactive web applications and manages updates to com-\nponents in response to input.\nThe key to React’s ability to be reactive is the concept and object called state.\n146 ❘ CHAPTER 6 React Data Flow\nWhat Is state?\nIn a React component, state is an object containing a set of properties that may change over the\nlifetime of the component. Changes to the properties in the state object control the behavior and\nupdating of the component.\nInitializing state\nInitializing state is the process of defining the properties of the state object and setting their initial\nvalues. The initial values are the values that will be used for the first rendering of a component.\nInitializing state in Class Components\nPrior to the introduction of React Hooks, class components were the only place where you could use",
		"updating of the component.\nInitializing state\nInitializing state is the process of defining the properties of the state object and setting their initial\nvalues. The initial values are the values that will be used for the first rendering of a component.\nInitializing state in Class Components\nPrior to the introduction of React Hooks, class components were the only place where you could use\nstate. Hooks made it possible to use state in function components, but if you want to take advantage\nof the full power of React, including all of the lifecycle methods, classes are still the best (and in some\ncases the only) way to go.\nThere are a few important rules about initializing the state of a class component:\n1. The state object of a class component can have as many or as few properties as you need.\n2. Not all class components need to have state.\n3. If your component does make use of state, you must initialize it.",
		"cases the only) way to go.\nThere are a few important rules about initializing the state of a class component:\n1. The state object of a class component can have as many or as few properties as you need.\n2. Not all class components need to have state.\n3. If your component does make use of state, you must initialize it.\n4. The constructor function is the only place where you can change state directly.\nIn a class component, the most common way to initialize the state object is in the constructor\nfunction, as shown in Listing 6-21.\nLISTING 6- 21: Initializing state in a class component\nimport {Component} from 'react'\nclass NewsFeed extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {\ndate: new Date(),\nheadlines:[]\n}\n}\nrender(){\nreturn(\n<>\n<h1>Headlines for {this.state.date.toLocaleString()}</h1>\n...\nReact State ❘ 147\n</>\n)\n}\n}\nexport default NewsFeed;\nThe reason for initializing the state object in the constructor function is that it’s the first method",
		"import {Component} from 'react'\nclass NewsFeed extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {\ndate: new Date(),\nheadlines:[]\n}\n}\nrender(){\nreturn(\n<>\n<h1>Headlines for {this.state.date.toLocaleString()}</h1>\n...\nReact State ❘ 147\n</>\n)\n}\n}\nexport default NewsFeed;\nThe reason for initializing the state object in the constructor function is that it’s the first method\nto be called when you create an instance of a component.\nIt is possible to initialize the state object without a constructor function by using a class prop-\nerty, which is also known as a public instance field, or a public field. A public field works the\nsame as defining a property of the class in the constructor, and the resulting property will exist\nin every instance of the class that’s created. Listing 6-22 shows how to set the initial state with a\nclass property.\nLISTING 6- 22: Initializing state using the class property\nimport {Component} from 'react'\nclass NewsFeed extends Component {\nstate = {",
		"same as defining a property of the class in the constructor, and the resulting property will exist\nin every instance of the class that’s created. Listing 6-22 shows how to set the initial state with a\nclass property.\nLISTING 6- 22: Initializing state using the class property\nimport {Component} from 'react'\nclass NewsFeed extends Component {\nstate = {\ndate: new Date(),\nheadlines: []\n}\nrender(){\nreturn(\n<>\n<h1>Headlines for {this.state.date.toLocaleString()}</h1>\n...\n</>\n)\n}\n}\nexport default NewsFeed;\nInitializing State in Function Components\nIn JavaScript functions, data doesn’t persist between invocations of the function. Prior to React\nHooks, React function components also had no way to preserve data between calls. For this reason,\nfunction components were previously known as stateless components.\nWith React Hooks, function components can hook into functionality of React, including the state\nobject. The hook that makes this possible is useState.",
		"Hooks, React function components also had no way to preserve data between calls. For this reason,\nfunction components were previously known as stateless components.\nWith React Hooks, function components can hook into functionality of React, including the state\nobject. The hook that makes this possible is useState.\nThe first time a function component containing the useState function is rendered, useState creates\na stateful variable and a function for setting that variable. For all subsequent renders of the compo-\nnent, useState makes use of the variable created on that first render.\n148 ❘ CHAPTER 6 React Data Flow\nThe first time a function component renders, useState serves the same purpose as initializing the\nstate object in the constructor or using a public field in a class component.\nListing 6-23 shows how to initialize a stateful variable in a function component.\nLISTING 6- 23: Initializing state in a function component\nimport {useState} from 'react'\nfunction NewsFeed(props) {",
		"The first time a function component renders, useState serves the same purpose as initializing the\nstate object in the constructor or using a public field in a class component.\nListing 6-23 shows how to initialize a stateful variable in a function component.\nLISTING 6- 23: Initializing state in a function component\nimport {useState} from 'react'\nfunction NewsFeed(props) {\nconst [date,setDate] = useState(new Date());\nconst [headlines,setHeadlines] = useState([]);\nreturn(\n<>\n<h1>Headlines for {date.toLocaleString()}</h1>\n...\n</>\n)\n}\nexport default NewsFeed;\nNotice that Listing 6-23 includes two calls to useState. This is the recommended way to manage\nstate with React Hooks— for each stateful variable, you can make a call to useState and return the\nnew stateful variable and the function for updating that variable.\nAnother way to initialize state in a function component is shown in Listing 6-24.\nLISTING 6- 24: Another approach to initializing state in a function component",
		"state with React Hooks— for each stateful variable, you can make a call to useState and return the\nnew stateful variable and the function for updating that variable.\nAnother way to initialize state in a function component is shown in Listing 6-24.\nLISTING 6- 24: Another approach to initializing state in a function component\nimport {useState} from 'react'\nfunction NewsFeed(props) {\nconst [state,setState] = useState({date:new Date(),headlines:[]});\nreturn(\n<>\n<h1>Headlines for {state.date.toLocaleString()}</h1>\n...\n</>\n)\n}\nexport default NewsFeed;\nWhile the method of managing state shown in Listing 6-24 does have the advantage of more closely\nsimulating how class components have just a single state object, having multiple variables gives\nReact State ❘ 149\nyou more flexibility with regard to splitting your component into smaller components and for\nmemoization.\nsetSTATE IS NOT setSTATE\nAnother important point to keep in mind (which we’ll discuss in more detail shortly)",
		"simulating how class components have just a single state object, having multiple variables gives\nReact State ❘ 149\nyou more flexibility with regard to splitting your component into smaller components and for\nmemoization.\nsetSTATE IS NOT setSTATE\nAnother important point to keep in mind (which we’ll discuss in more detail shortly)\nis that the function returned by useState (which I named setState in Listing 6-24)\ndoesn’t work the same as a class component’s setState function. In short:\nsetState in a class component merges objects, while the setState function\nreturned by useState replaces the value of the stateful variable.\nThe Difference between state and props\nProps and state look similar at first glance:\n➤➤ They’re both JavaScript objects.\n➤➤ Changes to each of them cause components to update.\n➤➤ Both are data that are used by a component to generate the HTML output of the component.\nThe differences between props and state are in their roles.",
		"returned by useState replaces the value of the stateful variable.\nThe Difference between state and props\nProps and state look similar at first glance:\n➤➤ They’re both JavaScript objects.\n➤➤ Changes to each of them cause components to update.\n➤➤ Both are data that are used by a component to generate the HTML output of the component.\nThe differences between props and state are in their roles.\nThe basic difference is that the props object is passed to a component by its parent, while state is\nmanaged within a component.\nTo put it another way, props is similar to a function parameter, while state is similar to a local (pri-\nvate) variable defined inside the function. You can pass values from the state of a parent component\nto a child component (where they become part of the props object), but a component cannot modify\nthe state of its children.\nTable 6-1 summarizes the similarities and differences between props and state.\nTABLE 6-1 : Comparing props and state\nPROPS STATE",
		"vate) variable defined inside the function. You can pass values from the state of a parent component\nto a child component (where they become part of the props object), but a component cannot modify\nthe state of its children.\nTable 6-1 summarizes the similarities and differences between props and state.\nTABLE 6-1 : Comparing props and state\nPROPS STATE\nIs it passed from the parent? Yes No\nCan it change inside a component? No Yes\nCan it be changed by the parent? Yes No\nCan it be passed to child components? Yes Yes\nUpdating state\nOnce the initial state of a component has been set and the component has been rendered, updates to\nthe component (and to its children, if it has any) happen when the state changes.\n150 ❘ CHAPTER 6 React Data Flow\nYou might be wondering how React knows that the state object has changed. It actually doesn’t.\nThe reason that changes to state update components is that all changes to state must be done using",
		"the component (and to its children, if it has any) happen when the state changes.\n150 ❘ CHAPTER 6 React Data Flow\nYou might be wondering how React knows that the state object has changed. It actually doesn’t.\nThe reason that changes to state update components is that all changes to state must be done using\na function provided for that purpose. This function updates the state and then triggers a re- render of\nthe component.\nThe method that you use for updating a component’s state depends on whether you’re using a class\ncomponent or a function component.\nUpdating a Class Component’s state with setState\nIn class components, the setState method is the only way to modify the state once it’s been ini-\ntialized. You can use the setState method inside any method in a class component except the\nconstructor.\nThe setState method takes an object or a function as its argument and uses this argument to sched-\nule an update of the component’s state object.\nPassing an Object to setState",
		"In class components, the setState method is the only way to modify the state once it’s been ini-\ntialized. You can use the setState method inside any method in a class component except the\nconstructor.\nThe setState method takes an object or a function as its argument and uses this argument to sched-\nule an update of the component’s state object.\nPassing an Object to setState\nListing 6-25 shows a simple example of a class component that initializes a state object and then\nupdates it using setState each time a button is clicked.\nLISTING 6- 25: Using setState\nimport {Component} from 'react';\nclass CounterClass extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count:0};\nthis.increment = this.increment.bind(this);\n}\nincrement(){\nthis.setState({count: this.state.count + 1});\n}\nrender(){\nreturn(\n<button onClick={this.increment}>{this.state.count}</button>\n)\n}\n}\nexport default CounterClass;",
		"LISTING 6- 25: Using setState\nimport {Component} from 'react';\nclass CounterClass extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count:0};\nthis.increment = this.increment.bind(this);\n}\nincrement(){\nthis.setState({count: this.state.count + 1});\n}\nrender(){\nreturn(\n<button onClick={this.increment}>{this.state.count}</button>\n)\n}\n}\nexport default CounterClass;\nThis simple counter example demonstrates a basic usage of setState. In the increment function, I\npassed a new object containing a new value for the count property. If you run this component, you’ll\nsee that it works as follows:\n➤➤ Clicking the button triggers the increment method in the component.\n➤➤ The increment method calls the setState function, passing in a new value for this\n.state.count.\nReact State ❘ 151\n➤➤ Calling setState updates the value of state.count and then causes the component to\nre- render.\n➤➤ The new value of state.count is displayed on the button.",
		"see that it works as follows:\n➤➤ Clicking the button triggers the increment method in the component.\n➤➤ The increment method calls the setState function, passing in a new value for this\n.state.count.\nReact State ❘ 151\n➤➤ Calling setState updates the value of state.count and then causes the component to\nre- render.\n➤➤ The new value of state.count is displayed on the button.\nWhile this simple example can be fairly easily understood, it doesn’t do much to illuminate how\nsetState actually functions. For that, we’ll need a slightly more complex example with multiple\nproperties in the state object.\nMerging an Object into state with setState\nListing 6-26 simply adds another count property to the component, along with another button and\nanother increment function.\nLISTING 6- 26: Using setState with multiple state properties\nimport {Component} from 'react';\nclass CounterClass extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count1:0,count2:0};",
		"properties in the state object.\nMerging an Object into state with setState\nListing 6-26 simply adds another count property to the component, along with another button and\nanother increment function.\nLISTING 6- 26: Using setState with multiple state properties\nimport {Component} from 'react';\nclass CounterClass extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count1:0,count2:0};\nthis.incrementCount1 = this.incrementCount1.bind(this);\nthis.incrementCount2 = this.incrementCount2.bind(this);\n}\nincrementCount1(){\nthis.setState({count1: this.state.count1 + 1});\n}\nincrementCount2(){\nthis.setState({count2: this.state.count2 + 1});\n}\nrender(){\nreturn(\n<>\n<button onClick={this.incrementCount1}>Count 1: {this.state.count1}</button>\n<button onClick={this.incrementCount2}>Count 2: {this.state.count2}</button>\n</>\n)\n}\n}\nexport default CounterClass;\nIf you run the example in Listing 6-26, you’ll see that clicking each of the buttons increments the",
		"}\nincrementCount2(){\nthis.setState({count2: this.state.count2 + 1});\n}\nrender(){\nreturn(\n<>\n<button onClick={this.incrementCount1}>Count 1: {this.state.count1}</button>\n<button onClick={this.incrementCount2}>Count 2: {this.state.count2}</button>\n</>\n)\n}\n}\nexport default CounterClass;\nIf you run the example in Listing 6-26, you’ll see that clicking each of the buttons increments the\nrespective property in the state object. Notice, though, that each count’s increment function only\npasses the single property that’s being modified to setState and setState only updates the property\npassed to it.\n152 ❘ CHAPTER 6 React Data Flow\nWhile the previous example is not particularly thrilling, and the code could be simplified and made\nconsiderably more flexible, it demonstrates how the first way to use setState works: when you pass\nan object into setState, it merges that object with the existing state object.\nCalls to setState are Asynchronous",
		"passed to it.\n152 ❘ CHAPTER 6 React Data Flow\nWhile the previous example is not particularly thrilling, and the code could be simplified and made\nconsiderably more flexible, it demonstrates how the first way to use setState works: when you pass\nan object into setState, it merges that object with the existing state object.\nCalls to setState are Asynchronous\nWhen you call setState, it may not immediately update the state object. Instead, it actually just\nschedules, or enqueues, an update to the component’s state. The reason for this behavior is that\nit reduces the number of unnecessary component re-r enders, which improves performance of the\nReact app.\nIt’s helpful to think of a call to setState as a request, rather than an immediate operation.\nFor example, if a parent and child component both call setState in response to the same click event,\nthis would cause two re-r enders of the component if setState were to update state immediately.",
		"it reduces the number of unnecessary component re-r enders, which improves performance of the\nReact app.\nIt’s helpful to think of a call to setState as a request, rather than an immediate operation.\nFor example, if a parent and child component both call setState in response to the same click event,\nthis would cause two re-r enders of the component if setState were to update state immediately.\nBecause calls to setState are asynchronous, however, React will wait until both components have\ncalled setState before re- rendering.\nWhy Should You Care that setState Is Asynchronous?\nThe asynchronous nature of setState is a frequent cause of bugs or unexpected behavior in React.\nThe problem is that if you try to use the state object immediately after calling setState, you may\nnot get the most current state.\nIn Listing 6-27, I’ve written a method called incrementTwice that calls setState twice each time\nthe button is clicked. To show the difference between what the expected value of this.state",
		"The problem is that if you try to use the state object immediately after calling setState, you may\nnot get the most current state.\nIn Listing 6-27, I’ve written a method called incrementTwice that calls setState twice each time\nthe button is clicked. To show the difference between what the expected value of this.state\n.count is and the new value, the component also increments and logs the value of a property named\ntestCount.\nLISTING 6- 27: Demonstrating setState’s asychronous nature\nimport {Component} from 'react';\nclass CounterClass extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count:0};\nthis.testCount = 0;\nthis.incrementTwice = this.incrementTwice.bind(this);\n}\nincrementTwice(){\nthis.setState({count: this.state.count + 1});\nthis.testCount ++;\nthis.setState({count: this.state.count + 1});\nthis.testCount ++;\nconsole.log(\"Count should be: \" + this.testCount);\n}\nrender(){\nreturn(\nReact State ❘ 153\n<button onClick={this.incrementTwice}>{this.state.count}</button>\n)",
		"this.testCount = 0;\nthis.incrementTwice = this.incrementTwice.bind(this);\n}\nincrementTwice(){\nthis.setState({count: this.state.count + 1});\nthis.testCount ++;\nthis.setState({count: this.state.count + 1});\nthis.testCount ++;\nconsole.log(\"Count should be: \" + this.testCount);\n}\nrender(){\nreturn(\nReact State ❘ 153\n<button onClick={this.incrementTwice}>{this.state.count}</button>\n)\n}\n}\nexport default CounterClass;\nIf you didn’t know that setState is asynchronous, you would think that each click of the button\nwould increase the value of state.count by two. But, if you try out the component, you’ll discover\nthat it only increments by one. The reason is that the second call to setState happens before state\n.count has been updated by the first call. It therefore uses the same value of state.count that the\nfirst call used and the result is that both calls to setState change the value of state.count to the\nsame number.",
		"that it only increments by one. The reason is that the second call to setState happens before state\n.count has been updated by the first call. It therefore uses the same value of state.count that the\nfirst call used and the result is that both calls to setState change the value of state.count to the\nsame number.\nFigure 6-12 shows the result of clicking the button in the CounterClass component in Listing 6-27.\nFIGURE 6- 12: The result of clicking the CounterClass button\nTo solve this problem, you can pass a function into the setState function, rather than an object, to\nensure that setState uses the most up-t o- date value for the state object.\nPassing a Function into setState\nWhen you pass a function that returns an object into setState, the inner function receives the cur-\nrent state and props of the component and returns an updated state object. This function is called\nan updater function. The updater function variant of setState takes this form:\nsetState((state,props)=>{ return {};}",
		"Passing a Function into setState\nWhen you pass a function that returns an object into setState, the inner function receives the cur-\nrent state and props of the component and returns an updated state object. This function is called\nan updater function. The updater function variant of setState takes this form:\nsetState((state,props)=>{ return {};}\n154 ❘ CHAPTER 6 React Data Flow\nThe updater function is guaranteed to receive the latest state and props. For this reason, you should\nalways use an updater function when the new state depends on the current state.\nTo make it clear that the state received by the updater function is the most current state, it’s a com-\nmon practice to name this parameter current. In our increment function, we can use an updater\nfunction to update the value of state.count like this:\nsetState((current)=>{\nreturn {count: current.count + 1};\n});\nListing 6-28 shows how the updater function solves the problem in the incrementTwice function\nfrom Listing 6-27.",
		"mon practice to name this parameter current. In our increment function, we can use an updater\nfunction to update the value of state.count like this:\nsetState((current)=>{\nreturn {count: current.count + 1};\n});\nListing 6-28 shows how the updater function solves the problem in the incrementTwice function\nfrom Listing 6-27.\nLISTING 6- 28: Using the updater function with setState\nimport {Component} from 'react';\nclass CounterClass extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {count:0};\nthis.testCount = 0;\nthis.incrementTwice = this.incrementTwice.bind(this);\n}\nincrementTwice(){\nthis.setState((current)=>{return {count: current.count + 1};});\nthis.testCount++;\nthis.setState((current)=>{return {count: current.count + 1};});\nthis.testCount++;\nconsole.log(\"Count should be: \" + this.testCount);\n}\nrender(){\nreturn(\n<button onClick={this.incrementTwice}>{this.state.count}</button>\n)\n}\n}\nexport default CounterClass;",
		"}\nincrementTwice(){\nthis.setState((current)=>{return {count: current.count + 1};});\nthis.testCount++;\nthis.setState((current)=>{return {count: current.count + 1};});\nthis.testCount++;\nconsole.log(\"Count should be: \" + this.testCount);\n}\nrender(){\nreturn(\n<button onClick={this.incrementTwice}>{this.state.count}</button>\n)\n}\n}\nexport default CounterClass;\nFigure 6-13 shows the result of clicking the button in Listing 6-28. Notice that the testCount\nproperty is now in sync with state.count.\nUpdating state with Function Components\nWhen you call the useState hook, it returns an array. The first element of the array is a stateful vari-\nable. The second element is a setter function.\nReact State ❘ 155\nFIGURE 6- 13: The fixed counter class\nTo assign the state variable and the function to separate variables, use array deconstruction. For\nexample, to create a state variable called counter and a setter function for changing the value of\ncounter, use the following statement:",
		"able. The second element is a setter function.\nReact State ❘ 155\nFIGURE 6- 13: The fixed counter class\nTo assign the state variable and the function to separate variables, use array deconstruction. For\nexample, to create a state variable called counter and a setter function for changing the value of\ncounter, use the following statement:\nconst [counter,setCounter] = useState(0);\nThe variable name can be any valid JavaScript variable name. The function should be the name of the\nstate variable prefixed with “set,” although this is just a convention and not enforced by React.\nInitializing and updating state in function components is considerably simpler than doing so with\nclass components. Here are a few important things to know about using state in function components\nand the useState hook:\n1. The value you pass into useState will be the initial value for the stateful variable.\n2. Use const rather than let when creating stateful variables and setter functions.",
		"Initializing and updating state in function components is considerably simpler than doing so with\nclass components. Here are a few important things to know about using state in function components\nand the useState hook:\n1. The value you pass into useState will be the initial value for the stateful variable.\n2. Use const rather than let when creating stateful variables and setter functions.\n3. Unlike setState in class components, the setter function returned by useState replaces the\nvalue of the stateful variable with the new value you pass into it, rather than merging it with\nthe current state.\n4. After updating the stateful variable, the setter function causes a re-r ender of the component.\nEach of these four points deserves a bit more explanation, so let’s take a look at them one by one.\n156 ❘ CHAPTER 6 React Data Flow\nSetting Initial State with useState\nThe first time a function component calls useState, the returned variable will be assigned the value",
		"the current state.\n4. After updating the stateful variable, the setter function causes a re-r ender of the component.\nEach of these four points deserves a bit more explanation, so let’s take a look at them one by one.\n156 ❘ CHAPTER 6 React Data Flow\nSetting Initial State with useState\nThe first time a function component calls useState, the returned variable will be assigned the value\nyou pass into useState. This parameter is optional. If you call useState without passing an initial\nvalue, the variable will be assigned a value of undefined.\nThe initial state can be of any JavaScript data type, but it should be of the same data type as you will\nbe setting the variable to inside your component. For example, if you create a stateful variable called\nproducts to hold an array of products that will be loaded from an API, the initial value of products\nshould be an empty array ([]).\nIf you pass a function to the useState hook, the function will be invoked and its return value will be",
		"be setting the variable to inside your component. For example, if you create a stateful variable called\nproducts to hold an array of products that will be loaded from an API, the initial value of products\nshould be an empty array ([]).\nIf you pass a function to the useState hook, the function will be invoked and its return value will be\nused as the initial state.\nWhy Use const with useState?\nIt may seem wrong to use const for a stateful variable, since the whole purpose of a stateful variable\nis to be changed and the whole purpose of const is to prevent a variable from being changed. Never-\ntheless, it is recommended that you use const with useState, and it actually does make sense when\nyou think about how functions (and therefore function components) work.\nConsider the example of a stateful variable named counter and a setter function called setCounter.\nCalling setCounter and passing it a new value sets the value of a property in React’s state object",
		"theless, it is recommended that you use const with useState, and it actually does make sense when\nyou think about how functions (and therefore function components) work.\nConsider the example of a stateful variable named counter and a setter function called setCounter.\nCalling setCounter and passing it a new value sets the value of a property in React’s state object\nand then re-r enders the component. Unlike class components, where the render method can be called\nand use the same properties of the class each time, a function starts its life over each time it’s invoked.\nWhen React re- renders a function component, the function calls useState again, and useState\nreturns a new variable with the latest state value. So, the setter function doesn’t actually modify the\nvariable in the function at all—t he function gets a new const each time it’s invoked.\nBecause the whole point of a stateful variable is to trigger a re- render, the only way a stateful variable",
		"When React re- renders a function component, the function calls useState again, and useState\nreturns a new variable with the latest state value. So, the setter function doesn’t actually modify the\nvariable in the function at all—t he function gets a new const each time it’s invoked.\nBecause the whole point of a stateful variable is to trigger a re- render, the only way a stateful variable\nshould be updated is with the setter function returned by useState.\nThe Setter Function Replaces the State\nThe function returned by the useState hook replaces the current value of the stateful variable with\nthe value you pass into it. This makes working with stateful variables in functions simpler, but it also\nintroduces some additional complexity, especially when working with more complex state.\nState in function components is immutable. That is, you can’t change it; you can only replace it with\na new state. If the new state of a function component depends on the previous state, this creates",
		"the value you pass into it. This makes working with stateful variables in functions simpler, but it also\nintroduces some additional complexity, especially when working with more complex state.\nState in function components is immutable. That is, you can’t change it; you can only replace it with\na new state. If the new state of a function component depends on the previous state, this creates\nsome interesting problems and coding patterns—e specially when the stateful variable’s value is an\nobject or array.\nTo set a stateful variable that’s a primitive data type, simply pass the new value to the function:\nsetCounter(4);\nIf the new value depends on the previous value, you should use a function to access the previous state\nand return the new value:\nsetCounter((prevState)=>{return prevState+1});\nReact State ❘ 157\nIf your stateful variable contains an object or array, you can replace the value by passing in a new",
		"setCounter(4);\nIf the new value depends on the previous value, you should use a function to access the previous state\nand return the new value:\nsetCounter((prevState)=>{return prevState+1});\nReact State ❘ 157\nIf your stateful variable contains an object or array, you can replace the value by passing in a new\nobject or array. But, if your new state depends on the old state, you’ll need to make a copy of the\nexisting array or object, modify it, and then pass the copy of the array into the setter function.\nThe copy you make of an object or array can’t be just any copy. It needs to be a shallow copy. One\nof the easiest ways to make a shallow copy, which is widely used in React, is by using the spread\noperator (...).\nJAVASCRIPT LESSON: SHALLOW COPIES AND THE SPREAD OPERATOR\nOne of the most useful new tools in JavaScript is the spread operator. The spread\noperator is made up of three periods (...) and its job is to expand (or spread) the",
		"of the easiest ways to make a shallow copy, which is widely used in React, is by using the spread\noperator (...).\nJAVASCRIPT LESSON: SHALLOW COPIES AND THE SPREAD OPERATOR\nOne of the most useful new tools in JavaScript is the spread operator. The spread\noperator is made up of three periods (...) and its job is to expand (or spread) the\nvalue of a string, array, or object into separate parts.\nTo see how the spread operator works, we’ll start with a very simple example. The\nfollowing function accepts three numbers and returns the sum of the numbers:\nfunction sum(x,y,z){\nreturn x+y+z;\n}\nIf you have an array of three numbers that you want to find out the sum of, you\ncould invoke the sum function and pass in each element of the array separately,\nlike this:\nsum(myNumbers[0],myNumbers[1],myNumbers[2]);\nOr you could just spread the array into its component parts, which accomplishes the\nsame thing:\nsum(...myNumbers)",
		"function sum(x,y,z){\nreturn x+y+z;\n}\nIf you have an array of three numbers that you want to find out the sum of, you\ncould invoke the sum function and pass in each element of the array separately,\nlike this:\nsum(myNumbers[0],myNumbers[1],myNumbers[2]);\nOr you could just spread the array into its component parts, which accomplishes the\nsame thing:\nsum(...myNumbers)\nThe spread operator is useful in cases where you want to include all of the elements\nof an array or object in a new object or array, such as when you’re creating a new\narray or object that’s partially made up of an existing one.\nIn React, the spread operator is commonly used to work with immutable state vari-\nables, especially in function components.\nWhen you’re working with mutable data in JavaScript and you have an array and\nyou want to add an element to it, you can use the Array.push function, like this:\nlet temperatures = [31,29,35];\ntemperatures.push[32];",
		"array or object that’s partially made up of an existing one.\nIn React, the spread operator is commonly used to work with immutable state vari-\nables, especially in function components.\nWhen you’re working with mutable data in JavaScript and you have an array and\nyou want to add an element to it, you can use the Array.push function, like this:\nlet temperatures = [31,29,35];\ntemperatures.push[32];\nThe result of these statements is that the temperatures array will look like this:\n[31,29,35,32]\nBecause React state is immutable and can only be changed using the setState func-\ntion or the function returned by useState, if you want to change the value of an\narray or object inside the state, you need to make a new array or object rather than\nmutating the existing one.\ncontinues\n158 ❘ CHAPTER 6 React Data Flow\ncontinued\nCopying an Array with Spread\nJavaScript arrays are reference values. When you use the = operator to make a copy",
		"tion or the function returned by useState, if you want to change the value of an\narray or object inside the state, you need to make a new array or object rather than\nmutating the existing one.\ncontinues\n158 ❘ CHAPTER 6 React Data Flow\ncontinued\nCopying an Array with Spread\nJavaScript arrays are reference values. When you use the = operator to make a copy\nof an array, the new array still has a reference to the old one. Follow these steps to\nsee the consequences of this:\n1. Open the JavaScript console in Chrome.\n2. Create a new array, such as the following one:\nlet arr = ['red','green','blue'];\n3. Use the = operator to make a new array from the original one:\nlet newArr = arr;\n4. Add an element to the new array:\nnewArr.push('orange');\n5. Write out the value of the original array to the console:\narr\nThe following image shows the result, which is that adding a new element to the\ncopy created using the = operator also changes the original array.",
		"let arr = ['red','green','blue'];\n3. Use the = operator to make a new array from the original one:\nlet newArr = arr;\n4. Add an element to the new array:\nnewArr.push('orange');\n5. Write out the value of the original array to the console:\narr\nThe following image shows the result, which is that adding a new element to the\ncopy created using the = operator also changes the original array.\nTo make a copy of an array that doesn’t reference the original one, you need to copy\neach element in the original array into a new array. The new array created in this\nway is called a shallow copy. As with everything in JavaScript, there are several ways\nto make a shallow copy of an array. One way is by using a loop, like this:\nlet numbers = [1, 2, 3];\nlet numbersCopy = [];\nfor (i = 0; i < numbers.length; i++) {\nnumbersCopy[i] = numbers[i];\n}\nAnother method is to use the slice function. slice returns a shallow copy of an\narray based on the start and end element indexes you provide. If you call slice",
		"to make a shallow copy of an array. One way is by using a loop, like this:\nlet numbers = [1, 2, 3];\nlet numbersCopy = [];\nfor (i = 0; i < numbers.length; i++) {\nnumbersCopy[i] = numbers[i];\n}\nAnother method is to use the slice function. slice returns a shallow copy of an\narray based on the start and end element indexes you provide. If you call slice\non an array without passing in any arguments, it returns a shallow copy of the\nwhole array:\nnumbersCopy = numbers.slice();\nReact State ❘ 159\nUsing the spread operator makes this same operation even easier. You simply use\nsquare brackets to create a new array, and then populate it with each element in the\nold array by prefacing the name of the old array with the spread operator:\nnumbersCopy = [...numbers];\nChanging an Array with Spread\nJavaScript has several different methods for modifying, adding, and removing ele-\nments from arrays. For example, if you want to add an element to the end of an\narray, you can use the Array.push method:",
		"old array by prefacing the name of the old array with the spread operator:\nnumbersCopy = [...numbers];\nChanging an Array with Spread\nJavaScript has several different methods for modifying, adding, and removing ele-\nments from arrays. For example, if you want to add an element to the end of an\narray, you can use the Array.push method:\nnumbersCopy.push(4);\nsetNumbers(numbersCopy);\nOther array methods include:\n➤➤ Array.pop: Removes an element from the end of an array.\n➤➤ Array.shift: Adds an element to the beginning of an array.\n➤➤ Array.unshift: Removes an element from the beginning of an array.\nEach of these array methods actually modifies, or mutates, the array, however. To\nwork with immutable data, such as React state, the spread operator can be used to\naccomplish each of these tasks. For example, if you want to copy an array and add\nan element to the end of it, you can do that like this:\nnumbersCopy = [...numbers,14];",
		"Each of these array methods actually modifies, or mutates, the array, however. To\nwork with immutable data, such as React state, the spread operator can be used to\naccomplish each of these tasks. For example, if you want to copy an array and add\nan element to the end of it, you can do that like this:\nnumbersCopy = [...numbers,14];\nIf you want to change the value of a certain element in an array, you need to know\nthe index of that element, then you can use what I refer to as the “sandwich”\nmethod— two slices and spread:\nconst newArray = [ ...oldArray.slice(0, indexToChange),\nupdatedValue,\n...oldArray.slice(indexToChange+1) ];\nAlthough it may look strange and confusing at first, this method of modifying an ele-\nment in an array is actually quite simple, and it’s widely used in React programming.\nIf you know the index of the element in the array you want to modify, you make a\nshallow copy of the original array from the first element in the array (0) up to the",
		"updatedValue,\n...oldArray.slice(indexToChange+1) ];\nAlthough it may look strange and confusing at first, this method of modifying an ele-\nment in an array is actually quite simple, and it’s widely used in React programming.\nIf you know the index of the element in the array you want to modify, you make a\nshallow copy of the original array from the first element in the array (0) up to the\nelement you want to change. Then, you insert the new value into the array. Finally,\nyou insert the rest of the elements in the array into the new array by passing just the\nnumber of the next element in the original array into slice.\nCopying an Object with Spread\nThe spread operator can also be used to create a shallow copy of an object. A\nshallow copy of an object is a copy that only includes the properties, and not the\nprototype:\nlet obj1 = { foo: 'bar', x: 0 };\nlet clonedObj = { ...obj1 };\ncontinues\n160 ❘ CHAPTER 6 React Data Flow\ncontinued",
		"number of the next element in the original array into slice.\nCopying an Object with Spread\nThe spread operator can also be used to create a shallow copy of an object. A\nshallow copy of an object is a copy that only includes the properties, and not the\nprototype:\nlet obj1 = { foo: 'bar', x: 0 };\nlet clonedObj = { ...obj1 };\ncontinues\n160 ❘ CHAPTER 6 React Data Flow\ncontinued\nCombining two objects with spread is as simple as combining two arrays:\nlet obj1 = { foo: 'bar', x: 0 };\nlet obj2 = { food: 'taco', y: 1 };\nlet mergedObj = { ...obj1, ...obj2 };\nThe new object will look like this:\n{foo: 'bar', x: 0, food: 'taco', y: 1}\nChanging a property while cloning or merging objects is also simple with objects.\nJust use the spread operator to expand the object, and then overwrite one or more\nexisting properties:\nlet newObj = {...obj1, x: 42 };\nThe resulting object will now look like this:\n{foo: 'bar', x:42}\nBonus JavaScript Lesson: Rest Parameters",
		"The new object will look like this:\n{foo: 'bar', x: 0, food: 'taco', y: 1}\nChanging a property while cloning or merging objects is also simple with objects.\nJust use the spread operator to expand the object, and then overwrite one or more\nexisting properties:\nlet newObj = {...obj1, x: 42 };\nThe resulting object will now look like this:\n{foo: 'bar', x:42}\nBonus JavaScript Lesson: Rest Parameters\nOnce you’re comfortable with how the spread operator works, understanding its\ntwin, rest parameters, is easy. Rest parameters use the same three- period operator\nas spread syntax. What’s different about it is where rest parameters are used. As the\nname implies, rest parameters are parameters that you can define in function defini-\ntions. Here’s an example:\nfunction(a,b,...c){\n// do something here\n}\nWhen you use a rest parameter, the function will aggregate the arguments passed\ninto the function where the rest parameter is and any following arguments into an\narray inside the function.",
		"name implies, rest parameters are parameters that you can define in function defini-\ntions. Here’s an example:\nfunction(a,b,...c){\n// do something here\n}\nWhen you use a rest parameter, the function will aggregate the arguments passed\ninto the function where the rest parameter is and any following arguments into an\narray inside the function.\nFor example, in the following function the first two arguments will become function-\nscoped variables, and an array named toppings will be created with however many\narguments are passed into the function after the first two:\nfunction pizza(size,crust,...toppings){\n// do something here\n}\nIn the following example, the add function will take any number of arguments and\nreturn the sum of them, using the Array.reduce function:\nfunction add(..numbers) {\nreturn numbers.reduce((sum, next) => sum + next)\n}\nNow that you know about the rest and spread operators, you’ll recognize and be",
		"function pizza(size,crust,...toppings){\n// do something here\n}\nIn the following example, the add function will take any number of arguments and\nreturn the sum of them, using the Array.reduce function:\nfunction add(..numbers) {\nreturn numbers.reduce((sum, next) => sum + next)\n}\nNow that you know about the rest and spread operators, you’ll recognize and be\nable to understand their role in JavaScript code, as well as their special powers when\nused in React and JSX.\nReact State ❘ 161\nWhat to Put in State\nWhether you use class components or function components, changes to state data are what initiate\nchanges to your user interface. If you think of the data in your React user interface as a river, state is\nthe melting snow in the mountains that sets everything off.\nOne of the first steps in designing any React user interface is to figure out what the state of your\napplication is. While it may not always be immediately obvious at first, as you become more comfort-",
		"changes to your user interface. If you think of the data in your React user interface as a river, state is\nthe melting snow in the mountains that sets everything off.\nOne of the first steps in designing any React user interface is to figure out what the state of your\napplication is. While it may not always be immediately obvious at first, as you become more comfort-\nable with React, you’ll get better at identifying the state.\nAs a rule, if a piece of data changes over time in response to data coming in from an external source\nor user input, it is likely state.\nBuilding the Reminders App\nLet’s take a look at a demo application and determine what its state is, and then implement it.\nBefore we can implement state, however, we need to take a brief detour to build the structure of the\napplication.\nFigure 6-14 shows a mockup of a user interface for a simple reminders app. The user can enter a task",
		"or user input, it is likely state.\nBuilding the Reminders App\nLet’s take a look at a demo application and determine what its state is, and then implement it.\nBefore we can implement state, however, we need to take a brief detour to build the structure of the\napplication.\nFigure 6-14 shows a mockup of a user interface for a simple reminders app. The user can enter a task\ninto the form and set a due date. The app will show a list of tasks and the user can filter tasks using a\ndropdown menu and mark tasks as completed.\nTypically, once you’ve created a mockup of an app, the next step in the development of a React user\ninterface is to figure out what components will make up the app and then make a “static” ver-\nsion of the app. A static version simply passes props from parents to children and doesn’t have any\ninteractivity.\nBefore I get started with building the app, I’ll set up the development environment using Create React",
		"interface is to figure out what components will make up the app and then make a “static” ver-\nsion of the app. A static version simply passes props from parents to children and doesn’t have any\ninteractivity.\nBefore I get started with building the app, I’ll set up the development environment using Create React\nApp. If you plan to follow along, open your terminal in VS Code and create a new project by entering\nthe following command:\nnpx create- react- app reminders- app\nAfter Create React App finishes its work, you’ll see the new project in the file explorer in VS Code.\nOpen the src directory inside the reminders- app directory, and delete everything from there except\nfor the following files:\n➤➤ index.js\n➤➤ index.css\n➤➤ reportWebVitals.js\nNow we’re ready to get started.\nFrom my initial evaluation of the mockup in Figure 6-14, I’ve determined that the Reminders app\nshould have the following components:\n➤➤ An entry form and submit button component.\n➤➤ A filter select dropdown component.",
		"for the following files:\n➤➤ index.js\n➤➤ index.css\n➤➤ reportWebVitals.js\nNow we’re ready to get started.\nFrom my initial evaluation of the mockup in Figure 6-14, I’ve determined that the Reminders app\nshould have the following components:\n➤➤ An entry form and submit button component.\n➤➤ A filter select dropdown component.\n162 ❘ CHAPTER 6 React Data Flow\n➤➤ A list of reminders.\n➤➤ An individual reminder component (which will be reused for each reminder in the list).\nWhat do you want to do?\nWhen?\nAdd Item\nShow Items Due By ...\nItem 1\nItem 2\nItem 3\nItem 4\nFIGURE 6- 14: A reminders app\nIn addition to these components, there’s one more component that we need to make this app com-\nplete: a container. The container component will enclose all of the other components in the app and\nwill provide an overall structure and style to the app. The container component is frequently named\nApp, although, as with most things in React, you’re free to call it whatever you like.",
		"In addition to these components, there’s one more component that we need to make this app com-\nplete: a container. The container component will enclose all of the other components in the app and\nwill provide an overall structure and style to the app. The container component is frequently named\nApp, although, as with most things in React, you’re free to call it whatever you like.\nNow that I’ve figured out what components I’ll need to make, the next step is to think up names for\nthe components and then write static versions of them.\nReact State ❘ 163\nThe first component I’ll make is App, and I’ll include import statements and JSX elements for its sub-\ncomponents (which I have yet to make). Listing 6-29 shows a static version of the App component.\nLISTING 6- 29: The static version of the App component\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nfunction App(){\nreturn(\n<div>\n<InputForm />\n<FilterSelect />",
		"components (which I have yet to make). Listing 6-29 shows a static version of the App component.\nLISTING 6- 29: The static version of the App component\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nfunction App(){\nreturn(\n<div>\n<InputForm />\n<FilterSelect />\n<RemindersList />\n</div>\n);\n}\nexport default App;\nNotice that I didn’t pass props into App. Since App is the top- level component, we won’t be passing\nany props to it, so there’s currently no need to specify props in the parameter list.\nOnce you’ve created the container component, the next step is to create empty files for each of the\ncomponents that App imports, and to make shell components for each one. Listing 6-30 shows an\nexample of the start of the InputForm component.\nLISTING 6- 30: A shell component for InputForm\nfunction InputForm(props){\nreturn(\n<div>Input form here</div>\n);\n}\nexport default InputForm;",
		"Once you’ve created the container component, the next step is to create empty files for each of the\ncomponents that App imports, and to make shell components for each one. Listing 6-30 shows an\nexample of the start of the InputForm component.\nLISTING 6- 30: A shell component for InputForm\nfunction InputForm(props){\nreturn(\n<div>Input form here</div>\n);\n}\nexport default InputForm;\nYou can copy and modify this basic shell component for each of the rest of the components. List-\ning 6-31 shows a shell component for FilterSelect, Listing 6-32 shows one for RemindersList,\nand Listing 6-33 shows the one for the Reminder component.\nLISTING 6- 31: A shell component for FilterSelect\nfunction FilterSelect(props){\nreturn(\n<div>Filter the List</div>\n);\n}\nexport default FilterSelect;\n164 ❘ CHAPTER 6 React Data Flow\nLISTING 6- 32: A shell component for RemindersList\nfunction RemindersList(props){\nreturn(\n<div>Reminders List</div>\n);\n}\nexport default RemindersList;",
		"and Listing 6-33 shows the one for the Reminder component.\nLISTING 6- 31: A shell component for FilterSelect\nfunction FilterSelect(props){\nreturn(\n<div>Filter the List</div>\n);\n}\nexport default FilterSelect;\n164 ❘ CHAPTER 6 React Data Flow\nLISTING 6- 32: A shell component for RemindersList\nfunction RemindersList(props){\nreturn(\n<div>Reminders List</div>\n);\n}\nexport default RemindersList;\nLISTING 6- 33: A shell component for Reminder\nfunction Reminder(props){\nreturn(\n<div>Reminder</div>\n);\n}\nexport default Reminder;\nOn a simple app such as this, you can now just go through the components and start to make each\none’s return statement look a little bit more like what you think the final component will need to\nbe. Don’t worry about getting everything perfect. Writing React code is usually an iterative process—\nwrite some code, see what it looks like, improve it, and then write some more.\nThe first thing you might want to do to improve on what we have so far is to link in the Reminder",
		"one’s return statement look a little bit more like what you think the final component will need to\nbe. Don’t worry about getting everything perfect. Writing React code is usually an iterative process—\nwrite some code, see what it looks like, improve it, and then write some more.\nThe first thing you might want to do to improve on what we have so far is to link in the Reminder\ncomponent. The RemindersList component will contain all of the instances of the Reminder compo-\nnent, so we can import Reminder into it and also put in a couple instances of the Reminder element,\nas shown in Listing 6-34.\nLISTING 6- 34: RemindersList with Reminder imported\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nreturn(\n<div>\n<Reminder />\n<Reminder />\n<Reminder />\n</div>\n);\n}\nexport default RemindersList;\nIf you compile and build this app as it is so far (using a Create React App boilerplate application to",
		"as shown in Listing 6-34.\nLISTING 6- 34: RemindersList with Reminder imported\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nreturn(\n<div>\n<Reminder />\n<Reminder />\n<Reminder />\n</div>\n);\n}\nexport default RemindersList;\nIf you compile and build this app as it is so far (using a Create React App boilerplate application to\nprovide the toolchain and basic structure), you’ll see something like what’s shown in Figure 6-15.\nClearly, this is far from being a full static version of the app, but it’s a great start. Let’s go through\nanother round of changes and get this static app to look a bit more like the mockup. We’ll also define\nsome props and pass some fake data down to child components.\nReact State ❘ 165\nFIGURE 6- 15: The first round static version\nThe App component can stay how it is for now. We’ll add functionality and style to it eventually, but\nthat can come later.\nThe InputForm component should have a text input, a date input, and a button. I’ll also add in a",
		"some props and pass some fake data down to child components.\nReact State ❘ 165\nFIGURE 6- 15: The first round static version\nThe App component can stay how it is for now. We’ll add functionality and style to it eventually, but\nthat can come later.\nThe InputForm component should have a text input, a date input, and a button. I’ll also add in a\ncouple of attributes for the input element and change the container element for these elements to a\nform element. Listing 6-35 shows the InputForm component with these improvements made.\nLISTING 6- 35: Round two of InputForm\nfunction InputForm(props){\nreturn(\n<form>\n<input id=\"reminderText\" type=\"text\" placeholder=\"What do you want to do?\" />\n<input id=\"dueDate\" type=\"date\" />\n<button>Add Item</button>\n</form>\n);\n}\nexport default InputForm;\nThe FilterSelect component should contain a select input with several options. I’ll define these\noptions in my second round of changes, as shown in Listing 6-36. We’ll assume that the filter will",
		"return(\n<form>\n<input id=\"reminderText\" type=\"text\" placeholder=\"What do you want to do?\" />\n<input id=\"dueDate\" type=\"date\" />\n<button>Add Item</button>\n</form>\n);\n}\nexport default InputForm;\nThe FilterSelect component should contain a select input with several options. I’ll define these\noptions in my second round of changes, as shown in Listing 6-36. We’ll assume that the filter will\n166 ❘ CHAPTER 6 React Data Flow\nbe applied when the selected value changes, so there’s no need to add a button to the FilterSelect\ncomponent. If you recall from Chapter 3, select elements in React JSX have a value attribute that\ndetermines which option is currently selected.\nLISTING 6- 36: Round two of FilterSelect\nfunction FilterSelect(props){\nreturn(\n<label htmlFor=\"filterReminders\">Show tasks due:\n<select id=\"filterReminders\" value=\"2day\">\n<option value=\"2day\">within 2 Days</option>\n<option value=\"1week\">within 1 Week</option>\n<option value=\"30days\">within 30 Days</option>",
		"determines which option is currently selected.\nLISTING 6- 36: Round two of FilterSelect\nfunction FilterSelect(props){\nreturn(\n<label htmlFor=\"filterReminders\">Show tasks due:\n<select id=\"filterReminders\" value=\"2day\">\n<option value=\"2day\">within 2 Days</option>\n<option value=\"1week\">within 1 Week</option>\n<option value=\"30days\">within 30 Days</option>\n<option value=\"all\">any time</option>\n</select>\n</label>\n);\n}\nexport default FilterSelect;\nThe RemindersList component’s purpose is to contain one Reminder element for each reminder in\nthe list. For our static version, we can pass sample text, a due date, and a status from RemindersList\nto each Reminder, as shown in Listing 6-37.\nLISTING 6- 37: Round two of RemindersList\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nreturn(\n<div>\n<Reminder reminderText=\"Pick up Wesley\" dueDate=\"2364-0 1- 15\"\nisComplete={false} />\n<Reminder reminderText=\"Meet with Jean-L uc\" dueDate=\"2364- 01- 29\"\nisComplete={false} />",
		"to each Reminder, as shown in Listing 6-37.\nLISTING 6- 37: Round two of RemindersList\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nreturn(\n<div>\n<Reminder reminderText=\"Pick up Wesley\" dueDate=\"2364-0 1- 15\"\nisComplete={false} />\n<Reminder reminderText=\"Meet with Jean-L uc\" dueDate=\"2364- 01- 29\"\nisComplete={false} />\n<Reminder reminderText=\"Holodeck time!\" dueDate=\"2364-0 6- 01\"\nisComplete={false} />\n</div>\n);\n}\nexport default RemindersList;\nThe Reminder component can now accept the props data from RemindersList and display it, as\nshown in Listing 6-38. Because the Boolean value from props.isComplete won’t display in the\nbrowser, we can convert it to a string in the JSX.\nReact State ❘ 167\nLISTING 6- 38: Round two of Reminder\nfunction Reminder(props){\nreturn(\n<div>item: {props.reminderText}\ndue date: {props.dueDate}\nCompleted?: {String(props.isComplete)}\n</div>\n);\n}\nexport default Reminder;",
		"shown in Listing 6-38. Because the Boolean value from props.isComplete won’t display in the\nbrowser, we can convert it to a string in the JSX.\nReact State ❘ 167\nLISTING 6- 38: Round two of Reminder\nfunction Reminder(props){\nreturn(\n<div>item: {props.reminderText}\ndue date: {props.dueDate}\nCompleted?: {String(props.isComplete)}\n</div>\n);\n}\nexport default Reminder;\nOur Reminders app still isn’t pretty, as you can see in Figure 6-16, but more of the pieces are in place\nnow and we have a foundation upon which we can start to implement the dynamic data, or state.\nFIGURE 6- 16: A static version of the Reminders app\nAfter you’ve made your static version, you can figure out what data in the app causes the app to\nchange— what should be in the state of the app, in other words.\nIn the case of the Reminders app, it has the following pieces of data:\n➤➤ The user’s current textual input.\n➤➤ The currently selected due date.\n➤➤ The list of reminders.\n➤➤ Individual reminders.",
		"After you’ve made your static version, you can figure out what data in the app causes the app to\nchange— what should be in the state of the app, in other words.\nIn the case of the Reminders app, it has the following pieces of data:\n➤➤ The user’s current textual input.\n➤➤ The currently selected due date.\n➤➤ The list of reminders.\n➤➤ Individual reminders.\n168 ❘ CHAPTER 6 React Data Flow\n➤➤ The reminder status (completed or not completed).\n➤➤ The selected filter.\n➤➤ The filtered list of tasks.\nThink for a moment about which pieces of data should or should not be state. Here’s what I’ve\ncome up with:\n➤➤ The user’s current input is certainly state, since it changes as the user types.\n➤➤ The selected due date, likewise, is state.\n➤➤ The list of reminders changes as new tasks are added, so it is state.\n➤➤ The individual tasks within the list are unchanging, and are not state.\n➤➤ The completed status of each task is state, since the user can change it.\n➤➤ The selected filter is state.",
		"➤➤ The user’s current input is certainly state, since it changes as the user types.\n➤➤ The selected due date, likewise, is state.\n➤➤ The list of reminders changes as new tasks are added, so it is state.\n➤➤ The individual tasks within the list are unchanging, and are not state.\n➤➤ The completed status of each task is state, since the user can change it.\n➤➤ The selected filter is state.\n➤➤ The filtered list is not state.\nIn the next section, I’ll explain why some of these items should not be state. Oftentimes, your initial\njudgment about what needs to be state changes as you code your app. It’s important to stay flex-\nible and look for opportunities to reduce the size of your state object. The more data in your app\ncan be moved out of state and into props, the simpler (and perhaps faster and more efficient) your\napp will be.\nWhat Not to Put in State\nAnother way to think about what should be state is to follow a few rules for determining what\nisn’t state:",
		"ible and look for opportunities to reduce the size of your state object. The more data in your app\ncan be moved out of state and into props, the simpler (and perhaps faster and more efficient) your\napp will be.\nWhat Not to Put in State\nAnother way to think about what should be state is to follow a few rules for determining what\nisn’t state:\n➤➤ If it’s passed from a parent component to a child component, it’s not state.\n➤➤ If it remains unchanged throughout its life, it’s not state.\n➤➤ If it can be computed based on other values, it’s not state.\nGenerally speaking, individual task items should not be kept in state. My reasoning for this is that\nthese tasks, once created, are unchanging. Also, as you’ll learn, the tasks are going to be stored in the\nparent component and passed down to the individual task components using props.\nThe filtered list of tasks that displays when you select a time period from the dropdown list also",
		"Generally speaking, individual task items should not be kept in state. My reasoning for this is that\nthese tasks, once created, are unchanging. Also, as you’ll learn, the tasks are going to be stored in the\nparent component and passed down to the individual task components using props.\nThe filtered list of tasks that displays when you select a time period from the dropdown list also\nshould not be stored in state. This is because this list will be computed based on the due dates.\nBecause it can be computed and displayed based on other props and state, it’s not state itself.\nWhere to Put State\nOnce you’ve determined what is and what isn’t state, the next step in the development of a React user\ninterface is to figure out where each piece of state should be located. In other words, which com-\nponent should we initialize the state inside of by either using the class- based component method of\nsetting this.state, or by using the useState hook.\nReact State ❘ 169",
		"Where to Put State\nOnce you’ve determined what is and what isn’t state, the next step in the development of a React user\ninterface is to figure out where each piece of state should be located. In other words, which com-\nponent should we initialize the state inside of by either using the class- based component method of\nsetting this.state, or by using the useState hook.\nReact State ❘ 169\nSo, let’s take another look at each piece of state that we identified and decide what component it\nshould be declared in. Here’s an outline of our current user interface, taken from the components cre-\nated during the building of the static version:\nApp\n- InputForm\n- Filter\n- RemindersList\n- Reminder\nAnd here, once again, is the list of state items that we’ve identified in the app so far:\n➤➤ User input.\n➤➤ Selected due date.\n➤➤ Reminder list.\n➤➤ Reminder status.\n➤➤ Selected filter.\nNow, I’ll go through each of these candidates for state and figure out where to put them in the com-\nponent hierarchy:",
		"App\n- InputForm\n- Filter\n- RemindersList\n- Reminder\nAnd here, once again, is the list of state items that we’ve identified in the app so far:\n➤➤ User input.\n➤➤ Selected due date.\n➤➤ Reminder list.\n➤➤ Reminder status.\n➤➤ Selected filter.\nNow, I’ll go through each of these candidates for state and figure out where to put them in the com-\nponent hierarchy:\n➤➤ The current user input seems like it should be stored in the component that contains the\nform, so we’ll put that in the InputForm component.\n➤➤ The currently selected due date seems like it should be stored with the user input. So, we’ll\nput that in the InputForm component as well.\n➤➤ The list of reminders, logically, would seem to go into the RemindersList component.\n➤➤ The isComplete status of each reminder item probably belongs inside of each Reminder\ncomponent.\n➤➤ The filter that is currently selected can go with the Filter component.",
		"put that in the InputForm component as well.\n➤➤ The list of reminders, logically, would seem to go into the RemindersList component.\n➤➤ The isComplete status of each reminder item probably belongs inside of each Reminder\ncomponent.\n➤➤ The filter that is currently selected can go with the Filter component.\nNow that we’ve put each piece of state into a component, let’s look at the outline of components\nagain, with the state values that each one contains:\n<App>\n- <InputForm>\n- currentInput\n- selectedDate\n- <Filter>\n- selectedFilter\n- <RemindersList>\n170 ❘ CHAPTER 6 React Data Flow\n- reminders\n- <Reminder>\n- isComplete\nAlthough it seems logical, the organization of the state in our app has some serious problems that\nbecome apparent as you think about how it will actually function. Here are a few of the bigger issues:\n1. In the preceding outline, each reminder keeps track of its own completed status. If we wanted",
		"- <RemindersList>\n170 ❘ CHAPTER 6 React Data Flow\n- reminders\n- <Reminder>\n- isComplete\nAlthough it seems logical, the organization of the state in our app has some serious problems that\nbecome apparent as you think about how it will actually function. Here are a few of the bigger issues:\n1. In the preceding outline, each reminder keeps track of its own completed status. If we wanted\nthe RemindersList component to only list the completed tasks, or only list the uncompleted\nones, RemindersList would first need to query each Reminder and find out its status.\n2. The Filter and RemindersList components are siblings. If you recall that data always\nflows down in a React app, you’ll see a problem here. If Filter maintains its own state\nabout which filter is currently selected, there’s no way to get that information to the\nRemindersList component so that the correct Reminder components can be displayed.",
		"2. The Filter and RemindersList components are siblings. If you recall that data always\nflows down in a React app, you’ll see a problem here. If Filter maintains its own state\nabout which filter is currently selected, there’s no way to get that information to the\nRemindersList component so that the correct Reminder components can be displayed.\n3. InputForm is also a sibling of RemindersList. Since the goal of the user input form is to add\na new item to the list of reminders, we need the current user input to be able to be passed to\nthe RemindersList component. With these components being siblings, there’s no easy way\nto do this.\nIt seems that our little Reminders app is getting pretty complicated. We’ll need to figure out how the\nRemindersList component will query all of the Reminders for their status, we’ll need to figure out\nhow to get around this problem with passing data between sibling components, and we have all this",
		"the RemindersList component. With these components being siblings, there’s no easy way\nto do this.\nIt seems that our little Reminders app is getting pretty complicated. We’ll need to figure out how the\nRemindersList component will query all of the Reminders for their status, we’ll need to figure out\nhow to get around this problem with passing data between sibling components, and we have all this\nstate data spread throughout our app that we’re going to need to remember and keep track of. There\nmust be a simpler way, you say.\nThere is, and it’s called lifting state up.\nLifting State Up\nHaving a lot of components that each independently maintain their own state can very quickly\nincrease the complexity of your app, and therefore the chances of something breaking. A good rule of\nthumb, therefore, is that the majority of your components should be stateless pure functions.\nA pure function, as you’ll recall from Chapter 4, is one in which the output of the function is solely",
		"Having a lot of components that each independently maintain their own state can very quickly\nincrease the complexity of your app, and therefore the chances of something breaking. A good rule of\nthumb, therefore, is that the majority of your components should be stateless pure functions.\nA pure function, as you’ll recall from Chapter 4, is one in which the output of the function is solely\na result of the input to it. In other words, a pure function will always produce the same output when\ngiven the same input.\nTo turn stateful components into stateless components, React developers use a technique called “lift-\ning state up.” This means that, instead of a component controlling its own state, you can have a com-\nponent at a higher level in the hierarchy of your user interface control the state. This state can then be\npassed down as props to the components that need it.\nLifting state up gives you the benefit of having fewer components that can possibly cause your user",
		"ing state up.” This means that, instead of a component controlling its own state, you can have a com-\nponent at a higher level in the hierarchy of your user interface control the state. This state can then be\npassed down as props to the components that need it.\nLifting state up gives you the benefit of having fewer components that can possibly cause your user\ninterface to change, it makes your components more easily reusable, and it makes your app eas-\nier to test.\nTo determine where to lift your state up to, think about where each piece of state in your application\nis needed, and then find a parent common to all of the components that use each piece of state.\nReact State ❘ 171\nFor example, in our Reminders app, the list of reminders is used by the InputForm, Filter, Remind-\nersList, and Reminder components. The only component in our application that’s a common parent\nto all of these is the App component. So, that’s where that piece of stateful data should live.",
		"React State ❘ 171\nFor example, in our Reminders app, the list of reminders is used by the InputForm, Filter, Remind-\nersList, and Reminder components. The only component in our application that’s a common parent\nto all of these is the App component. So, that’s where that piece of stateful data should live.\nIn fact, if you look through the list of stateful variables we identified for the Reminders app, you’ll\ndiscover that each one of them actually should belong to the App component, and also that some of\nthem can be combined.\nThe reminders and isComplete values, for example, can be combined into a single array of objects,\nwith each object having a reminderText property, an isComplete property, and a dueDate property:\n[\n{reminderText:\"do laundry\",dueDate:\"2022-0 1- 01\",isComplete:false},\n{reminderText:\"finish chapter\",dueDate: \"2022-0 2- 01\",isComplete:false},\n{reminderText:\"make Pizza\",dueDate: \"2022-0 3- 01\",isComplete:false}\n]",
		"with each object having a reminderText property, an isComplete property, and a dueDate property:\n[\n{reminderText:\"do laundry\",dueDate:\"2022-0 1- 01\",isComplete:false},\n{reminderText:\"finish chapter\",dueDate: \"2022-0 2- 01\",isComplete:false},\n{reminderText:\"make Pizza\",dueDate: \"2022-0 3- 01\",isComplete:false}\n]\nLikewise, the currentInput and selectedDate can also be combined into an object. This has the\nbenefit of creating exactly the right data structure for insertion into the reminder list.\nSince the useState hook not only creates the stateful variable, but also creates the function for set-\nting that variable, you can pass both of these down to the proper components as props.\nWith those changes done, our App component with the lifted-u p state is shown in Listing 6-39.\nLISTING 6- 39: App with lifted state\nimport {useState} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nfunction App(){",
		"ting that variable, you can pass both of these down to the proper components as props.\nWith those changes done, our App component with the lifted-u p state is shown in Listing 6-39.\nLISTING 6- 39: App with lifted state\nimport {useState} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nfunction App(){\nconst [reminders,setReminders] = useState();\nconst [userInput,setUserInput] = useState();\nconst [selectedFilter,setSelectedFilter] = useState(\"all\");\nreturn(\n<div>\n<InputForm userInput={userInput}\nsetUserInput={setUserInput} />\n<FilterSelect selectedFilter={selectedFilter}\nsetSelectedFilter={setSelectedFilter} />\n<RemindersList reminders={reminders} />\n</div>\n);\n}\nexport default App;\nNext, I’ll receive and make use of the stateful data, which I’ve passed down to the subcomponents\nas props, and write all of the subcomponents of App as pure functions. Listing 6-40 shows the",
		"setUserInput={setUserInput} />\n<FilterSelect selectedFilter={selectedFilter}\nsetSelectedFilter={setSelectedFilter} />\n<RemindersList reminders={reminders} />\n</div>\n);\n}\nexport default App;\nNext, I’ll receive and make use of the stateful data, which I’ve passed down to the subcomponents\nas props, and write all of the subcomponents of App as pure functions. Listing 6-40 shows the\n172 ❘ CHAPTER 6 React Data Flow\nInputForm component, Listing 6-41 shows the FilterSelect component, and Listing 6-42 shows\nthe RemindersList component.\nLISTING 6- 40: Pure InputForm\nfunction InputForm(props){\nreturn(\n<form>\n<input value={props.userInput.reminderText}\nid=\"reminderText\"\ntype=\"text\"\nplaceholder=\"What do you want to do?\" />\n<input value={props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\" />\n<button>Add Item</button>\n</form>\n);\n}\nexport default InputForm;\nLISTING 6- 41: Pure FilterSelect\nfunction FilterSelect(props){\nreturn(\n<label htmlFor=\"filterReminders\">Show tasks due:",
		"return(\n<form>\n<input value={props.userInput.reminderText}\nid=\"reminderText\"\ntype=\"text\"\nplaceholder=\"What do you want to do?\" />\n<input value={props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\" />\n<button>Add Item</button>\n</form>\n);\n}\nexport default InputForm;\nLISTING 6- 41: Pure FilterSelect\nfunction FilterSelect(props){\nreturn(\n<label htmlFor=\"filterReminders\">Show tasks due:\n<select id=\"filterReminders\" value={props.selectedFilter}>\n<option value=\"2day\">within 2 Days</option>\n<option value=\"1week\">within 1 Week</option>\n<option value=\"30days\">within 30 Days</option>\n<option value=\"all\">any time</option>\n</select>\n</label>\n);\n}\nexport default FilterSelect;\nLISTING 6- 42: Pure RemindersList\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nconst reminders = props.reminders.map((reminder,index)=>{\nreturn (<Reminder reminderText={reminder.reminderText}\ndueDate={reminder.dueDate}\nisComplete={reminder.isComplete}\nid={index}\nkey={index} />);\n});\nReact State ❘ 173\nreturn(",
		"</select>\n</label>\n);\n}\nexport default FilterSelect;\nLISTING 6- 42: Pure RemindersList\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nconst reminders = props.reminders.map((reminder,index)=>{\nreturn (<Reminder reminderText={reminder.reminderText}\ndueDate={reminder.dueDate}\nisComplete={reminder.isComplete}\nid={index}\nkey={index} />);\n});\nReact State ❘ 173\nreturn(\n<div>\n{reminders}\n</div>\n);\n}\nexport default RemindersList;\nFigure 6-17 shows what happens when you try to run the app at this point.\nFIGURE 6- 17: Cannot read property\nThe reason we get this error is that we’re trying to read a property of an object (userInput) that\ndoesn’t yet exist.\nThe solution to this problem, and to many other problems in React, is to make use of PropTypes for\nvalidating props, and defaultProps to set initial values for the props. I’ll start again with the child\ncomponents and work through each one and make some necessary improvements.",
		"The reason we get this error is that we’re trying to read a property of an object (userInput) that\ndoesn’t yet exist.\nThe solution to this problem, and to many other problems in React, is to make use of PropTypes for\nvalidating props, and defaultProps to set initial values for the props. I’ll start again with the child\ncomponents and work through each one and make some necessary improvements.\nThe InputForm component receives two props: userInput and setUserInput. The userInput prop\nis an object with two properties. We can use propTypes.shape to validate that the object the compo-\nnent receives has the correct properties and that those properties are the correct type of data. I’ll also\nset default values that will be used for each property of userInput in case the prop is not received, as\nshown in Listing 6-43.\n174 ❘ CHAPTER 6 React Data Flow\nLISTING 6- 43: Adding PropTypes and default values to InputForm\nimport PropTypes from 'prop- types';\nfunction InputForm(props){\nreturn(\n<form>",
		"set default values that will be used for each property of userInput in case the prop is not received, as\nshown in Listing 6-43.\n174 ❘ CHAPTER 6 React Data Flow\nLISTING 6- 43: Adding PropTypes and default values to InputForm\nimport PropTypes from 'prop- types';\nfunction InputForm(props){\nreturn(\n<form>\n<input value={props.userInput.reminderText}\nid=\"reminderText\"\ntype=\"text\"\nplaceholder=\"What do you want to do?\" />\n<input value={props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\" />\n<button>Add Item</button>\n</form>\n);\n}\nInputForm.propTypes = {\nuserInput: PropTypes.shape({\nreminderText: PropTypes.string,\ndueDate: PropTypes.string\n}),\nsetUserInput: PropTypes.func\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nInputForm.defaultProps = {\nuserInput: {\nreminderText:\"\",\ndueDate:formattedDate\n}\n}\nexport default InputForm;\nYou may have a question about how the default value for the date picker is being set. The HTML",
		"reminderText: PropTypes.string,\ndueDate: PropTypes.string\n}),\nsetUserInput: PropTypes.func\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nInputForm.defaultProps = {\nuserInput: {\nreminderText:\"\",\ndueDate:formattedDate\n}\n}\nexport default InputForm;\nYou may have a question about how the default value for the date picker is being set. The HTML\ndate picker control accepts a string in the format 'YYYY- MM- DD'. To set its default value, I’ll get the\ncurrent date (by creating a new Date object) and then I’ll use the JavaScript toISOString func-\ntion to convert the current date to a string containing the date and time, in the format 'YYYY- MM-\nDDTHH:mm:ss.sssZ'. Since I only care about the date portion of this string, I’ll use the substr\nfunction to get the first 10 characters of the result of the toISOString function.\nBecause the actual value used by the date input is a string, the correct PropType to validate it against\nis string rather than date.",
		"DDTHH:mm:ss.sssZ'. Since I only care about the date portion of this string, I’ll use the substr\nfunction to get the first 10 characters of the result of the toISOString function.\nBecause the actual value used by the date input is a string, the correct PropType to validate it against\nis string rather than date.\nIf you run the app now (or just refresh the browser window if the development server is still running),\nyou’ll see that the reminderText error is gone, but we have a new one, as shown in Figure 6-18.\nThis isn’t the last time you’ll see this error in your dealings with React. In plain English, it’s telling us\nthat we’re trying to run the Array.map function on something that’s not an array.\nReact State ❘ 175\nFIGURE 6- 18: Cannot read property ‘map’ of undefined\nRemindersList receives the reminders variable as a prop and uses Array.map to create an array of\nReminder elements from it. Any time you use Array.map in a component, you have to be certain that",
		"that we’re trying to run the Array.map function on something that’s not an array.\nReact State ❘ 175\nFIGURE 6- 18: Cannot read property ‘map’ of undefined\nRemindersList receives the reminders variable as a prop and uses Array.map to create an array of\nReminder elements from it. Any time you use Array.map in a component, you have to be certain that\nthe component won’t try to render before the array that Array.map is used on is populated. If it does\ntry to render before the array is received, the render will fail with an error, as you saw in Figure 6-18.\nUsing a default prop value is one way to eliminate the possibility of this type of failure. Listing 6-44\nshows the RemindersList component with default props and propTypes defined.\nLISTING 6- 44: RemindersList with default props and PropTypes\nimport PropTypes from 'prop- types';\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nconst reminders = props.reminders.map((reminder,index)=>{",
		"shows the RemindersList component with default props and propTypes defined.\nLISTING 6- 44: RemindersList with default props and PropTypes\nimport PropTypes from 'prop- types';\nimport Reminder from './Reminder';\nfunction RemindersList(props){\nconst reminders = props.reminders.map((reminder,index)=>{\nreturn (<Reminder reminderText={reminder.reminderText}\ndueDate={reminder.dueDate}\nisComplete={reminder.isComplete}\nid={index}\nkey={index} />);\n});\nreturn(\n<div>\n{reminders}\n</div>\n);\ncontinues\n176 ❘ CHAPTER 6 React Data Flow\nLISTING 6-44 (continued)\n}\nRemindersList.propTypes = {\nreminders: PropTypes.array\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nRemindersList.defaultProps = {\nreminders: [{\nreminderText:\"No Reminders Yet\",\ndueDate:formattedDate,\nisComplete: false\n}]\n}\nexport default RemindersList;\nAnother way to prevent map from trying to run on a prop that’s not yet an array is to set the initial",
		"}\nRemindersList.propTypes = {\nreminders: PropTypes.array\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nRemindersList.defaultProps = {\nreminders: [{\nreminderText:\"No Reminders Yet\",\ndueDate:formattedDate,\nisComplete: false\n}]\n}\nexport default RemindersList;\nAnother way to prevent map from trying to run on a prop that’s not yet an array is to set the initial\nvalue of the stateful variable in App to an empty array, like this:\nconst [reminders,setReminders] = useState([]);\nHowever, if you set the initial value of reminders to an empty array, the default \"No Reminders Yet\"\nreminder doesn’t show up. If you remove the empty square brackets passed into the useState func-\ntion that creates the reminders variable, the default props defined in RemindersList will render, as\nshown in Figure 6-19.\nFIGURE 6- 19: Displaying the default prop\nReact State ❘ 177\nAbout the key Prop",
		"However, if you set the initial value of reminders to an empty array, the default \"No Reminders Yet\"\nreminder doesn’t show up. If you remove the empty square brackets passed into the useState func-\ntion that creates the reminders variable, the default props defined in RemindersList will render, as\nshown in Figure 6-19.\nFIGURE 6- 19: Displaying the default prop\nReact State ❘ 177\nAbout the key Prop\nAny time you make a list of components, as we do in the RemindersList component, each element\nin the list must have a prop named key. The value of key must be unique to each item in the list.\nSince the index position of an element in an array is a unique value, this makes a convenient value for\nthe key prop.\nThe key prop is used by React to help facilitate updating of items in the list. The value of key is not\navailable as part of the props object inside the component. You’ll notice that RemindersList passes",
		"Since the index position of an element in an array is a unique value, this makes a convenient value for\nthe key prop.\nThe key prop is used by React to help facilitate updating of items in the list. The value of key is not\navailable as part of the props object inside the component. You’ll notice that RemindersList passes\nthe same value (the index position of the reminder in the array) to both the key prop and to a prop\ncalled id. This is necessary so we can make use of this value to update the reminders list, as you’ll see\nwhen we start coding the functionality of the app.\nNOTE In this example, I used the index of the reminders array as the key. In a\nreal- world application, it would be a better practice to have a separate, unique\nID property for each reminder and to use that as the key. The reason is that\nthe key is used by React to identify elements in the array. If your application\nchanges the order of elements in the array or adds or removes elements from",
		"NOTE In this example, I used the index of the reminders array as the key. In a\nreal- world application, it would be a better practice to have a separate, unique\nID property for each reminder and to use that as the key. The reason is that\nthe key is used by React to identify elements in the array. If your application\nchanges the order of elements in the array or adds or removes elements from\ninside the array (none of which ours currently does), React will assume that the\nsame keys represent the same DOM elements. The result can be that wrong\ndata will be displayed or your app will break. For a more detailed explanation\nof the problems with using the index as the key, see Robin Pokorny’s blog post\nat https://robinpokorny.medium.com/index- as- a- key- is- an- anti- pattern-\ne0349aece318.\nNow let’s look at the FilterSelect component. FilterSelect also receives two props: selected-\nFilter and setSelectedFilter. I’ll set selectedFilter to all by default and validate the types",
		"of the problems with using the index as the key, see Robin Pokorny’s blog post\nat https://robinpokorny.medium.com/index- as- a- key- is- an- anti- pattern-\ne0349aece318.\nNow let’s look at the FilterSelect component. FilterSelect also receives two props: selected-\nFilter and setSelectedFilter. I’ll set selectedFilter to all by default and validate the types\nfor both, as shown in Listing 6-45.\nLISTING 6- 45: Validating and setting defaults for FilterSelect\nimport PropTypes from 'prop- types';\nfunction FilterSelect(props){\nreturn(\n<label htmlFor=\"filterReminders\">Show tasks due:\n<select id=\"filterReminders\" value={props.selectedFilter}>\n<option value=\"2day\">within 2 Days</option>\n<option value=\"1week\">within 1 Week</option>\n<option value=\"30days\">within 30 days</option>\n<option value=\"all\">any time</option>\n</select>\n</label>\n);\n}\ncontinues\n178 ❘ CHAPTER 6 React Data Flow\nLISTING 6-45 (continued)\nFilterSelect.propTypes = {\nselectedFilter: PropTypes.string,",
		"<select id=\"filterReminders\" value={props.selectedFilter}>\n<option value=\"2day\">within 2 Days</option>\n<option value=\"1week\">within 1 Week</option>\n<option value=\"30days\">within 30 days</option>\n<option value=\"all\">any time</option>\n</select>\n</label>\n);\n}\ncontinues\n178 ❘ CHAPTER 6 React Data Flow\nLISTING 6-45 (continued)\nFilterSelect.propTypes = {\nselectedFilter: PropTypes.string,\nsetSelectedFilter: PropTypes.func\n}\nFilterSelect.defaultProps = {\nselectedFilter:'all'\n}\nexport default FilterSelect;\nThe Reminder component receives three props: reminderText, dueDate, and isComplete.\nThere shouldn’t be a possibility of Reminder not receiving props, because its parent component,\nRemindersList, has default props set. But, it’s always a good idea to set defaults and validate your\nprops using PropTypes, because it makes your component more reusable and independent. List-\ning 6-46 shows the Reminder component with propTypes and default props set.",
		"There shouldn’t be a possibility of Reminder not receiving props, because its parent component,\nRemindersList, has default props set. But, it’s always a good idea to set defaults and validate your\nprops using PropTypes, because it makes your component more reusable and independent. List-\ning 6-46 shows the Reminder component with propTypes and default props set.\nLISTING 6- 46: Reminder with PropTypes and defaultProps\nimport PropTypes from 'prop- types';\nfunction Reminder(props){\nreturn(\n<div>item: {props.reminderText}\ndue date: {props.dueDate}\nCompleted?: {String(props.isComplete)}</div>\n);\n}\nReminder.propTypes = {\nreminderText: PropTypes.string,\ndueDate: PropTypes.string,\nisComplete: PropTypes.bool\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nReminder.defaultProps = {\nreminderText:\"No Reminder Set\",\ndueDate:formattedDate,\nisComplete: false\n}\nexport default Reminder;",
		"due date: {props.dueDate}\nCompleted?: {String(props.isComplete)}</div>\n);\n}\nReminder.propTypes = {\nreminderText: PropTypes.string,\ndueDate: PropTypes.string,\nisComplete: PropTypes.bool\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nReminder.defaultProps = {\nreminderText:\"No Reminder Set\",\ndueDate:formattedDate,\nisComplete: false\n}\nexport default Reminder;\nNow that we have state and props being passed down through the components and default values\nset for the props, the initial render of the app is starting to take shape and there shouldn’t be any\nPropType warnings in the JavaScript console (although you will see a couple of other warnings), as\nyou can see in Figure 6-20.\nReact State ❘ 179\nFIGURE 6- 20: The initial render of the Reminders app\nThe warnings that you see in the console now are expected, and they point to the one big thing left\nto do before this is a somewhat functional app: we need to implement event listeners that will trigger",
		"you can see in Figure 6-20.\nReact State ❘ 179\nFIGURE 6- 20: The initial render of the Reminders app\nThe warnings that you see in the console now are expected, and they point to the one big thing left\nto do before this is a somewhat functional app: we need to implement event listeners that will trigger\nstate changes.\nSince we’re building this app entirely with function components, we already created the functions that\nwill set the state variables. All we need to do now is pass those functions down to the correct compo-\nnent and then set up event listeners to call the functions.\nI’ll start with the userInput object and its setter function, setUserInput. The setUserInput\nfunction is already passed to the InputForm component. What we want to happen is for it to be\ncalled and to store the reminder text and date when the text field and date field change.\nIt’s common to define an intermediary function between the event handler and the setter function.",
		"I’ll start with the userInput object and its setter function, setUserInput. The setUserInput\nfunction is already passed to the InputForm component. What we want to happen is for it to be\ncalled and to store the reminder text and date when the text field and date field change.\nIt’s common to define an intermediary function between the event handler and the setter function.\nOften, this function will take the name of the event that triggers it, prefaced by handle. In the\nInputForm component, we’ll define a function called handleTextChange, one called\nhandleDateChange, and one called handleClick. The purpose of handleTextChange and\nhandleDateChange is to get the data from the field’s change event into the correct form to be stored\nin state and then to call the setUserInput function. The purpose of handleClick will be to use the\ncurrent values from the userInput object to add a new element to the reminders array each time\nthe button is clicked.",
		"handleDateChange, and one called handleClick. The purpose of handleTextChange and\nhandleDateChange is to get the data from the field’s change event into the correct form to be stored\nin state and then to call the setUserInput function. The purpose of handleClick will be to use the\ncurrent values from the userInput object to add a new element to the reminders array each time\nthe button is clicked.\nRecall that the setter functions created by the useState hook replace the value of the stateful vari-\nable, rather than updating it like setState does. As a result, each time we call setUserInput, we\n180 ❘ CHAPTER 6 React Data Flow\nneed to re- create the userInput object, but with the new value. This is easily done by using the\nspread operator. The handleTextChange function in InputForm looks like this:\nconst handleTextChange = (e)=>{\nconst newUserInput = {...props.userInput,reminderText:e.target.value}\nprops.setUserInput(newUserInput);\n}",
		"180 ❘ CHAPTER 6 React Data Flow\nneed to re- create the userInput object, but with the new value. This is easily done by using the\nspread operator. The handleTextChange function in InputForm looks like this:\nconst handleTextChange = (e)=>{\nconst newUserInput = {...props.userInput,reminderText:e.target.value}\nprops.setUserInput(newUserInput);\n}\nThe handleDateChange function is very similar, but it requires the date to be massaged into the cor-\nrect format:\nconst handleDateChange = (e)=>{\nconst date = new Date(e.target.value);\nconst formattedDate = date.toISOString().substr(0,10);\nconst newUserInput = {...props.userInput,dueDate:formattedDate};\nprops.setUserInput(newUserInput);\n}\nBecause we’ve done all of the hard work of creating the userInput object as the user was typing it,\nadding a new reminder to the reminders array when the button is clicked is just a matter of adding\nthe new object along with an isComplete property.",
		"const newUserInput = {...props.userInput,dueDate:formattedDate};\nprops.setUserInput(newUserInput);\n}\nBecause we’ve done all of the hard work of creating the userInput object as the user was typing it,\nadding a new reminder to the reminders array when the button is clicked is just a matter of adding\nthe new object along with an isComplete property.\nWe’ll write a function to update the reminders list. To avoid having to pass the reminders array\ndown to the InputForm component unnecessarily, we’ll instead define a function in App and then\npass that down to InputForm.\nHere’s the addNewReminder function to add to App:\nconst addNewReminder = (itemToAdd) => {\nsetReminders([...reminders,itemToAdd]);\n}\nAdd a new attribute to the InputForm element to pass addNewReminder down to the InputForm\ncomponent:\n<InputForm userInput={userInput}\nsetUserInput={setUserInput}\naddNewReminder={addNewReminder} />\nAnd, of course, don’t forget to validate the PropType for setUserInput inside InputForm:",
		"const addNewReminder = (itemToAdd) => {\nsetReminders([...reminders,itemToAdd]);\n}\nAdd a new attribute to the InputForm element to pass addNewReminder down to the InputForm\ncomponent:\n<InputForm userInput={userInput}\nsetUserInput={setUserInput}\naddNewReminder={addNewReminder} />\nAnd, of course, don’t forget to validate the PropType for setUserInput inside InputForm:\nInputForm.propTypes = {\nuserInput: PropTypes.shape({\nreminderText: PropTypes.string,\ndueDate: PropTypes.string\n}),\nsetUserInput: PropTypes.func,\naddNewReminder: PropTypes.func\n}\nNow, inside of InputForm, we can define a handleClick function that will call the addNewReminder\nfunction when the button is clicked. HTML buttons have a default action, which is to submit a form\nand reload the page. We need to prevent this default action so that we don’t reload the page (and\nReact) every time the button is clicked (thus losing the state):\nconst handleClick = (e)=>{\ne.preventDefault();\nReact State ❘ 181",
		"function when the button is clicked. HTML buttons have a default action, which is to submit a form\nand reload the page. We need to prevent this default action so that we don’t reload the page (and\nReact) every time the button is clicked (thus losing the state):\nconst handleClick = (e)=>{\ne.preventDefault();\nReact State ❘ 181\nconst itemToAdd = {...props.userInput,isComplete:false};\nprops.addNewReminder(itemToAdd);\n};\nTo invoke these new functions, add event listener attributes to the form elements. Event listener\nattributes in React work like HTML event listener attributes. When the specified event happens on\nthe element containing the attribute, the function specified will be run.\nNOTE I’ll cover events and event handling in React in more detail in Chapter 7.\nThe value of an event listener attribute can be the name of a function (or a prop with a function\nvalue), or an arrow function definition. Here’s the reminderText input element with the event lis-\ntener function specified:",
		"the element containing the attribute, the function specified will be run.\nNOTE I’ll cover events and event handling in React in more detail in Chapter 7.\nThe value of an event listener attribute can be the name of a function (or a prop with a function\nvalue), or an arrow function definition. Here’s the reminderText input element with the event lis-\ntener function specified:\n<input value={props.userInput.reminderText}\nid=\"reminderText\"\ntype=\"text\"\nplaceholder=\"What do you want to do?\"\nonChange={handleTextChange} />\nHere’s the dueDate input with its event listener attribute:\n<input value={props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\"\nonChange={handleDateChange} />\nAnd here’s the button with its event listener attribute:\n<button onClick={handleClick}>Add Item</button>\nAt this point, the code for the InputForm component should look like Listing 6-47.\nLISTING 6- 47: The InputForm component with event handlers and event listeners\nimport PropTypes from 'prop- types';",
		"<input value={props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\"\nonChange={handleDateChange} />\nAnd here’s the button with its event listener attribute:\n<button onClick={handleClick}>Add Item</button>\nAt this point, the code for the InputForm component should look like Listing 6-47.\nLISTING 6- 47: The InputForm component with event handlers and event listeners\nimport PropTypes from 'prop- types';\nfunction InputForm(props){\nconst handleTextChange = (e)=>{\nconst newUserInput = {...props.userInput,reminderText:e.target.value}\nprops.setUserInput(newUserInput);\n}\nconst handleDateChange = (e)=>{\nconst date = new Date(e.target.value);\nconst formattedDate = date.toISOString().substr(0,10);\nconst newUserInput = {...props.userInput,dueDate:formattedDate};\nprops.setUserInput(newUserInput);\n}\ncontinues\n182 ❘ CHAPTER 6 React Data Flow\nLISTING 6-47 (continued)\nconst handleClick = (e)=>{\ne.preventDefault();\nconst itemToAdd = {...props.userInput,status:false};\nprops.addNewReminder(itemToAdd);\n};",
		"const date = new Date(e.target.value);\nconst formattedDate = date.toISOString().substr(0,10);\nconst newUserInput = {...props.userInput,dueDate:formattedDate};\nprops.setUserInput(newUserInput);\n}\ncontinues\n182 ❘ CHAPTER 6 React Data Flow\nLISTING 6-47 (continued)\nconst handleClick = (e)=>{\ne.preventDefault();\nconst itemToAdd = {...props.userInput,status:false};\nprops.addNewReminder(itemToAdd);\n};\nreturn(\n<form>\n<input value={props.userInput.reminderText}\nid=\"reminderText\"\ntype=\"text\"\nplaceholder=\"What do you want to do?\"\nonChange={handleTextChange} />\n<input value={props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\"\nonChange={handleDateChange} />\n<button onClick={handleClick}>Add Item</button>\n</form>\n);\n}\nInputForm.propTypes = {\nuserInput: PropTypes.shape({\nreminderText: PropTypes.string,\ndueDate: PropTypes.string\n}),\nsetUserInput: PropTypes.func,\naddNewReminder: PropTypes.func\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nInputForm.defaultProps = {",
		"type=\"date\"\nonChange={handleDateChange} />\n<button onClick={handleClick}>Add Item</button>\n</form>\n);\n}\nInputForm.propTypes = {\nuserInput: PropTypes.shape({\nreminderText: PropTypes.string,\ndueDate: PropTypes.string\n}),\nsetUserInput: PropTypes.func,\naddNewReminder: PropTypes.func\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nInputForm.defaultProps = {\nuserInput: {\nreminderText:\"\",\ndueDate:formattedDate\n}\n}\nexport default InputForm;\nWith these three event listeners set to trigger our event handler functions, you should be able to start\nup Create React App’s development server (using npm start). When you try to add a new reminder,\nhowever, you’ll get a new error: TypeError: reminders is not iterable. This indicates that\nwe’re trying to use the spread operator on reminders before it’s an array. And, in fact, that’s what’s\nhappening in the addNewReminder function.\nReact State ❘ 183",
		"up Create React App’s development server (using npm start). When you try to add a new reminder,\nhowever, you’ll get a new error: TypeError: reminders is not iterable. This indicates that\nwe’re trying to use the spread operator on reminders before it’s an array. And, in fact, that’s what’s\nhappening in the addNewReminder function.\nReact State ❘ 183\nAs with the solution to the error we got when we tried to use the Array.map function on\nreminders before it was populated, the solution here is to add a default value. You could set the\ninitial value of reminders to an empty array, or you could use a third method and test the value of\nreminders inside of addNewReminders and take the appropriate action. Here’s what that looks like:\nconst addNewReminder = (itemToAdd) => {\nif (reminders===undefined){\nsetReminders([itemToAdd]);\n} else {\nsetReminders([...reminders,itemToAdd]);\n}\n}\nWith that done, now you’ll be able to add new reminders to the list, as shown in Figure 6-21.",
		"reminders inside of addNewReminders and take the appropriate action. Here’s what that looks like:\nconst addNewReminder = (itemToAdd) => {\nif (reminders===undefined){\nsetReminders([itemToAdd]);\n} else {\nsetReminders([...reminders,itemToAdd]);\n}\n}\nWith that done, now you’ll be able to add new reminders to the list, as shown in Figure 6-21.\nFIGURE 6- 21: Adding Reminders to the list\nFiltering the Reminders\nThe FilterSelect component uses a dropdown menu containing various time frames to calculate a\nfiltered list of the reminders. To figure out how to code the functionality of this component, let’s step\nthrough the basic process of filtering the list:\n1. The user changes the selected item in the select input.\n2. The change to the select input causes a function to be called.\n3. The called function receives the full list of reminders and the selected filter.\n184 ❘ CHAPTER 6 React Data Flow\n4. A subset of the full reminders list is created.\n5. The subset of the list is displayed.",
		"through the basic process of filtering the list:\n1. The user changes the selected item in the select input.\n2. The change to the select input causes a function to be called.\n3. The called function receives the full list of reminders and the selected filter.\n184 ❘ CHAPTER 6 React Data Flow\n4. A subset of the full reminders list is created.\n5. The subset of the list is displayed.\nThe default filter in our app is \"all\", which displays all of the reminders. Since there’s no way to\nshut off the filter selector, what is displayed in the app should always be a filtered list (even if the\nfiltered list contains all of the reminders). So, the first step in programming the filter functionality is\nto create a new variable for the filtered list and pass that down to the RemindersList component\ninstead of the full list of reminders.\nFor now, I’ll do this by just copying the reminders list into a new array called filteredReminders",
		"filtered list contains all of the reminders). So, the first step in programming the filter functionality is\nto create a new variable for the filtered list and pass that down to the RemindersList component\ninstead of the full list of reminders.\nFor now, I’ll do this by just copying the reminders list into a new array called filteredReminders\nin App (using the spread operator) and then passing down this new filteredReminders array as the\nvalue of the reminders attribute in RemindersList, as shown in Listing 6-48.\nOnce again, the spread operator will produce an error unless you give reminders a default\nvalue or do a test before trying to use Array.map on reminders. I’ll use the ternary operator this\ntime to check whether reminders is defined. If it is, I’ll copy the elements from reminders into\nfilteredList. If it isn’t, I’ll set filteredList to undefined.\nRemember, because the filteredList is calculated, it doesn’t need to be state. The selectedFilter,",
		"value or do a test before trying to use Array.map on reminders. I’ll use the ternary operator this\ntime to check whether reminders is defined. If it is, I’ll copy the elements from reminders into\nfilteredList. If it isn’t, I’ll set filteredList to undefined.\nRemember, because the filteredList is calculated, it doesn’t need to be state. The selectedFilter,\non the other hand, is changed as a result of a user interaction, so it does need to be state.\nLISTING 6- 48: Creating a new filteredReminders array\nimport {useState} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nfunction App(){\nconst [reminders,setReminders] = useState();\nconst [userInput,setUserInput] = useState();\nconst [selectedFilter,setSelectedFilter] = useState(\"all\");\nconst addNewReminder = (itemToAdd) => {\nif (reminders===undefined){\nsetReminders([itemToAdd]);\n} else {\nsetReminders([...reminders,itemToAdd]);\n}\n}",
		"import RemindersList from './RemindersList';\nfunction App(){\nconst [reminders,setReminders] = useState();\nconst [userInput,setUserInput] = useState();\nconst [selectedFilter,setSelectedFilter] = useState(\"all\");\nconst addNewReminder = (itemToAdd) => {\nif (reminders===undefined){\nsetReminders([itemToAdd]);\n} else {\nsetReminders([...reminders,itemToAdd]);\n}\n}\nconst filteredList = reminders?[...reminders]:undefined;\nreturn(\n<div>\n<InputForm userInput={userInput}\nsetUserInput={setUserInput}\naddNewReminder={addNewReminder} />\n<FilterSelect selectedFilter={selectedFilter}\nsetSelectedFilter={setSelectedFilter} />\n<RemindersList reminders={filteredList} />\nReact State ❘ 185\n</div>\n);\n}\nexport default App;\nAt this point, the app will function exactly the same as before, but the groundwork is properly laid to\nbe able to filter the list. The next step is to write a function that will filter the reminders list based on",
		"<FilterSelect selectedFilter={selectedFilter}\nsetSelectedFilter={setSelectedFilter} />\n<RemindersList reminders={filteredList} />\nReact State ❘ 185\n</div>\n);\n}\nexport default App;\nAt this point, the app will function exactly the same as before, but the groundwork is properly laid to\nbe able to filter the list. The next step is to write a function that will filter the reminders list based on\nthe date. For that, we can use Array.filter. Array.filter takes a function as its argument, and\ncreates a new array containing all of the elements that pass a test in the function.\nListing 6-49 shows the function that I came up with for filtering the list.\nLISTING 6- 49: Filtering the reminders list\nfunction filterList(reminders,selectedFilter){\nif (selectedFilter === \"all\"){\nreturn reminders;\n} else {\nlet numberOfDays;\nswitch(selectedFilter){\ncase \"2day\":\nnumberOfDays = 2;\nbreak;\ncase \"1week\":\nnumberOfDays = 7;\nbreak;\ncase \"30days\":\nnumberOfDays = 30;\nbreak;\ndefault:\nnumberOfDays = 0;\nbreak;\n}",
		"LISTING 6- 49: Filtering the reminders list\nfunction filterList(reminders,selectedFilter){\nif (selectedFilter === \"all\"){\nreturn reminders;\n} else {\nlet numberOfDays;\nswitch(selectedFilter){\ncase \"2day\":\nnumberOfDays = 2;\nbreak;\ncase \"1week\":\nnumberOfDays = 7;\nbreak;\ncase \"30days\":\nnumberOfDays = 30;\nbreak;\ndefault:\nnumberOfDays = 0;\nbreak;\n}\nconst result = reminders.filter(reminder=>{\nconst todaysDate = new Date().toISOString().substr(0,10);\nconst todayTime = new Date(todaysDate).getTime();\nconst dueTime = new Date(reminder.dueDate).getTime();\nreturn dueTime < (todayTime + (numberOfDays * 86400000));\n});\nreturn result;\n}\n}\nIf you examine this function, you’ll see that it first checks whether the selected filter is \"all\", and just\nexits out of the rest of the function if so. If the selected filter isn’t \"all\", it converts the selected filter\ninto a number of days. Then it uses Array.filter to go through each element in the reminders",
		"return dueTime < (todayTime + (numberOfDays * 86400000));\n});\nreturn result;\n}\n}\nIf you examine this function, you’ll see that it first checks whether the selected filter is \"all\", and just\nexits out of the rest of the function if so. If the selected filter isn’t \"all\", it converts the selected filter\ninto a number of days. Then it uses Array.filter to go through each element in the reminders\narray and make a list of the reminders that have a due date earlier than the current time (which is in\n186 ❘ CHAPTER 6 React Data Flow\nthe number of milliseconds since the beginning of UNIX time) plus the number of milliseconds in the\nselected filter.\nTo implement this function, place it outside of the return statement in the App component, and then\ncall it, passing in reminders and selectedFilter, as shown in Listing 6-50.\nLISTING 6- 50: Implementing the filterList function\nimport {useState} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';",
		"selected filter.\nTo implement this function, place it outside of the return statement in the App component, and then\ncall it, passing in reminders and selectedFilter, as shown in Listing 6-50.\nLISTING 6- 50: Implementing the filterList function\nimport {useState} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nfunction App(){\nconst [reminders,setReminders] = useState();\nconst [userInput,setUserInput] = useState();\nconst [selectedFilter,setSelectedFilter] = useState(\"all\");\nconst addNewReminder = (itemToAdd) => {\nif (reminders===undefined){\nsetReminders([itemToAdd]);\n} else {\nsetReminders([...reminders,itemToAdd]);\n}\n}\nconst filteredList = filterList(reminders,selectedFilter);\nfunction filterList(reminders,selectedFilter){\nif (selectedFilter === \"all\"){\nreturn reminders;\n} else {\nlet numberOfDays;\nswitch(selectedFilter){\ncase \"2day\":\nnumberOfDays = 2;\nbreak;\ncase \"1week\":\nnumberOfDays = 7;\nbreak;",
		"if (reminders===undefined){\nsetReminders([itemToAdd]);\n} else {\nsetReminders([...reminders,itemToAdd]);\n}\n}\nconst filteredList = filterList(reminders,selectedFilter);\nfunction filterList(reminders,selectedFilter){\nif (selectedFilter === \"all\"){\nreturn reminders;\n} else {\nlet numberOfDays;\nswitch(selectedFilter){\ncase \"2day\":\nnumberOfDays = 2;\nbreak;\ncase \"1week\":\nnumberOfDays = 7;\nbreak;\ncase \"30days\":\nnumberOfDays = 30;\nbreak;\ndefault:\nnumberOfDays = 0;\nbreak;\n}\nconst result = reminders.filter(reminder=>{\nconst todaysDate = new Date().toISOString().substr(0,10);\nconst todayTime = new Date(todaysDate).getTime();\nReact State ❘ 187\nconst dueTime = new Date(reminder.dueDate).getTime();\nreturn dueTime < (todayTime + (numberOfDays * 86400000));\n});\nreturn result;\n}\n}\nreturn(\n<div>\n<InputForm userInput={userInput}\nsetUserInput={setUserInput}\naddNewReminder={addNewReminder} />\n<FilterSelect selectedFilter={selectedFilter}\nsetSelectedFilter={setSelectedFilter} />",
		"const todayTime = new Date(todaysDate).getTime();\nReact State ❘ 187\nconst dueTime = new Date(reminder.dueDate).getTime();\nreturn dueTime < (todayTime + (numberOfDays * 86400000));\n});\nreturn result;\n}\n}\nreturn(\n<div>\n<InputForm userInput={userInput}\nsetUserInput={setUserInput}\naddNewReminder={addNewReminder} />\n<FilterSelect selectedFilter={selectedFilter}\nsetSelectedFilter={setSelectedFilter} />\n<RemindersList reminders={filteredList} />\n</div>\n);\n}\nexport default App;\nThe next thing we need to do is to add the event listener and handler to the FilterSelect compo-\nnent so that selecting a filter from the dropdown will update the selectedFilter state variable.\nIn the FilterSelect component, I’ll define a new function called handleChange, which will pass the\nvalue of the select input to the setSelectedFilter component. Then, I’ll set an onChange event\nhandler on the select input to call handleChange. The FilterSelect component, with this event",
		"nent so that selecting a filter from the dropdown will update the selectedFilter state variable.\nIn the FilterSelect component, I’ll define a new function called handleChange, which will pass the\nvalue of the select input to the setSelectedFilter component. Then, I’ll set an onChange event\nhandler on the select input to call handleChange. The FilterSelect component, with this event\nlistener and event handler specified, is shown in Listing 6-51.\nLISTING 6- 51: FilterSelect with an event handler and event listener\nimport PropTypes from 'prop- types';\nfunction FilterSelect(props){\nfunction handleChange(e){\nprops.setSelectedFilter(e.target.value);\n}\nreturn(\n<label htmlFor=\"filterReminders\">Show tasks due:\n<select id=\"filterReminders\" value={props.selectedFilter}\nonChange={handleChange}>\n<option value=\"2day\">within 2 Days</option>\n<option value=\"1week\">within 1 Week</option>\n<option value=\"30days\">within 30 days</option>\n<option value=\"all\">any time</option>\n</select>\n</label>\n);\n}",
		"props.setSelectedFilter(e.target.value);\n}\nreturn(\n<label htmlFor=\"filterReminders\">Show tasks due:\n<select id=\"filterReminders\" value={props.selectedFilter}\nonChange={handleChange}>\n<option value=\"2day\">within 2 Days</option>\n<option value=\"1week\">within 1 Week</option>\n<option value=\"30days\">within 30 days</option>\n<option value=\"all\">any time</option>\n</select>\n</label>\n);\n}\nFilterSelect.propTypes = {\ncontinues\n188 ❘ CHAPTER 6 React Data Flow\nLISTING 6-51 (continued)\nselectedFilter: PropTypes.string,\nsetSelectedFilter: PropTypes.func\n}\nFilterSelect.defaultProps = {\nselectedFilter:'all'\n}\nexport default FilterSelect;\nImplementing the isComplete Changing Functionality\nThe last thing left to do for now is to implement the isComplete status changing functionality. This\nshould just be a checkbox to the right of each reminder that, when clicked, will indicate that the item\nis complete.\nThe first thing to do is to implement the checkbox in the Reminder component. Checkboxes don’t",
		"}\nexport default FilterSelect;\nImplementing the isComplete Changing Functionality\nThe last thing left to do for now is to implement the isComplete status changing functionality. This\nshould just be a checkbox to the right of each reminder that, when clicked, will indicate that the item\nis complete.\nThe first thing to do is to implement the checkbox in the Reminder component. Checkboxes don’t\nhave a value property. Instead, they have a property called checked which is either true or false.\nOur checkbox in the Reminder component should look like this:\n<input type=\"checkbox\" checked={props.isComplete} onChange={handleChange} />\nThe full Reminder component should now look like Listing 6-52.\nLISTING 6- 52: Reminder with the checkbox\nimport PropTypes from 'prop- types';\nfunction Reminder(props){\nfunction handleChange(){\nprops.setIsComplete(!props.isComplete,props.id);\n}\nreturn(\n<div className=\"item\">item: {props.reminderText}\n<span className=\"due- date\">due date: {props.dueDate}</span>",
		"The full Reminder component should now look like Listing 6-52.\nLISTING 6- 52: Reminder with the checkbox\nimport PropTypes from 'prop- types';\nfunction Reminder(props){\nfunction handleChange(){\nprops.setIsComplete(!props.isComplete,props.id);\n}\nreturn(\n<div className=\"item\">item: {props.reminderText}\n<span className=\"due- date\">due date: {props.dueDate}</span>\n<span className=\"is- complete\">\nCompleted?: <input type=\"checkbox\"\nchecked={props.isComplete}\nonChange={handleChange} /></span>\n</div>\n);\n}\nReminder.propTypes = {\nreminderText: PropTypes.string,\ndueDate: PropTypes.string,\nisComplete: PropTypes.bool\n}\nReact State ❘ 189\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nReminder.defaultProps = {\nreminderText:\"No Reminder Set\",\ndueDate:formattedDate,\nisComplete: false\n}\nexport default Reminder;\nNext, we can define the handleChange function, which will call a function called setIsComplete",
		"dueDate: PropTypes.string,\nisComplete: PropTypes.bool\n}\nReact State ❘ 189\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nReminder.defaultProps = {\nreminderText:\"No Reminder Set\",\ndueDate:formattedDate,\nisComplete: false\n}\nexport default Reminder;\nNext, we can define the handleChange function, which will call a function called setIsComplete\nthat we’ll pass down via props. The handleChange function will pass the index of the current\nreminder in the array (which we’re passing down as the id prop) and the opposite of the current\nisComplete (so, if isComplete is true, false will be passed to the setIsComplete function):\nfunction handleChange(){\nprops.setIsComplete(!props.isComplete,props.id);\n}\nNext, we have to define the setIsComplete function. Remember that isComplete is a property\ninside the reminders array. Since the reminders array lives in the App component, we’ll define the",
		"isComplete (so, if isComplete is true, false will be passed to the setIsComplete function):\nfunction handleChange(){\nprops.setIsComplete(!props.isComplete,props.id);\n}\nNext, we have to define the setIsComplete function. Remember that isComplete is a property\ninside the reminders array. Since the reminders array lives in the App component, we’ll define the\nsetIsComplete function there as well. This function will simply change the isComplete property\nof the element in the array matching the index passed to it. Here’s how that’s done, using the “sand-\nwich” method (two slices and spread):\nfunction setIsComplete(isComplete,index){\nconst newReminders = [ ...reminders.slice(0, index),\n{...reminders[index],isComplete},\n...reminders.slice(index+1) ];\nsetReminders(newReminders);\n}\nTo get the setStatus function down to the Reminders component, you’ll need to pass it first to the\nRemindersList component, like this:\n<RemindersList reminders={filteredList} setIsComplete={setIsComplete}/>",
		"function setIsComplete(isComplete,index){\nconst newReminders = [ ...reminders.slice(0, index),\n{...reminders[index],isComplete},\n...reminders.slice(index+1) ];\nsetReminders(newReminders);\n}\nTo get the setStatus function down to the Reminders component, you’ll need to pass it first to the\nRemindersList component, like this:\n<RemindersList reminders={filteredList} setIsComplete={setIsComplete}/>\nAnd then you’ll need to pass it from the RemindersList component down to the Reminder compo-\nnent, like this:\n<Reminder reminderText={reminder.reminderText}\ndueDate={reminder.dueDate}\nisComplete={reminder.isComplete}\nsetIsComplete={props.setIsComplete}\nid={index}\nkey={index} />\nWhen you run the app and add a couple of reminders, you can now check and uncheck each one’s\nstatus checkbox independently of the others, as shown in Figure 6-22.\n190 ❘ CHAPTER 6 React Data Flow\nFIGURE 6- 22: Checking and unchecking isComplete checkboxes\nCONVERTING TO CLASS COMPONENTS",
		"isComplete={reminder.isComplete}\nsetIsComplete={props.setIsComplete}\nid={index}\nkey={index} />\nWhen you run the app and add a couple of reminders, you can now check and uncheck each one’s\nstatus checkbox independently of the others, as shown in Figure 6-22.\n190 ❘ CHAPTER 6 React Data Flow\nFIGURE 6- 22: Checking and unchecking isComplete checkboxes\nCONVERTING TO CLASS COMPONENTS\nNow that we’ve gone through how to write this app the easy way, let’s look at how to write this\napplication using class components. The functionality of the app will remain the same, but the class\nmethod of writing components is commonly used, even since the introduction of React Hooks, and so\nunderstanding how to switch between the two methods is important:\n1. Start with the root component, App. All of our state variables will still be defined in this\ncomponent, but in a class component, this is done inside the constructor. Import Component",
		"method of writing components is commonly used, even since the introduction of React Hooks, and so\nunderstanding how to switch between the two methods is important:\n1. Start with the root component, App. All of our state variables will still be defined in this\ncomponent, but in a class component, this is done inside the constructor. Import Component\ninstead of useState from the react library, then create the render method and initialize the\nproperties of this.state as shown in Listing 6-53.\nLISTING 6- 53: Initializing state in App\nimport {Component} from 'react';\nclass App extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nreminders:undefined,\nuserInput:undefined,\nselectedFilter:\"all\"\n}\n}\nrender(){\nreturn();\n}\n}\nexport default App;\n2. Copy the JSX from the function version of App to the class version, import the child compo-\nnents, and update the names of the state properties to reference this.state and update the",
		"class App extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nreminders:undefined,\nuserInput:undefined,\nselectedFilter:\"all\"\n}\n}\nrender(){\nreturn();\n}\n}\nexport default App;\n2. Copy the JSX from the function version of App to the class version, import the child compo-\nnents, and update the names of the state properties to reference this.state and update the\nnames of functions to methods of the class, as shown in Listing 6-54.\nConverting to Class Components ❘ 191\nLISTING 6- 54: Copying and modifying JSX in App\nimport {Component} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nclass App extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nreminders:undefined,\nuserInput:undefined,\nselectedFilter:\"all\"\n}\n}\nrender(){\nreturn(\n<div>\n<InputForm userInput={this.state.userInput}\nsetUserInput={this.setUserInput}\naddNewReminder={this.addNewReminder} />",
		"import FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nclass App extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nreminders:undefined,\nuserInput:undefined,\nselectedFilter:\"all\"\n}\n}\nrender(){\nreturn(\n<div>\n<InputForm userInput={this.state.userInput}\nsetUserInput={this.setUserInput}\naddNewReminder={this.addNewReminder} />\n<FilterSelect selectedFilter={this.state.selectedFilter}\nsetSelectedFilter={this.setSelectedFilter} />\n<RemindersList reminders={filteredList} setIsComplete={this.setIsComplete} />\n</div>\n);\n}\n}\nexport default App;\n3. Create methods for setUserInput, setSelectedFilter, addNewReminder, and\nsetIsComplete. Change references to state properties and methods to refer to properties of\nthe class, and bind these methods to the component, as shown in Listing 6-55.\nLISTING 6- 55: Adding methods and binding them to App\nimport {Component} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';",
		"setIsComplete. Change references to state properties and methods to refer to properties of\nthe class, and bind these methods to the component, as shown in Listing 6-55.\nLISTING 6- 55: Adding methods and binding them to App\nimport {Component} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nclass App extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nreminders:undefined,\nuserInput:undefined,\nselectedFilter:\"all\"\n}\ncontinues\n192 ❘ CHAPTER 6 React Data Flow\nLISTING 6-55 (continued)\nthis.setUserInput = this.setUserInput.bind(this);\nthis.setSelectedFilter = this.setSelectedFilter.bind(this);\nthis.addNewReminder = this.addNewReminder.bind(this);\nthis.setIsComplete = this.setIsComplete.bind(this);\n}\nsetUserInput(newInput){\nthis.setState({userInput:newInput});\n}\nsetSelectedFilter(newFilter){\nthis.setState({selectedFilter:newFilter});\n}\naddNewReminder(itemToAdd) {",
		"this.setUserInput = this.setUserInput.bind(this);\nthis.setSelectedFilter = this.setSelectedFilter.bind(this);\nthis.addNewReminder = this.addNewReminder.bind(this);\nthis.setIsComplete = this.setIsComplete.bind(this);\n}\nsetUserInput(newInput){\nthis.setState({userInput:newInput});\n}\nsetSelectedFilter(newFilter){\nthis.setState({selectedFilter:newFilter});\n}\naddNewReminder(itemToAdd) {\nif (this.state.reminders===undefined){\nthis.setState({reminders:[itemToAdd]});\n} else {\nthis.setState((current)=>{\nreturn (\n{\nreminders:[...current.reminders,itemToAdd]\n}\n)\n});\n}\n}\nsetIsComplete(isComplete,index){\nconst newReminders = [ ... this.state.reminders.slice(0, index),\n{ ... this.state.reminders[index],isComplete},\n... this.state.reminders.slice(index+1) ];\nthis.setState({reminders:newReminders});\n}\nrender(){\nreturn(\n<div>\n<InputForm userInput={this.state.userInput}\nsetUserInput={this.setUserInput}\naddNewReminder={this.addNewReminder} />\n<FilterSelect selectedFilter={this.state.selectedFilter}",
		"const newReminders = [ ... this.state.reminders.slice(0, index),\n{ ... this.state.reminders[index],isComplete},\n... this.state.reminders.slice(index+1) ];\nthis.setState({reminders:newReminders});\n}\nrender(){\nreturn(\n<div>\n<InputForm userInput={this.state.userInput}\nsetUserInput={this.setUserInput}\naddNewReminder={this.addNewReminder} />\n<FilterSelect selectedFilter={this.state.selectedFilter}\nsetSelectedFilter={this.setSelectedFilter} />\n< RemindersList reminders={filteredList} setIsComplete={this.setIsComplete} />\n</div>\n);\n}\n}\nexport default App;\nConverting to Class Components ❘ 193\n4. Copy over the filterList function and update its reference to this.state.reminders.\n5. Use a call to filterList inside the render method to create the filteredList, since we\nwant it to be recalculated when the component re-r enders.\nWith these steps done, the App component should be fully converted to a class, and the Reminders",
		");\n}\n}\nexport default App;\nConverting to Class Components ❘ 193\n4. Copy over the filterList function and update its reference to this.state.reminders.\n5. Use a call to filterList inside the render method to create the filteredList, since we\nwant it to be recalculated when the component re-r enders.\nWith these steps done, the App component should be fully converted to a class, and the Reminders\napp will function the same as it did before. The final code for the converted App component is shown\nin Listing 6-56.\nLISTING 6- 56: The converted App component\nimport {Component} from 'react';\nimport InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nclass App extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nreminders:undefined,\nuserInput:undefined,\nselectedFilter:\"all\"\n}\nthis.setUserInput = this.setUserInput.bind(this);\nthis.setSelectedFilter = this.setSelectedFilter.bind(this);",
		"import InputForm from './InputForm';\nimport FilterSelect from './FilterSelect';\nimport RemindersList from './RemindersList';\nclass App extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nreminders:undefined,\nuserInput:undefined,\nselectedFilter:\"all\"\n}\nthis.setUserInput = this.setUserInput.bind(this);\nthis.setSelectedFilter = this.setSelectedFilter.bind(this);\nthis.addNewReminder = this.addNewReminder.bind(this);\nthis.setIsComplete = this.setIsComplete.bind(this);\n}\nsetUserInput(newInput){\nthis.setState({userInput:newInput});\n}\nsetSelectedFilter(newFilter){\nthis.setState({selectedFilter:newFilter});\n}\naddNewReminder(itemToAdd) {\nif (this.state.reminders===undefined){\nthis.setState({reminders:[itemToAdd]});\n} else {\nthis.setState((current)=>{\nreturn (\n{\nreminders:[...current.reminders,itemToAdd]\n}\n)\n});\n}\n}\ncontinues\n194 ❘ CHAPTER 6 React Data Flow\nLISTING 6-56 (continued)\nsetIsComplete(isComplete,index){\nconst newReminders = [ ...this.state.reminders.slice(0, index),",
		"}\naddNewReminder(itemToAdd) {\nif (this.state.reminders===undefined){\nthis.setState({reminders:[itemToAdd]});\n} else {\nthis.setState((current)=>{\nreturn (\n{\nreminders:[...current.reminders,itemToAdd]\n}\n)\n});\n}\n}\ncontinues\n194 ❘ CHAPTER 6 React Data Flow\nLISTING 6-56 (continued)\nsetIsComplete(isComplete,index){\nconst newReminders = [ ...this.state.reminders.slice(0, index),\n{...this.state.reminders[index],isComplete},\n...this.state.reminders.slice(index+1) ];\nthis.setState({reminders:newReminders});\n}\nfilterList(reminders,selectedFilter){\nif (selectedFilter === \"all\"){\nreturn reminders;\n} else {\nlet numberOfDays;\nswitch(selectedFilter){\ncase \"2day\":\nnumberOfDays = 2;\nbreak;\ncase \"1week\":\nnumberOfDays = 7;\nbreak;\ncase \"30days\":\nnumberOfDays = 30;\nbreak;\ndefault:\nnumberOfDays = 0;\nbreak;\n}\nconst result = this.state.reminders.filter(reminder=>{\nconst todaysDate = new Date().toISOString().substr(0,10);\nconst todayTime = new Date(todaysDate).getTime();",
		"return reminders;\n} else {\nlet numberOfDays;\nswitch(selectedFilter){\ncase \"2day\":\nnumberOfDays = 2;\nbreak;\ncase \"1week\":\nnumberOfDays = 7;\nbreak;\ncase \"30days\":\nnumberOfDays = 30;\nbreak;\ndefault:\nnumberOfDays = 0;\nbreak;\n}\nconst result = this.state.reminders.filter(reminder=>{\nconst todaysDate = new Date().toISOString().substr(0,10);\nconst todayTime = new Date(todaysDate).getTime();\nconst dueTime = new Date(reminder.dueDate).getTime();\nreturn dueTime < (todayTime + (numberOfDays * 86400000));\n});\nreturn result;\n}\n}\nrender(){\nconst filteredList =\nthis.filterList(this.state.reminders,this.state.selectedFilter);\nreturn(\n<div>\n<InputForm userInput={this.state.userInput}\nsetUserInput={this.setUserInput}\naddNewReminder={this.addNewReminder} />\n<FilterSelect selectedFilter={this.state.selectedFilter}\nsetSelectedFilter={this.setSelectedFilter} />\nConverting to Class Components ❘ 195\n<RemindersList reminders={filteredList} setIsComplete={this.setIsComplete} />\n</div>\n);\n}\n}\nexport default App;",
		"return(\n<div>\n<InputForm userInput={this.state.userInput}\nsetUserInput={this.setUserInput}\naddNewReminder={this.addNewReminder} />\n<FilterSelect selectedFilter={this.state.selectedFilter}\nsetSelectedFilter={this.setSelectedFilter} />\nConverting to Class Components ❘ 195\n<RemindersList reminders={filteredList} setIsComplete={this.setIsComplete} />\n</div>\n);\n}\n}\nexport default App;\nSince all of the state of our application lives in the App component, converting the other components\nis straightforward and simple. I’ll show how to convert the first InputForm to a class, and then the\nsame steps can be followed to convert the others:\n1. Import Component from react at the very beginning of the file:\nimport {Component} from 'react';\n2. Replace the function header with a class header:\nclass InputForm extends Component {\n3. Wrap the event handler functions and the return statement with the render method and\nchange references to props to references to this.props:\nrender(){",
		"same steps can be followed to convert the others:\n1. Import Component from react at the very beginning of the file:\nimport {Component} from 'react';\n2. Replace the function header with a class header:\nclass InputForm extends Component {\n3. Wrap the event handler functions and the return statement with the render method and\nchange references to props to references to this.props:\nrender(){\nconst handleTextChange=(e)=>{\nconst newUserInput = {...this.props.userInput,reminderText:e.target.value}\nthis.props.setUserInput(newUserInput);\n}\nconst handleDateChange=(e)=>{\nconst date = new Date(e.target.value);\nconst formattedDate = date.toISOString().substr(0,10);\nconst newUserInput = {...this.props.userInput,dueDate:formattedDate};\nthis.props.setUserInput(newUserInput);\n}\nconst handleClick=(e)=>{\ne.preventDefault();\nconst itemToAdd = {...this.props.userInput,isComplete:false};\nthis.props.addNewReminder(itemToAdd);\n}\nreturn(\n<form>\n<input value={this.props.userInput.reminderText}",
		"const formattedDate = date.toISOString().substr(0,10);\nconst newUserInput = {...this.props.userInput,dueDate:formattedDate};\nthis.props.setUserInput(newUserInput);\n}\nconst handleClick=(e)=>{\ne.preventDefault();\nconst itemToAdd = {...this.props.userInput,isComplete:false};\nthis.props.addNewReminder(itemToAdd);\n}\nreturn(\n<form>\n<input value={this.props.userInput.reminderText}\nid=\"reminderText\"\ntype=\"text\"\nplaceholder=\"What do you want to do?\"\nonChange={handleTextChange} />\n<input value={this.props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\"\nonChange={handleDateChange} />\n196 ❘ CHAPTER 6 React Data Flow\n<button onClick={handleClick}>Add Item</button>\n</form>\n);\n}\nOnce you’ve made these changes, start up the app and test it. If you did everything correctly, it should\nfunction the same as before. The converted InputForm component is shown in Listing 6-57.\nLISTING 6- 57: The converted InputForm component\nimport {Component} from 'react';\nimport PropTypes from 'prop- types';",
		"<button onClick={handleClick}>Add Item</button>\n</form>\n);\n}\nOnce you’ve made these changes, start up the app and test it. If you did everything correctly, it should\nfunction the same as before. The converted InputForm component is shown in Listing 6-57.\nLISTING 6- 57: The converted InputForm component\nimport {Component} from 'react';\nimport PropTypes from 'prop- types';\nclass InputForm extends Component {\nrender(){\nconst handleTextChange=(e)=>{\nconst newUserInput = {...this.props.userInput,reminderText:e.target.value}\nthis.props.setUserInput(newUserInput);\n}\nconst handleDateChange=(e)=>{\nconst date = new Date(e.target.value);\nconst formattedDate = date.toISOString().substr(0,10);\nconst newUserInput = {...this.props.userInput,dueDate:formattedDate};\nthis.props.setUserInput(newUserInput);\n}\nconst handleClick=(e)=>{\ne.preventDefault();\nconst itemToAdd = {...this.props.userInput,isComplete:false};\nthis.props.addNewReminder(itemToAdd);\n}\nreturn(\n<form>",
		"}\nconst handleDateChange=(e)=>{\nconst date = new Date(e.target.value);\nconst formattedDate = date.toISOString().substr(0,10);\nconst newUserInput = {...this.props.userInput,dueDate:formattedDate};\nthis.props.setUserInput(newUserInput);\n}\nconst handleClick=(e)=>{\ne.preventDefault();\nconst itemToAdd = {...this.props.userInput,isComplete:false};\nthis.props.addNewReminder(itemToAdd);\n}\nreturn(\n<form>\n<input value={this.props.userInput.reminderText}\nid=\"reminderText\"\ntype=\"text\"\nplaceholder=\"What do you want to do?\"\nonChange={handleTextChange} />\n<input value={this.props.userInput.dueDate}\nid=\"dueDate\"\ntype=\"date\"\nonChange={handleDateChange} />\n<button onClick={handleClick}>Add Item</button>\n</form>\n);\nConverting to Class Components ❘ 197\n}\n}\nInputForm.propTypes = {\nuserInput: PropTypes.shape({\nreminderText: PropTypes.string,\ndueDate: PropTypes.string\n}),\nsetUserInput: PropTypes.func,\naddNewReminder: PropTypes.func\n}\nconst date = new Date();",
		"id=\"dueDate\"\ntype=\"date\"\nonChange={handleDateChange} />\n<button onClick={handleClick}>Add Item</button>\n</form>\n);\nConverting to Class Components ❘ 197\n}\n}\nInputForm.propTypes = {\nuserInput: PropTypes.shape({\nreminderText: PropTypes.string,\ndueDate: PropTypes.string\n}),\nsetUserInput: PropTypes.func,\naddNewReminder: PropTypes.func\n}\nconst date = new Date();\nconst formattedDate = date.toISOString().substr(0,10);\nInputForm.defaultProps = {\nuserInput: {\nreminderText:\"\",\ndueDate:formattedDate\n}\n}\nexport default InputForm;\nThis same basic method can be applied to the other components to convert them to class components.\nHowever, there is one important gotcha to be aware of. In the InputForm and RemindersList func-\ntions, we defined the internal event handler functions using the function keyword. When you define\nfunctions using the function keyword and then reference this inside of them, this refers to the",
		"This same basic method can be applied to the other components to convert them to class components.\nHowever, there is one important gotcha to be aware of. In the InputForm and RemindersList func-\ntions, we defined the internal event handler functions using the function keyword. When you define\nfunctions using the function keyword and then reference this inside of them, this refers to the\nfunction, not to the object the function is a part of. The result is that the following function will result\nin an error:\nfunction handleChange(e){\nthis.props.setSelectedFilter(e.target.value);\n}\nThe easiest solution (but not the only solution) is to simply redefine the function as an arrow func-\ntion. The this keyword inside an arrow function references the object that the function is a part of:\nconst handleChange = (e)=> {\nthis.props.setSelectedFilter(e.target.value);\n}\nIf you’re really set on using the function keyword, another solution is to use the bind function to",
		"}\nThe easiest solution (but not the only solution) is to simply redefine the function as an arrow func-\ntion. The this keyword inside an arrow function references the object that the function is a part of:\nconst handleChange = (e)=> {\nthis.props.setSelectedFilter(e.target.value);\n}\nIf you’re really set on using the function keyword, another solution is to use the bind function to\nspecify that the function should run in the context of the current object. You can bind the function in\nthe constructor (as you’ve previously seen) or in the onChange event listener attribute, like this:\n<select id=\"filterReminders\"\nvalue={this.props.selectedFilter}\nonChange={this.handleChange.bind(this)}>\n198 ❘ CHAPTER 6 React Data Flow\nSUMMARY\nOne- way data flow is a large part of what makes React user interfaces able to handle updates effi-\nciently and reliably. Although some of the patterns and techniques used to implement one-w ay data",
		"<select id=\"filterReminders\"\nvalue={this.props.selectedFilter}\nonChange={this.handleChange.bind(this)}>\n198 ❘ CHAPTER 6 React Data Flow\nSUMMARY\nOne- way data flow is a large part of what makes React user interfaces able to handle updates effi-\nciently and reliably. Although some of the patterns and techniques used to implement one-w ay data\nflow may be unfamiliar to many JavaScript programmers, they are just JavaScript, and they become\nsecond n ature as you work with React more. Especially since the introduction of React Hooks, and\nthe useState hook in particular, basic state management in React has become simpler while also\nremaining compatible with previous methods of writing React components.\nIn this chapter, you learned:\n➤➤ How one-w ay data flow works.\n➤➤ How to pass data to child components with props.\n➤➤ How to initialize state.\n➤➤ How to change state variables in class components and in function components.\n➤➤ How to work with the asynchronous nature of setState.",
		"remaining compatible with previous methods of writing React components.\nIn this chapter, you learned:\n➤➤ How one-w ay data flow works.\n➤➤ How to pass data to child components with props.\n➤➤ How to initialize state.\n➤➤ How to change state variables in class components and in function components.\n➤➤ How to work with the asynchronous nature of setState.\n➤➤ What immutability is.\n➤➤ The importance of shallow copies.\n➤➤ How to validate props using PropTypes.\n➤➤ How to set default prop values using defaultProps.\n➤➤ How to use the rest and spread operators.\n➤➤ The steps to build an app from mockup to reactivity.\n➤➤ How to “lift state up.”\n➤➤ How to convert between function components and class components.\nIn the next chapter, we’ll go into more depth about how events, event listening, and event handling\nwork in React.\n7\nEvents\nEvents, and the functions that run in response to events, are what make React reactive. In this\nchapter, you’ll learn:\n➤➤ How and where to use event listeners.",
		"➤➤ How to “lift state up.”\n➤➤ How to convert between function components and class components.\nIn the next chapter, we’ll go into more depth about how events, event listening, and event handling\nwork in React.\n7\nEvents\nEvents, and the functions that run in response to events, are what make React reactive. In this\nchapter, you’ll learn:\n➤➤ How and where to use event listeners.\n➤➤ The difference between native events and SyntheticEvents.\n➤➤ How to write event handlers in class and function components.\n➤➤ How to use the Event object.\n➤➤ How to bind functions to class components.\n➤➤ How to pass data to event handlers.\n➤➤ How to use arrow functions for inline event handlers.\n➤➤ How passing functions to child components works.\nHOW EVENTS WORK IN REACT\nTo put it simply, listening for events in a React component and handling events is done similarly\nto how HTML event attributes trigger actions in a browser.",
		"➤➤ How to bind functions to class components.\n➤➤ How to pass data to event handlers.\n➤➤ How to use arrow functions for inline event handlers.\n➤➤ How passing functions to child components works.\nHOW EVENTS WORK IN REACT\nTo put it simply, listening for events in a React component and handling events is done similarly\nto how HTML event attributes trigger actions in a browser.\nIn HTML, it’s possible to use event attributes to call JavaScript functions. These event attrib‑\nutes have names starting with “on” and they take a function call as their value. For example,\nthe HTML onsubmit event attribute can be used with the <form> element to invoke a func‑\ntion when the form is submitted. Listing 7‑1 shows an example of using the HTML onsubmit\nattribute. This example assumes that a JavaScript function named validate() has been defined\nor imported elsewhere in the HTML file.\n200 ❘ CHAPTER 7 EvEnts\nLISTING 7- 1: Using an event attribute in HTML\n<form id=\"signup- form\" onsubmit=\"validate()\">",
		"tion when the form is submitted. Listing 7‑1 shows an example of using the HTML onsubmit\nattribute. This example assumes that a JavaScript function named validate() has been defined\nor imported elsewhere in the HTML file.\n200 ❘ CHAPTER 7 EvEnts\nLISTING 7- 1: Using an event attribute in HTML\n<form id=\"signup- form\" onsubmit=\"validate()\">\n<input type=\"text\" id=\"email\">\n<input type=\"text\" id=\"fullname\">\n<input type=\"submit\">\n</form>\nBecause HTML event attributes violate the “separation of concerns” rule that says markup and\nscripts should be kept separate, it’s generally not a good practice to rely on them too heavily in web\napps. Instead, most JavaScript programmers use the addEventListener DOM method to attach\nevent listeners to HTML elements, as shown in Listing 7‑2.\nLISTING 7- 2: Using addEventListener\n<html>\n<head>\n<script>\nfunction validate(e){\n//do something here\n}\n</script>\n</head>\n<body>\n<form id=\"signup- form\">\n<input type=\"text\" id=\"email\">\n<input type=\"text\" id=\"fullname\">",
		"apps. Instead, most JavaScript programmers use the addEventListener DOM method to attach\nevent listeners to HTML elements, as shown in Listing 7‑2.\nLISTING 7- 2: Using addEventListener\n<html>\n<head>\n<script>\nfunction validate(e){\n//do something here\n}\n</script>\n</head>\n<body>\n<form id=\"signup- form\">\n<input type=\"text\" id=\"email\">\n<input type=\"text\" id=\"fullname\">\n<input type=\"submit\">\n</form>\n<script>\ndocument.getElementById(\"signup-f orm\").addEventListener(\"submit\",validate);\n</script>\n</body>\n</html>\nNOTE In Listing 7‑2, the event listener is registered at the end of the body of\nthe document, so the form element will be loaded beforehand. Another way\nto accomplish the same thing is to add another event listener to the document\nthat waits until the entire page (the HTML document) is loaded before regis‑\ntering event listeners.\nIn React, setting event listeners is a hybrid between the two approaches for doing so in HTML. The",
		"the document, so the form element will be loaded beforehand. Another way\nto accomplish the same thing is to add another event listener to the document\nthat waits until the entire page (the HTML document) is loaded before regis‑\ntering event listeners.\nIn React, setting event listeners is a hybrid between the two approaches for doing so in HTML. The\nsyntax in the JSX code looks very similar to an HTML event attribute, but because it’s JSX, it actually\ncompiles to something that more closely resembles using addEventListener.\nWhat Is SyntheticEvent? ❘ 201\nListing 7‑3 shows how to set an event listener in a React component to listen for a form’s\nsubmit event.\nLISTING 7- 3: Setting an event listener in a React component\nfunction MyForm(props){\nreturn (\n<form onSubmit={props.handleSubmit}>\n<input type=\"text\" id=\"fullName\" />\n<input type=\"text\" id=\"phoneNumber\" />\n<button>Submit</button>\n</form>\n);\n}\nexport default MyForm;",
		"Listing 7‑3 shows how to set an event listener in a React component to listen for a form’s\nsubmit event.\nLISTING 7- 3: Setting an event listener in a React component\nfunction MyForm(props){\nreturn (\n<form onSubmit={props.handleSubmit}>\n<input type=\"text\" id=\"fullName\" />\n<input type=\"text\" id=\"phoneNumber\" />\n<button>Submit</button>\n</form>\n);\n}\nexport default MyForm;\nAs you’ll frequently see in React, it would seem that the use of an event listener attribute would\nviolate the same separation of concerns rule that dictates that the use of event attributes in HTML\nshould be avoided. However, keep in mind that JSX is, essentially, JavaScript. So, in reality, it’s not\nthat you’re using HTML to trigger JavaScript, but that you’re using JavaScript to write HTML and to\nadd an event listener to the form element created using JavaScript.\nThe two biggest clues as to what’s really going on when you write event attributes in JSX are:",
		"should be avoided. However, keep in mind that JSX is, essentially, JavaScript. So, in reality, it’s not\nthat you’re using HTML to trigger JavaScript, but that you’re using JavaScript to write HTML and to\nadd an event listener to the form element created using JavaScript.\nThe two biggest clues as to what’s really going on when you write event attributes in JSX are:\n1. As with the DOM addEventListener method, React event attributes take a function,\nrather than a string containing a function call, as their value. The value of a React event\nattribute must be in curly braces and it should not have the pair of parentheses after the\nfunction name.\n2. React event attributes use JavaScript‑s tyle camelCase names, rather than the HTML‑ style\nlowercase attribute names used by HTML event attributes.\nReact events are actually a wrapper around native HTML DOM events, which take the same names\nas the native events (albeit with different capitalization). These wrapped events are instances of a",
		"function name.\n2. React event attributes use JavaScript‑s tyle camelCase names, rather than the HTML‑ style\nlowercase attribute names used by HTML event attributes.\nReact events are actually a wrapper around native HTML DOM events, which take the same names\nas the native events (albeit with different capitalization). These wrapped events are instances of a\nReact class called SyntheticEvent.\nWHAT IS SYNTHETICEVENT?\nSyntheticEvent is a cross‑ browser wrapper around the browser’s native events. Historically, web\nbrowsers have always had slightly different ways of handling events. Most famously, in Microsoft’s\nnow defunct Internet Explorer browser, the event object was a global property of the browser’s\nwindow object, whereas in Chrome and Firefox, it was a property passed to event handlers (as is the\ncase with SyntheticEvent). Another important difference between how browsers handle events is at",
		"browsers have always had slightly different ways of handling events. Most famously, in Microsoft’s\nnow defunct Internet Explorer browser, the event object was a global property of the browser’s\nwindow object, whereas in Chrome and Firefox, it was a property passed to event handlers (as is the\ncase with SyntheticEvent). Another important difference between how browsers handle events is at\nwhat point in the propagation of events do the event listeners handle them. Today, every modern\nbrowser handles events during the event “bubbling” phase, but in the earlier days of web browsers,\nInternet Explorer handled events during the “capture” phase.\n202 ❘ CHAPTER 7 EvEnts\nNOTE Event bubbling refers to the upward propagation of an event from\na lower level in the element hierarchy to a higher one. Event capture is the\nopposite. In event bubbling, an event that happens on a button (such as a\nclick) is dispatched by the button before the form element that contains the\nbutton dispatches it.",
		"202 ❘ CHAPTER 7 EvEnts\nNOTE Event bubbling refers to the upward propagation of an event from\na lower level in the element hierarchy to a higher one. Event capture is the\nopposite. In event bubbling, an event that happens on a button (such as a\nclick) is dispatched by the button before the form element that contains the\nbutton dispatches it.\nThese historic and major differences between how web browsers handle events have largely been\nironed out, and today the real value of having a cross‑ browser wrapper for events is that it can pro‑\nvide additional and consistent properties across every browser.\nSyntheticEvent also shields developers from the implementation details of exactly how events in React\nare translated to DOM events in the browser. The React documentation is intentionally vague about\nexactly how SyntheticEvents map to native events (although it is possible to find this out, as you’ll",
		"vide additional and consistent properties across every browser.\nSyntheticEvent also shields developers from the implementation details of exactly how events in React\nare translated to DOM events in the browser. The React documentation is intentionally vague about\nexactly how SyntheticEvents map to native events (although it is possible to find this out, as you’ll\nsee). Except in rare cases, these details won’t matter to a React developer, and because these details\nare not part of the official React documentation, they are subject to change at any time.\nUSING EVENT LISTENER ATTRIBUTES\nTo create an event listener in React, use one of the supported event listener attributes on a built‑i n\nHTML DOM element. If the HTML event that will be created by a React component supports a\ncertain event, it should also be supported by the React component, except in a few cases where things\nwork differently in React.",
		"USING EVENT LISTENER ATTRIBUTES\nTo create an event listener in React, use one of the supported event listener attributes on a built‑i n\nHTML DOM element. If the HTML event that will be created by a React component supports a\ncertain event, it should also be supported by the React component, except in a few cases where things\nwork differently in React.\nUsing an event listener attribute in an element created by a custom component won’t have any effect\non the custom component except to create a prop inside of it with same name as the event listener\nattribute. For example, inside the following element, a prop named onClick will be created:\n<MyButton onClick={handleEvent} />\nThe preceding onClick attribute is not an event listener attribute. It’s common to use the names of\nevent listener attributes to pass event handlers between custom components, but doing so doesn’t\nactually add the event listener to the resulting browser DOM.",
		"attribute. For example, inside the following element, a prop named onClick will be created:\n<MyButton onClick={handleEvent} />\nThe preceding onClick attribute is not an event listener attribute. It’s common to use the names of\nevent listener attributes to pass event handlers between custom components, but doing so doesn’t\nactually add the event listener to the resulting browser DOM.\nIn order for the MyButton component to actually be able to handle events, you must have an HTML\nDOM element inside the MyButton component that has an event listener attribute. For example,\nhere’s what the return statement of the MyButton component might look like:\nreturn (\n<button onClick={props.onClick}>Click Me</button>\n);\nThe Event Object ❘ 203\nTHE EVENT OBJECT\nWhen an event happens in React, it triggers an event in the DOM. This, in turn, creates an instance\nof the Event object, which triggers the creation of a SyntheticEvent object in React. This is what we",
		"here’s what the return statement of the MyButton component might look like:\nreturn (\n<button onClick={props.onClick}>Click Me</button>\n);\nThe Event Object ❘ 203\nTHE EVENT OBJECT\nWhen an event happens in React, it triggers an event in the DOM. This, in turn, creates an instance\nof the Event object, which triggers the creation of a SyntheticEvent object in React. This is what we\nmean by SyntheticEvent being a wrapper around native DOM events.\nThe Event object contains the properties and methods that are common to all events. The most\nimportant of these base Event properties and methods are the following:\n➤➤ Event.cancelable indicates whether an event can be canceled. Canceling an event prevents\nthe event from happening. Canceling events is useful when you want to prevent a user from\nclicking something or to prevent a form element from submitting a form, for example.\n➤➤ Event.target references the object onto which the event was originally dispatched (such as",
		"➤➤ Event.cancelable indicates whether an event can be canceled. Canceling an event prevents\nthe event from happening. Canceling events is useful when you want to prevent a user from\nclicking something or to prevent a form element from submitting a form, for example.\n➤➤ Event.target references the object onto which the event was originally dispatched (such as\nan element that was clicked or a form input that was typed into).\n➤➤ Event.type contains the name of the event, such as click, change, load, mouseover,\nand so forth.\n➤➤ Event.preventDefault cancels an event if it’s cancelable.\nThe wrapper that React creates around the JavaScript Event object is named SyntheticBaseEvent.\nTo access the properties and methods of the SyntheticBaseEvent object, specify a parameter in\nthe function definition for your event handler. The SyntheticBaseEvent object will take the name\nof this parameter inside the function. It’s a standard practice for this parameter to be named either",
		"The wrapper that React creates around the JavaScript Event object is named SyntheticBaseEvent.\nTo access the properties and methods of the SyntheticBaseEvent object, specify a parameter in\nthe function definition for your event handler. The SyntheticBaseEvent object will take the name\nof this parameter inside the function. It’s a standard practice for this parameter to be named either\nevent or simply e, but there’s no restriction in React or JavaScript on what valid JavaScript variable\nname you give it.\nListing 7‑4 is a React component that listens for a click event on a button and then prints out the\nproperties of the dispatched SyntheticBaseEvent object to the console.\nLISTING 7- 4: Viewing the properties of the Event object\nfunction EventProps(){\nconst logClick=(e)=>{\nconsole.dir(e);\n}\nreturn(\n<button onClick={logClick}>Click Me</button>\n)\n}\nexport default EventProps;\nWith modifications, this basic function can be used to view the properties of the SyntheticBaseEvent",
		"properties of the dispatched SyntheticBaseEvent object to the console.\nLISTING 7- 4: Viewing the properties of the Event object\nfunction EventProps(){\nconst logClick=(e)=>{\nconsole.dir(e);\n}\nreturn(\n<button onClick={logClick}>Click Me</button>\n)\n}\nexport default EventProps;\nWith modifications, this basic function can be used to view the properties of the SyntheticBaseEvent\nobject for any event. Figure 7‑1 shows the object that’s output to the console when you click the button\nin this component.\n204 ❘ CHAPTER 7 EvEnts\nFIGURE 7- 1: Viewing the properties of a SyntheticEvent\nThe SyntheticBaseEvent object has a property called NativeEvent, which is an object that\ncontains all the properties from the native Event object that SyntheticBaseEvent wraps around.\nCompare the properties in this NativeEvent object, shown in Figure 7‑2, with the properties in the\nSyntheticEvent shown in Figure 7‑1.\nSUPPORTED EVENTS",
		"FIGURE 7- 1: Viewing the properties of a SyntheticEvent\nThe SyntheticBaseEvent object has a property called NativeEvent, which is an object that\ncontains all the properties from the native Event object that SyntheticBaseEvent wraps around.\nCompare the properties in this NativeEvent object, shown in Figure 7‑2, with the properties in the\nSyntheticEvent shown in Figure 7‑1.\nSUPPORTED EVENTS\nAll interactivity in a web browser happens as a result of events. Events are what is emitted (or\n“fired”) by software in reaction to interactions or significant things (including automated processes)\nhappening in the browser. For example, when a user clicks a mouse button while the pointer is\nhovered over a button, that causes the button element to emit a click event. The movement of the\nmouse pointer within the browser window and the mouse pointer hovering over an element trigger\nadditional events.\nSupported Events ❘ 205\nFIGURE 7- 2: The NativeEvent properties",
		"happening in the browser. For example, when a user clicks a mouse button while the pointer is\nhovered over a button, that causes the button element to emit a click event. The movement of the\nmouse pointer within the browser window and the mouse pointer hovering over an element trigger\nadditional events.\nSupported Events ❘ 205\nFIGURE 7- 2: The NativeEvent properties\nMany DOM events are defined in official specifications, and others are defined and used by specific\nbrowsers. These events can be detected using the HTML DOM and responded to using JavaScript\nrunning in the browser.\nReact supports listening for and handling many of the standard DOM events. Many of these events\nadd properties to the Event object, which you can use to find out more about the event. For example,\nthe keyboard events include properties that tell which key was pressed.\nTable 7‑1 lists the events that are currently supported within React, along with a brief description of",
		"running in the browser.\nReact supports listening for and handling many of the standard DOM events. Many of these events\nadd properties to the Event object, which you can use to find out more about the event. For example,\nthe keyboard events include properties that tell which key was pressed.\nTable 7‑1 lists the events that are currently supported within React, along with a brief description of\neach one. To view the properties added to the Event object, you can log the Event object to the con‑\nsole, as shown in Listing 7‑4, or visit the excellent Event API documentation available at https://\ndeveloper.mozilla.org/en- US/docs/Web/API/Event.\n206 ❘ CHAPTER 7 EvEnts\nTABLE 7-1 : Events Supported by React\nCATEGORY EVENT LISTENER DESCRIPTION\nClipboard onCopy The copy event fires when data is copied to the\nEvents clipboard.\nonCut The cut event fires when data is cut to the\nclipboard.\nonPaste The paste event fires when data is pasted from the\nclipboard.",
		"developer.mozilla.org/en- US/docs/Web/API/Event.\n206 ❘ CHAPTER 7 EvEnts\nTABLE 7-1 : Events Supported by React\nCATEGORY EVENT LISTENER DESCRIPTION\nClipboard onCopy The copy event fires when data is copied to the\nEvents clipboard.\nonCut The cut event fires when data is cut to the\nclipboard.\nonPaste The paste event fires when data is pasted from the\nclipboard.\nComposition onCompositionEnd The compositionend event fires when a text\nEvents composition system completes or cancels a session.\nText composition systems include input method\neditors (IMEs) for entering Chinese, Japanese, or\nKorean text using a Latin keyboard.\nonCompositionStart The compositionstart event fires when a text\ncomposition system starts a session.\nonCompositionUpdate The compositionupdate event fires when a new\ncharacter is received during a composition session.\nKeyboard onKeyDown The keydown event fires when a key is pressed.\nEvents\nonKeyPress The keypress event fires when a key that produces\na character is pressed.",
		"onCompositionStart The compositionstart event fires when a text\ncomposition system starts a session.\nonCompositionUpdate The compositionupdate event fires when a new\ncharacter is received during a composition session.\nKeyboard onKeyDown The keydown event fires when a key is pressed.\nEvents\nonKeyPress The keypress event fires when a key that produces\na character is pressed.\nonKeyUp The keyup event fires when a key is released.\nFocus Events onFocus The focus event fires when an element receives\nfocus, for example when an input element is\nselected.\nonBlur The blur event fires when an element loses focus,\nfor example when an input element becomes\nunselected (by tabbing out of it or clicking another\ninput element).\nForm Events onChange The change event is fired for input, select, and\ntextarea elements when the value of the input is\nchanged by the user.\nonInput The input event fires when the value of an element\nchanges.\nonInvalid The invalid event fires when a submittable",
		"for example when an input element becomes\nunselected (by tabbing out of it or clicking another\ninput element).\nForm Events onChange The change event is fired for input, select, and\ntextarea elements when the value of the input is\nchanged by the user.\nonInput The input event fires when the value of an element\nchanges.\nonInvalid The invalid event fires when a submittable\nelement’s content is checked and doesn’t meet\nits constraints. For example, when a number input\nreceives a number outside of the range specified by\nmin and max attributes.\nSupported Events ❘ 207\nCATEGORY EVENT LISTENER DESCRIPTION\nonReset The reset event fires when a form is reset.\nonSubmit The submit event fires when a form is submitted.\nGeneric onError The error event fires when a resource fails to load.\nEvents\nonLoad The load event fires when a resource finishes\nloading.\nMouse onClick The click event fires when a pointing device (such\nEvents as a mouse) has been pressed and released.",
		"CATEGORY EVENT LISTENER DESCRIPTION\nonReset The reset event fires when a form is reset.\nonSubmit The submit event fires when a form is submitted.\nGeneric onError The error event fires when a resource fails to load.\nEvents\nonLoad The load event fires when a resource finishes\nloading.\nMouse onClick The click event fires when a pointing device (such\nEvents as a mouse) has been pressed and released.\nonContextMenu The contextmenu event fires when the right mouse\nbutton is clicked.\nonDoubleClick The doubleclick event fires when the mouse\nbutton is double- clicked.\nonDrag The drag event fires while an element or text\nselection is being dragged.\nonDragEnd The dragend event fires when a drag event ends\n(such as when the mouse button is released).\nonDragEnter The dragenter event fires when a draggable\nelement enters a drop target.\nonDragExit The dragexit event fires when a draggable\nelement exits a drop target. Note: onDragExit\nmay not work in all browsers. Use onDragLeave\ninstead.",
		"selection is being dragged.\nonDragEnd The dragend event fires when a drag event ends\n(such as when the mouse button is released).\nonDragEnter The dragenter event fires when a draggable\nelement enters a drop target.\nonDragExit The dragexit event fires when a draggable\nelement exits a drop target. Note: onDragExit\nmay not work in all browsers. Use onDragLeave\ninstead.\nonDragLeave The dragleave event fires when a draggable\nelement exits a drop target.\nonDragOver The dragover event fires while a draggable\nelement is being dragged over a drop target.\nonDragStart The dragstart event fires when the user begins\ndragging an element.\nonDrop The drop event fires when an element is dropped\non a drop target.\nonMouseDown The mousedown event fires when a pointing device\nbutton (such as a mouse button) is pressed on an\nelement.\nonMouseEnter The mouseenter event fires when a pointing device\nis moved onto an element.\ncontinues\n208 ❘ CHAPTER 7 EvEnts\nTABLE 7-1 (continued)",
		"dragging an element.\nonDrop The drop event fires when an element is dropped\non a drop target.\nonMouseDown The mousedown event fires when a pointing device\nbutton (such as a mouse button) is pressed on an\nelement.\nonMouseEnter The mouseenter event fires when a pointing device\nis moved onto an element.\ncontinues\n208 ❘ CHAPTER 7 EvEnts\nTABLE 7-1 (continued)\nCATEGORY EVENT LISTENER DESCRIPTION\nonMouseLeave The mouseleave event fires when a pointing device\nis moved off an element.\nonMouseMove The mousemove event fires when a pointing device\nis moved over an element.\nonMouseOut The mouseout event fires when a pointing device\nis moved off an element that has the onMouseOut\nevent listener attached to one of its children.\nonMouseOver The mouseover event fires when a pointing\ndevice is moved onto an element that has the\nonMouseOver event listener attached to one of its\nchildren.\nonMouseUp The mouseup event fires when a pointing device\nbutton is released over an element.",
		"is moved off an element that has the onMouseOut\nevent listener attached to one of its children.\nonMouseOver The mouseover event fires when a pointing\ndevice is moved onto an element that has the\nonMouseOver event listener attached to one of its\nchildren.\nonMouseUp The mouseup event fires when a pointing device\nbutton is released over an element.\nPointer onPointerDown The pointerdown event fires when a pointer device\nEvents (such as a mouse, pen, or touch) becomes active,\nfor example when a button is clicked or a touch-\nsensitive device is touched.\nonPointerMove The pointermove event fires when a pointer\nchanges coordinates.\nonPointerUp The pointerup event fires when a pointer is no\nlonger active.\nonPointerCancel The pointercancel event fires when a browser\ndecides there are unlikely to be more pointer\nevents (such as when the browser window becomes\ninactive).\nonGotPointerCapture The gotpointercapture event fires when the\nsetPointerCapture method is used to capture a\npointer.",
		"changes coordinates.\nonPointerUp The pointerup event fires when a pointer is no\nlonger active.\nonPointerCancel The pointercancel event fires when a browser\ndecides there are unlikely to be more pointer\nevents (such as when the browser window becomes\ninactive).\nonGotPointerCapture The gotpointercapture event fires when the\nsetPointerCapture method is used to capture a\npointer.\nonLostPointerCapture The lostpointercapture event fires when a\ncaptured pointer is released.\nonPointerEnter The pointerenter event fires when a pointer\nmoves into the boundaries of an element on a\ndevice that doesn’t support hover (such as a pen or\ntouch device with no mouse).\nonPointerLeave The pointerleave event fires when a pointer\nmoves out of the boundaries of an element.\nSupported Events ❘ 209\nCATEGORY EVENT LISTENER DESCRIPTION\nonPointerOver The pointerover event fires when a pointing\ndevice moves into an element’s boundaries.\nonPointerOut The pointerout event fires when a pointer leaves",
		"touch device with no mouse).\nonPointerLeave The pointerleave event fires when a pointer\nmoves out of the boundaries of an element.\nSupported Events ❘ 209\nCATEGORY EVENT LISTENER DESCRIPTION\nonPointerOver The pointerover event fires when a pointing\ndevice moves into an element’s boundaries.\nonPointerOut The pointerout event fires when a pointer leaves\nthe boundaries of an element.\nSelection onSelect The select event fires when text is selected.\nEvents\nTouch Events onTouchCancel The touchcancel event fires when a touch point\nhas been disrupted.\nonTouchEnd The touchend event fires when a touch point is\nremoved from a touch surface.\nonTouchMove The touchmove event fires when a touch point is\nmoved along a touch surface.\nonTouchStart The touchstart event fires when a touch point is\nplaced on a touch surface.\nUI Events onScroll The scroll event fires when the document or an\nelement is scrolled.\nWheel onWheel The wheel event fires when a wheel button of a\nEvents pointing device is rotated.",
		"removed from a touch surface.\nonTouchMove The touchmove event fires when a touch point is\nmoved along a touch surface.\nonTouchStart The touchstart event fires when a touch point is\nplaced on a touch surface.\nUI Events onScroll The scroll event fires when the document or an\nelement is scrolled.\nWheel onWheel The wheel event fires when a wheel button of a\nEvents pointing device is rotated.\nMedia Events onAbort The abort event fires when playback of the media\nis aborted.\nonCanPlay The canplay event fires when enough data is\navailable that the media can start playing.\nonCanPlayThrough The canplaythrough event fires when enough of\na media file is downloaded that the file can play\nwithout interruption.\nonDurationChange The durationchange event fires when the\nmetadata indicating the duration of the media\nfile changes, such as when enough of it has\ndownloaded that the duration is known.\nonEmptied The emptied event fires when the media has\nbecome empty, such as when it’s reloaded.",
		"a media file is downloaded that the file can play\nwithout interruption.\nonDurationChange The durationchange event fires when the\nmetadata indicating the duration of the media\nfile changes, such as when enough of it has\ndownloaded that the duration is known.\nonEmptied The emptied event fires when the media has\nbecome empty, such as when it’s reloaded.\nonEncrypted The encrypted event fires when the media\nindicates that it’s encrypted.\nonEnded The ended event fires when playback of the media\nends.\ncontinues\n210 ❘ CHAPTER 7 EvEnts\nTABLE 7-1 (continued)\nCATEGORY EVENT LISTENER DESCRIPTION\nonError The error event fires when an error occurs.\nonLoadedData The loadeddata event fires when the media has\nfinished loading.\nonLoadedMetadata The loadedmetadata event fires when the media’s\nmetadata is loaded.\nonLoadStart The loadstart event fires when loading of the\nmedia starts.\nonPause The pause event fires when playback is paused.\nonPlay The play event fires when playback begins or",
		"onError The error event fires when an error occurs.\nonLoadedData The loadeddata event fires when the media has\nfinished loading.\nonLoadedMetadata The loadedmetadata event fires when the media’s\nmetadata is loaded.\nonLoadStart The loadstart event fires when loading of the\nmedia starts.\nonPause The pause event fires when playback is paused.\nonPlay The play event fires when playback begins or\nresumes as a result of the play method.\nonPlaying The playing event fires after the play event, when\nthe media has enough data to begin playing.\nonProgress The progress event fires during loading of media\nand contains information about the amount of data\nloaded.\nonRateChange The ratechange event fires when playback\nchanges speed.\nonSeeked The seeked event fires when a seek operation\nfinishes.\nonSeeking The seeking event fires when a seek operation\nstarts.\nonStalled The stalled event fires when loading of media is\nunexpectedly not happening.\nonSuspend The suspend event fires when loading of media is",
		"loaded.\nonRateChange The ratechange event fires when playback\nchanges speed.\nonSeeked The seeked event fires when a seek operation\nfinishes.\nonSeeking The seeking event fires when a seek operation\nstarts.\nonStalled The stalled event fires when loading of media is\nunexpectedly not happening.\nonSuspend The suspend event fires when loading of media is\npaused or completed.\nonTimeUpdate The timeupdate event fires when the\ncurrentTime attribute of the element changes.\nonVolumeChange The volumechange event fires when the audio\nvolume changes.\nonWaiting The waiting event fires when a requested\noperation is delayed.\nImage Events onLoad The load event fires when an image is fully loaded.\nonError The error event fires when an error occurs in\nloading of an image.\nEvent Handler Functions ❘ 211\nCATEGORY EVENT LISTENER DESCRIPTION\nAnimation onAnimationStart The animationstart event fires when an\nEvents animation starts.\nonAnimationEnd The animationend event fires when an animation\nstops.",
		"operation is delayed.\nImage Events onLoad The load event fires when an image is fully loaded.\nonError The error event fires when an error occurs in\nloading of an image.\nEvent Handler Functions ❘ 211\nCATEGORY EVENT LISTENER DESCRIPTION\nAnimation onAnimationStart The animationstart event fires when an\nEvents animation starts.\nonAnimationEnd The animationend event fires when an animation\nstops.\nonAnimationIteration The animationiteration event fires when one\niteration of an animation ends and another starts.\nTransition onTransitionEnd The transitionend event fires when a CSS\nEvents transition completes.\nOther Events onToggle The toggle event fires when the state of a\ndetails element (open or closed) is toggled.\nEVENT HANDLER FUNCTIONS\nOnce your React component has detected an event, you can write a function that will take some\naction in response to the event. This function is called an event handler function.\nWriting Inline Event Handlers",
		"Events transition completes.\nOther Events onToggle The toggle event fires when the state of a\ndetails element (open or closed) is toggled.\nEVENT HANDLER FUNCTIONS\nOnce your React component has detected an event, you can write a function that will take some\naction in response to the event. This function is called an event handler function.\nWriting Inline Event Handlers\nAn inline event handler is an anonymous function that’s written as the value of an event listener\nattribute. Inline event handlers are often used as wrappers for calling another function that’s defined\noutside of the return statement. They may also be used for performing simple tasks that perhaps\ndon’t warrant the creation of a full event handler function.\nListing 7‑5 shows an example of an inline event handler.\nLISTING 7- 5: Using an inline event handler to show an alert\nfunction WarningButton(){\nreturn (\n<button onClick={()=>{alert('Are you sure?');}}>Don't Click Here</button>\n);\n}\nexport default WarningButton;",
		"don’t warrant the creation of a full event handler function.\nListing 7‑5 shows an example of an inline event handler.\nLISTING 7- 5: Using an inline event handler to show an alert\nfunction WarningButton(){\nreturn (\n<button onClick={()=>{alert('Are you sure?');}}>Don't Click Here</button>\n);\n}\nexport default WarningButton;\nIt’s possible to call multiple functions or execute a block of code from inside an inline event handler,\nbut there are several reasons for not using inline event handlers for complex code:\n1. Inline event handlers aren’t reusable.\n2. Inline event handlers can be difficult to read and they reduce the organization of your code.\n212 ❘ CHAPTER 7 EvEnts\n3. Inline event handlers are re‑ created every time the component re‑r enders. In function com‑\nponents, this is what happens to all inner functions. But, in class components, inline event\nhandlers may affect performance, although the effect is not likely to be noticeable, and",
		"2. Inline event handlers can be difficult to read and they reduce the organization of your code.\n212 ❘ CHAPTER 7 EvEnts\n3. Inline event handlers are re‑ created every time the component re‑r enders. In function com‑\nponents, this is what happens to all inner functions. But, in class components, inline event\nhandlers may affect performance, although the effect is not likely to be noticeable, and\nprematurely optimizing your code for this kind of problem before you have it will cause you\nmore problems (in terms of time wasted alone) than it solves.\nNOTE I’ll talk about how to use React Hooks to cache event handler functions\nin function components in Chapter 11.\nInline event handlers are often also used when the result of some user interaction should be simply to\nupdate the state in some way. In a class component, this means that setState is called, or in a func‑\ntion component, when the state setter function is called. Listing 7‑6 shows an example of using an",
		"in function components in Chapter 11.\nInline event handlers are often also used when the result of some user interaction should be simply to\nupdate the state in some way. In a class component, this means that setState is called, or in a func‑\ntion component, when the state setter function is called. Listing 7‑6 shows an example of using an\ninline event handler to call setState.\nLISTING 7- 6: Using an inline event handler to call setState\nimport {Component} from 'react';\nclass ScreenDoor extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\nisOpen:true\n}\n}\nrender(){\nreturn(\n<button onClick={()=>this.setState({isOpen:!this.state.isOpen})}>\n{this.state.isOpen?'Close the Door':'Open the Door'}\n</button>\n)\n}\n}\nexport default ScreenDoor;\nWriting Event Handlers in Function Components\nAn event handler inside a function component is written as an inner function, using either arrow\nsyntax or the function keyword.",
		"super(props);\nthis.state={\nisOpen:true\n}\n}\nrender(){\nreturn(\n<button onClick={()=>this.setState({isOpen:!this.state.isOpen})}>\n{this.state.isOpen?'Close the Door':'Open the Door'}\n</button>\n)\n}\n}\nexport default ScreenDoor;\nWriting Event Handlers in Function Components\nAn event handler inside a function component is written as an inner function, using either arrow\nsyntax or the function keyword.\nIf you’re comfortable with the class method of writing components, you can think of function compo‑\nnents as being the render method from a class component. The event handlers in a function compo‑\nnent only exist for a single render, unlike in class components where they’re methods of the class and\npersist between renders.\nEvent Handler Functions ❘ 213\nFunction components don’t have the this keyword, and so there’s no need to bind event handlers\ndeclared inside of functions.\nWriting functions inside of function components is as simple as writing a function anywhere else.",
		"nent only exist for a single render, unlike in class components where they’re methods of the class and\npersist between renders.\nEvent Handler Functions ❘ 213\nFunction components don’t have the this keyword, and so there’s no need to bind event handlers\ndeclared inside of functions.\nWriting functions inside of function components is as simple as writing a function anywhere else.\nOnce you’ve written an event handler function, you can assign it to a particular event listener by pass‑\ning the name of the function as the value of an event listener attribute, as shown in Listing 7‑7.\nLISTING 7- 7: Using an event handler function in a function component\nimport {useState} from 'react';\nfunction Search(props){\nconst [term,setTerm] = useState('');\nconst updateTerm = (searchTerm)=>{\nsetTerm(searchTerm);\n}\nreturn(\n<>\n<input type=\"text\" value={term} onChange={(e)=>{updateTerm(e.target.value)}}\n/><br />\nYou're searching for: {term}\n</>\n);\n}\nexport default Search;",
		"LISTING 7- 7: Using an event handler function in a function component\nimport {useState} from 'react';\nfunction Search(props){\nconst [term,setTerm] = useState('');\nconst updateTerm = (searchTerm)=>{\nsetTerm(searchTerm);\n}\nreturn(\n<>\n<input type=\"text\" value={term} onChange={(e)=>{updateTerm(e.target.value)}}\n/><br />\nYou're searching for: {term}\n</>\n);\n}\nexport default Search;\nWriting Event Handlers in Class Components\nEvent handlers in class components are methods of the class. They’re written outside of the render\nmethod and must be bound to the specific instance of the class.\nListing 7‑8 shows one way to write and bind an event handler method in a class component.\nLISTING 7- 8: Writing and binding an event handler method in a class\nimport {Component} from 'react';\nclass CoffeeMachine extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\nbrewing:false\n}\nthis.toggleBrewing = this.toggleBrewing.bind(this);\n}\ncontinues\n214 ❘ CHAPTER 7 EvEnts\nLISTING 7-8 (continued)",
		"LISTING 7- 8: Writing and binding an event handler method in a class\nimport {Component} from 'react';\nclass CoffeeMachine extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\nbrewing:false\n}\nthis.toggleBrewing = this.toggleBrewing.bind(this);\n}\ncontinues\n214 ❘ CHAPTER 7 EvEnts\nLISTING 7-8 (continued)\ntoggleBrewing = function(){\nthis.setState({brewing:!this.state.brewing});\n}\nrender(){\nreturn(\n<>\nThe Coffee Maker is {this.state.brewing?'on':'off'}.<br />\n<button onClick={this.toggleBrewing}>toggle brewing state</button>\n</>\n);\n}\n}\nexport default CoffeeMachine;\nJAVASCRIPT LESSON: METHOD DEFINITION SYNTAX\nIn JavaScript classes, functions in the class (also known as methods) can be created\nusing method definition syntax, which is a shorthand way of assigning a function to\na method name.\nFor example, you can define a method by assigning a function to a property,\nlike this:\ntoggleBrewing = function(){\nthis.setState({brewing:!this.state.brewing});\n}",
		"JAVASCRIPT LESSON: METHOD DEFINITION SYNTAX\nIn JavaScript classes, functions in the class (also known as methods) can be created\nusing method definition syntax, which is a shorthand way of assigning a function to\na method name.\nFor example, you can define a method by assigning a function to a property,\nlike this:\ntoggleBrewing = function(){\nthis.setState({brewing:!this.state.brewing});\n}\nOr you can use method definition syntax, like this:\ntoggleBrewing(){\nthis.setState({brewing:!this.state.brewing});\n}\nBinding Event Handler Functions\nTo be useful, event handler functions need to be passed as values to React’s built‑i n components that\nsupport event listener attributes. For example, the built‑ in input element represents an input compo‑\nnent that can receive an onChange event handler prop and will call an associated callback function\nwhen it receives a change event.\nBecause event handler functions are passed to child components via props, they need to be bound to",
		"support event listener attributes. For example, the built‑ in input element represents an input compo‑\nnent that can receive an onChange event handler prop and will call an associated callback function\nwhen it receives a change event.\nBecause event handler functions are passed to child components via props, they need to be bound to\nthe context in which they were created so that the value of this will refer to the parent component in\nwhich the event handler was defined.\nEvent Handler Functions ❘ 215\nOnly class components have a this keyword, so binding only applies in class components. Plus, as\nyou’ll see, binding only applies in class components to methods defined using function or method\ndefinition syntax.\nUsing bind\nIf you’re still not clear on how this and bind work in JavaScript classes, go back and review the\nJavaScript lesson from Chapter 4. Or, just remember this rule:\nIn class components, if a function defined using method definition syntax or the function",
		"you’ll see, binding only applies in class components to methods defined using function or method\ndefinition syntax.\nUsing bind\nIf you’re still not clear on how this and bind work in JavaScript classes, go back and review the\nJavaScript lesson from Chapter 4. Or, just remember this rule:\nIn class components, if a function defined using method definition syntax or the function\nkeyword will be passed as a prop, bind it.\nFunctions can be bound in one of two ways. The first is the method you’ve seen most often so far: in\nthe constructor. In this method, you overwrite the value of the unbound function with a new function\nthat includes the context of the class, as shown in Listing 7‑9.\nLISTING 7- 9: Binding a function in the constructor\nimport {Component} from 'react';\nclass ColorWheel extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {\ncurrentColor: '#ff0000'\n}\nthis.changeColor = this.changeColor.bind(this);\n}\nchangeColor(e) {\nthis.setState({currentColor:e.target.value});\n}",
		"that includes the context of the class, as shown in Listing 7‑9.\nLISTING 7- 9: Binding a function in the constructor\nimport {Component} from 'react';\nclass ColorWheel extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {\ncurrentColor: '#ff0000'\n}\nthis.changeColor = this.changeColor.bind(this);\n}\nchangeColor(e) {\nthis.setState({currentColor:e.target.value});\n}\nrender(){\nconst wheelStyle = {\nwidth: \"200px\",\nheight: \"200px\",\nborderRadius: \"50%\",\nbackgroundColor: this.state.currentColor\n}\nreturn(\n<>\n<div style={wheelStyle}></div>\n<input onChange={this.changeColor} value={this.state.currentColor} />\n</>\n)\n}\n}\nexport default ColorWheel;\n216 ❘ CHAPTER 7 EvEnts\nThe other method of binding a function is to do it inline. In this method, you bind the function inside\nthe value of the event listener attribute, as shown in Listing 7‑10.\nLISTING 7- 10: Binding an event handler inline\nimport {Component} from 'react';\nclass ColorWheel extends Component {\nconstructor(props){",
		"</>\n)\n}\n}\nexport default ColorWheel;\n216 ❘ CHAPTER 7 EvEnts\nThe other method of binding a function is to do it inline. In this method, you bind the function inside\nthe value of the event listener attribute, as shown in Listing 7‑10.\nLISTING 7- 10: Binding an event handler inline\nimport {Component} from 'react';\nclass ColorWheel extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {\ncurrentColor: '#ff0000'\n}\n}\nchangeColor(e) {\nthis.setState({currentColor:e.target.value});\n}\nrender(){\nconst wheelStyle = {\nwidth: \"200px\",\nheight: \"200px\",\nborderRadius: \"50%\",\nbackgroundColor: this.state.currentColor\n}\nreturn(\n<>\n<div style={wheelStyle}></div>\n<input onChange={this.changeColor.bind(this)} value={this.state.currentColor} />\n</>\n)\n}\n}\nexport default ColorWheel;\nWhile the inline method may be more convenient in some cases, it has the drawback of living inside\nthe render method, which means that it will re‑r un every time the component renders. Also, it may",
		"}\nreturn(\n<>\n<div style={wheelStyle}></div>\n<input onChange={this.changeColor.bind(this)} value={this.state.currentColor} />\n</>\n)\n}\n}\nexport default ColorWheel;\nWhile the inline method may be more convenient in some cases, it has the drawback of living inside\nthe render method, which means that it will re‑r un every time the component renders. Also, it may\nresult in duplication of effort if you use the same event handler function more than once in a class.\nBecause the constructor only runs once, binding in the constructor has the benefit of being efficient as\nwell as of keeping your code tidy.\nUsing Arrow Functions\nArrow functions use lexical this binding. What this means is that they are automatically bound to\nthe scope in which they’re created. As a result, if you define your event handlers using arrow func‑\ntions, or write your event handlers as inline arrow functions, they don’t need to be bound.\nEvent Handler Functions ❘ 217",
		"well as of keeping your code tidy.\nUsing Arrow Functions\nArrow functions use lexical this binding. What this means is that they are automatically bound to\nthe scope in which they’re created. As a result, if you define your event handlers using arrow func‑\ntions, or write your event handlers as inline arrow functions, they don’t need to be bound.\nEvent Handler Functions ❘ 217\nListing 7‑11 shows how to use an arrow function as an event handler.\nLISTING 7- 11: Using an arrow function as an event handler\nimport {Component} from 'react';\nclass ColorWheel extends Component {\nconstructor(props){\nsuper(props);\nthis.state = {\ncurrentColor: '#ff0000'\n}\n}\nchangeColor = (e)=>{\nthis.setState({currentColor:e.target.value});\n}\nrender(){\nconst wheelStyle = {\nwidth: \"200px\",\nheight: \"200px\",\nborderRadius: \"50%\",\nbackgroundColor: this.state.currentColor\n}\nreturn(\n<>\n<div style={wheelStyle}></div>\n<input onChange={this.changeColor} value={this.state.currentColor} />\n</>\n)\n}\n}\nexport default ColorWheel;",
		"this.state = {\ncurrentColor: '#ff0000'\n}\n}\nchangeColor = (e)=>{\nthis.setState({currentColor:e.target.value});\n}\nrender(){\nconst wheelStyle = {\nwidth: \"200px\",\nheight: \"200px\",\nborderRadius: \"50%\",\nbackgroundColor: this.state.currentColor\n}\nreturn(\n<>\n<div style={wheelStyle}></div>\n<input onChange={this.changeColor} value={this.state.currentColor} />\n</>\n)\n}\n}\nexport default ColorWheel;\nUsing the same syntax that you used to eliminate the binding of the event handler in the constructor,\nyou may also be able to eliminate the constructor completely and define your component’s state using\na class property, as shown in Listing 7‑12.\nLISTING 7- 12: Defining state using a class property\nimport {Component} from 'react';\nclass ColorWheel extends Component {\nstate = {currentColor: '#ff0000'};\ncontinues\n218 ❘ CHAPTER 7 EvEnts\nLISTING 7-12 (continued)\nchangeColor = (e)=>{\nthis.setState({currentColor:e.target.value});\n}\nrender(){\nconst wheelStyle = {\nwidth: \"200px\",\nheight: \"200px\",",
		"a class property, as shown in Listing 7‑12.\nLISTING 7- 12: Defining state using a class property\nimport {Component} from 'react';\nclass ColorWheel extends Component {\nstate = {currentColor: '#ff0000'};\ncontinues\n218 ❘ CHAPTER 7 EvEnts\nLISTING 7-12 (continued)\nchangeColor = (e)=>{\nthis.setState({currentColor:e.target.value});\n}\nrender(){\nconst wheelStyle = {\nwidth: \"200px\",\nheight: \"200px\",\nborderRadius: \"50%\",\nbackgroundColor: this.state.currentColor\n}\nreturn(\n<>\n<div style={wheelStyle}></div>\n<input onChange={this.changeColor} value={this.state.currentColor} />\n</>\n)\n}\n}\nexport default ColorWheel;\nPassing Data to Event Handlers\nEvent handlers often need to receive data from within the render method. Most commonly, event\nhandlers need access to the Event object so they can make use of its properties to get form field val‑\nues, mouse position, and the other properties that you saw in Table 7‑1.",
		"</>\n)\n}\n}\nexport default ColorWheel;\nPassing Data to Event Handlers\nEvent handlers often need to receive data from within the render method. Most commonly, event\nhandlers need access to the Event object so they can make use of its properties to get form field val‑\nues, mouse position, and the other properties that you saw in Table 7‑1.\nIf you specify your event handler using just the name of the event handler function, the good news is\nthat there’s nothing more to do. The Event object is passed to the event handler function automati‑\ncally, as demonstrated in Listing 7‑13.\nLISTING 7- 13: The Event object is passed automatically\nfunction LogInput(){\nconst logChange=(e)=>{\nconsole.dir(e);\n}\nreturn(\n<input onChange={logChange} />\n)\n}\nexport default LogInput;\nIf you use an anonymous arrow function to call your event handler, you do need to specifically pass\nthe Event object into the event handler, as shown in Listing 7‑14.\nSummary ❘ 219",
		"LISTING 7- 13: The Event object is passed automatically\nfunction LogInput(){\nconst logChange=(e)=>{\nconsole.dir(e);\n}\nreturn(\n<input onChange={logChange} />\n)\n}\nexport default LogInput;\nIf you use an anonymous arrow function to call your event handler, you do need to specifically pass\nthe Event object into the event handler, as shown in Listing 7‑14.\nSummary ❘ 219\nLISTING 7- 14: Passing the Event object to the event handler\nfunction LogInput(){\nconst logChange=(e)=>{\nconsole.dir(e);\n}\nreturn(\n<input onChange={(e)=>{logChange(e)}} />\n)\n}\nexport default LogInput;\nSUMMARY\nThrough its use of a familiar and simple interface and standard, idiomatic JavaScript, React allows\nprogrammers to enable interactivity within user interfaces while also gaining the benefits of one‑ way\ndata flow.\nIn this chapter, you learned:\n➤➤ What SyntheticEvents are.\n➤➤ How to log the properties of the SyntheticBaseEvent object.\n➤➤ What event listeners React can respond to.",
		"SUMMARY\nThrough its use of a familiar and simple interface and standard, idiomatic JavaScript, React allows\nprogrammers to enable interactivity within user interfaces while also gaining the benefits of one‑ way\ndata flow.\nIn this chapter, you learned:\n➤➤ What SyntheticEvents are.\n➤➤ How to log the properties of the SyntheticBaseEvent object.\n➤➤ What event listeners React can respond to.\n➤➤ How to write event handlers in both function and class components.\n➤➤ How to bind event handlers in class components.\n➤➤ How to pass data into event handlers.\nIn the next chapter, you’ll learn how to create interactive forms in React and how to listen for and\nrespond to form events.",
		"8\nForms\nHTML form elements are what make it possible for web applications to gather user input.\nReact has built-i n HTML DOM components that create native HTML form elements. The\nbuilt- in React components that create HTML form elements behave somewhat differently from\nnative HTML form elements in some important ways, however. In this chapter, you’ll learn:\n➤➤ How to use form components in React with one- way data flow.\n➤➤ The difference between controlled and uncontrolled form inputs.\n➤➤ How and why to prevent a form’s default action.\n➤➤ How to use each of React’s form elements.\n➤➤ How to retrieve and use data from a form.\nFORMS HAVE STATE\nForm elements in HTML are unique in that they maintain their own internal state. When you\ntype into a text input or check a checkbox or select something from a dropdown menu, it\nchanges the internal state of the element.\nFor example, in an HTML input element, this state is kept in the value attribute and in a",
		"➤➤ How to retrieve and use data from a form.\nFORMS HAVE STATE\nForm elements in HTML are unique in that they maintain their own internal state. When you\ntype into a text input or check a checkbox or select something from a dropdown menu, it\nchanges the internal state of the element.\nFor example, in an HTML input element, this state is kept in the value attribute and in a\ncheckbox element, the state is kept in a Boolean attribute named checked. It’s possible in\nHTML for the internal state of a form element to be set either by a person interacting with the\nform (typing into it or checking boxes, for example) or by changing the value of the attribute\nthat determines the state.\nIf you’ve been paying close attention, you’ll recognize this default behavior of HTML forms as\ntwo- way data flow, which is generally discouraged in React. Ideally, everything that changes in\na React user interface should be the result of changes to the state object. However, with forms,",
		"that determines the state.\nIf you’ve been paying close attention, you’ll recognize this default behavior of HTML forms as\ntwo- way data flow, which is generally discouraged in React. Ideally, everything that changes in\na React user interface should be the result of changes to the state object. However, with forms,\nthere are times when implementing one-w ay data flow is unnecessary and maybe even a little\nridiculous, as I’ll demonstrate. Rather than forcing the programmer to always implement one-\nway data flow for form elements, React has two different ways to work with form inputs that\nyou can choose between depending on the needs of a particular form. React calls these two\ndifferent ways of working with inputs controlled and uncontrolled.\n222 ❘ CHAPTER 8 Forms\nCONTROLLED INPUTS VS. UNCONTROLLED INPUTS\nThe default behavior of an input element is to allow the user to change its value directly. In one- way",
		"you can choose between depending on the needs of a particular form. React calls these two\ndifferent ways of working with inputs controlled and uncontrolled.\n222 ❘ CHAPTER 8 Forms\nCONTROLLED INPUTS VS. UNCONTROLLED INPUTS\nThe default behavior of an input element is to allow the user to change its value directly. In one- way\ndata flow, on the other hand, every interaction with the user interface results in an event which, when\nhandled, updates the state. Changes to state then update the user interface.\nReact calls a form input that can be directly manipulated by the user an uncontrolled input, and one\nthat can only be changed through changes to the state object a controlled input.\nFigure 8-1 illustrates the difference between controlled and uncontrolled inputs.\nFIGURE 8- 1: Controlled and uncontrolled inputs\nTo create an uncontrolled input, omit the value attribute from the JSX code for that input, as shown\nin Listing 8-1.",
		"that can only be changed through changes to the state object a controlled input.\nFigure 8-1 illustrates the difference between controlled and uncontrolled inputs.\nFIGURE 8- 1: Controlled and uncontrolled inputs\nTo create an uncontrolled input, omit the value attribute from the JSX code for that input, as shown\nin Listing 8-1.\nLISTING 8- 1: Omiting the value attribute creates an uncontrolled input\nfunction SignUp(props){\nreturn(\n<form>\n<input type=\"text\" name=\"emailAddress\" />\n<button>Sign up for our newsletter</button>\n</form>\n)\n}\nexport default SignUp;\nFigure 8-2 shows the result of rendering the preceding component and typing into the input. This is\nexactly the behavior you’d expect with an HTML form.\nControlled Inputs vs. Uncontrolled Inputs ❘ 223\nFIGURE 8- 2: Rendering an uncontrolled input\nTo make this form be controlled, add a value attribute, as shown in Listing 8-2.\nLISTING 8- 2: Adding the value attribute creates a controlled input\nfunction SignUp(props){\nreturn(\n<form>",
		"exactly the behavior you’d expect with an HTML form.\nControlled Inputs vs. Uncontrolled Inputs ❘ 223\nFIGURE 8- 2: Rendering an uncontrolled input\nTo make this form be controlled, add a value attribute, as shown in Listing 8-2.\nLISTING 8- 2: Adding the value attribute creates a controlled input\nfunction SignUp(props){\nreturn(\n<form>\n<input value=\"\" type=\"text\" name=\"emailAddress\" />\n<button>Sign up for our newsletter</button>\n</form>\n)\n}\nexport default SignUp;\nSimply adding the value attribute causes React to “control” the input. Now, when you render the\nSignUp component and try to type into it, nothing will happen. It’s impossible to demonstrate noth-\ning happening in a figure, so if you’d like to see this, you can create a component similar to the one in\nListing 8-2 or download the example code from this book’s GitHub repository.\nUpdating a Controlled Input\nUnless your goal is to create an input that can’t be edited, a controlled input must also have an event",
		"ing happening in a figure, so if you’d like to see this, you can create a component similar to the one in\nListing 8-2 or download the example code from this book’s GitHub repository.\nUpdating a Controlled Input\nUnless your goal is to create an input that can’t be edited, a controlled input must also have an event\nlistener attribute and an event handler function. Even though the internal state of the input element\nin Listing 8-2 doesn’t change when you type into it, it still fires a change event with every keystroke.\n224 ❘ CHAPTER 8 Forms\nUsing the onChange event listener, you can detect this event and use the target.value property of\nthe Event object to update the state property, which can then be assigned to the value attribute of\nthe input.\nThe process for controlling a controlled input is the same in function and class components, but the\nJavaScript code you need to write in each differs somewhat.\nControlling an Input in a Function Component",
		"the Event object to update the state property, which can then be assigned to the value attribute of\nthe input.\nThe process for controlling a controlled input is the same in function and class components, but the\nJavaScript code you need to write in each differs somewhat.\nControlling an Input in a Function Component\nListing 8-3 shows a controlled text input that updates using one- way data flow in a function\ncomponent.\nLISTING 8- 3: Updating an input element with one-w ay data flow\nimport {useState} from 'react';\nfunction SignUp(props){\nconst [emailAddress,setEmailAddress] = useState('');\nconst handleChange = (e)=>{\nsetEmailAddress(e.target.value);\n}\nreturn(\n<>\n<form>\n<label>Enter your email address:\n<input value={emailAddress} onChange={handleChange} type=\"text\" />\n</label>\n</form>\n<p>Your email address: {emailAddress}</p>\n</>\n)\n}\nexport default SignUp;\nWhen you run this component in a browser, typing into the input updates the value of the",
		"const handleChange = (e)=>{\nsetEmailAddress(e.target.value);\n}\nreturn(\n<>\n<form>\n<label>Enter your email address:\n<input value={emailAddress} onChange={handleChange} type=\"text\" />\n</label>\n</form>\n<p>Your email address: {emailAddress}</p>\n</>\n)\n}\nexport default SignUp;\nWhen you run this component in a browser, typing into the input updates the value of the\nemailAddress state variable, which is used as the value of the input and is also output in the para-\ngraph below the input. The input behaves like a normal HTML input, but the component also has\naccess to the value of the input.\nControlling an Input in a Class Component\nIn a class component, controlling an input works the same way, but the JavaScript is slightly differ-\nent and a bit more verbose because of the need to write and bind the event handler and to correctly\naddress the state property.\nListing 8-4 shows the same controlled input as Listing 8-3, but written as a class component.",
		"access to the value of the input.\nControlling an Input in a Class Component\nIn a class component, controlling an input works the same way, but the JavaScript is slightly differ-\nent and a bit more verbose because of the need to write and bind the event handler and to correctly\naddress the state property.\nListing 8-4 shows the same controlled input as Listing 8-3, but written as a class component.\nControlled Inputs vs. Uncontrolled Inputs ❘ 225\nLISTING 8- 4: Controlling an input in a class component\nimport {Component} from 'react';\nclass SignUp extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\nemailAddress:''\n}\nthis.handleChange = this.handleChange.bind(this);\n}\nhandleChange(e){\nthis.setState({emailAddress:e.target.value});\n}\nrender(){\nreturn(\n<>\n<form>\n<label>Enter your email address:\n<input value={this.state.emailAddress} onChange={this.handleChange}\ntype=\"text\" />\n</label>\n</form>\n<p>Your email address: {this.state.emailAddress}</p>\n</>\n)\n}\n}\nexport default SignUp;",
		"this.state = {\nemailAddress:''\n}\nthis.handleChange = this.handleChange.bind(this);\n}\nhandleChange(e){\nthis.setState({emailAddress:e.target.value});\n}\nrender(){\nreturn(\n<>\n<form>\n<label>Enter your email address:\n<input value={this.state.emailAddress} onChange={this.handleChange}\ntype=\"text\" />\n</label>\n</form>\n<p>Your email address: {this.state.emailAddress}</p>\n</>\n)\n}\n}\nexport default SignUp;\nThe class component in Listing 8-4 can be written a bit more succinctly by using arrow functions, an\ninline event handler, and by creating state as a class property, as shown in Listing 8-5.\nLISTING 8- 5: Simplifying a controlled input in a class\nimport {Component} from 'react';\nclass SignUp extends Component{\nstate = {emailAddress:''};\nrender(){\nreturn(\n<>\n<form>\n<label>Enter your email address:\n<input value={this.state.emailAddress}\nonChange={(e)=>{this.setState({emailAddress:e.target.value})}}\ntype=\"text\" />\ncontinues\n226 ❘ CHAPTER 8 Forms\nLISTING 8-5 (continued)\n</label>\n</form>",
		"LISTING 8- 5: Simplifying a controlled input in a class\nimport {Component} from 'react';\nclass SignUp extends Component{\nstate = {emailAddress:''};\nrender(){\nreturn(\n<>\n<form>\n<label>Enter your email address:\n<input value={this.state.emailAddress}\nonChange={(e)=>{this.setState({emailAddress:e.target.value})}}\ntype=\"text\" />\ncontinues\n226 ❘ CHAPTER 8 Forms\nLISTING 8-5 (continued)\n</label>\n</form>\n<p>Your email address: {this.state.emailAddress}</p>\n</>\n)\n}\n}\nexport default SignUp;\nLIFTING UP INPUT STATE\nMost of the time, when you have a form in a user interface, input into the form should affect some\nother part of the user interface. For example, words typed into a search form are used to perform a\nsearch, and then the searched-f or words and the search results are presented in some sort of results\ncomponent, as shown in Figure 8-3.\nFIGURE 8- 3: Form input often affects other components\nLifting Up Input State ❘ 227",
		"other part of the user interface. For example, words typed into a search form are used to perform a\nsearch, and then the searched-f or words and the search results are presented in some sort of results\ncomponent, as shown in Figure 8-3.\nFIGURE 8- 3: Form input often affects other components\nLifting Up Input State ❘ 227\nBecause the search term entered into the search form in Figure 8-3 needs to be used by other compo-\nnents, the state variable that the search form updates should be lifted up to a common ancestor of the\nsearch form and search results components.\nListings 8-6, 8- 7, and 8-8 show three components that might make up a very basic version of the\nsearch interface from Figure 8-3. Notice that the setSearchTerm function is passed down to the\nSearchInput component and the searchTerm variable is passed down to both the SearchInput and\nSearchResults components.\nLISTING 8- 6: The SearchBox component\nimport {useState} from 'react';\nimport SearchInput from './SearchInput';",
		"search interface from Figure 8-3. Notice that the setSearchTerm function is passed down to the\nSearchInput component and the searchTerm variable is passed down to both the SearchInput and\nSearchResults components.\nLISTING 8- 6: The SearchBox component\nimport {useState} from 'react';\nimport SearchInput from './SearchInput';\nimport SearchResults from './SearchResults';\nfunction SearchBox(){\nconst [searchTerm,setSearchTerm] = useState('');\nreturn(\n<>\n<SearchInput searchTerm = {searchTerm} setSearchTerm = {setSearchTerm} />\n<SearchResults searchTerm = {searchTerm}/>\n</>\n);\n}\nexport default SearchBox;\nLISTING 8- 7: The SearchInput component\nfunction SearchInput(props){\nconst handleChange = (e)=>{\nprops.setSearchTerm(e.target.value);\n}\nreturn(\n<label>Enter your search term:\n<input type=\"text\" value={props.searchTerm} onChange={handleChange} />\n</label>\n);\n}\nexport default SearchInput;\nLISTING 8- 8: The SearchResults component\nfunction SearchResults(props){\nreturn(",
		");\n}\nexport default SearchBox;\nLISTING 8- 7: The SearchInput component\nfunction SearchInput(props){\nconst handleChange = (e)=>{\nprops.setSearchTerm(e.target.value);\n}\nreturn(\n<label>Enter your search term:\n<input type=\"text\" value={props.searchTerm} onChange={handleChange} />\n</label>\n);\n}\nexport default SearchInput;\nLISTING 8- 8: The SearchResults component\nfunction SearchResults(props){\nreturn(\n<p>You're searching for: {props.searchTerm}</p>\ncontinues\n228 ❘ CHAPTER 8 Forms\nLISTING 8-8 (continued)\n);\n}\nexport default SearchResults;\nAs you saw in Chapter 6, lifting state up minimizes the number of components that need to be state-\nful. Having a single stateful component eliminates duplication of data processing and provides the\napplication with a single source of truth. In other words, the behavior of the subcomponents can be\nknown and tested based on how the state changes in the stateful component.\nUSING UNCONTROLLED INPUTS",
		"As you saw in Chapter 6, lifting state up minimizes the number of components that need to be state-\nful. Having a single stateful component eliminates duplication of data processing and provides the\napplication with a single source of truth. In other words, the behavior of the subcomponents can be\nknown and tested based on how the state changes in the stateful component.\nUSING UNCONTROLLED INPUTS\nUsing controlled inputs ensures that your user interface strictly adheres to the pattern of one-w ay\ndata binding, and it enables you to easily work with the current values of your input fields. However,\nit also creates a lot of overhead work that may be unnecessary.\nFor example, a “Contact Us” form within a user interface doesn’t need to store the data entered into\nit or do anything with the data as it’s being entered. Essentially, such a form isn’t really part of the\nlarger application at all, and there’s maybe no reason for React to track and run an event handler",
		"it also creates a lot of overhead work that may be unnecessary.\nFor example, a “Contact Us” form within a user interface doesn’t need to store the data entered into\nit or do anything with the data as it’s being entered. Essentially, such a form isn’t really part of the\nlarger application at all, and there’s maybe no reason for React to track and run an event handler\nfunction for every keystroke that someone enters into a textarea input. Binding each input of a large\nform can be tedious and the additional processing that it takes to listen for and respond to a large\nnumber of form inputs can create performance issues.\nIn cases where you don’t need to track the user’s input as they’re typing and you don’t need to store\nthe input in state, it may be a better choice to use uncontrolled inputs and simply attach an event\nlistener to the form itself to run a function when the form is submitted.\nListing 8-9 shows a comment form, such as you might see on a blog, which uses an uncontrolled",
		"In cases where you don’t need to track the user’s input as they’re typing and you don’t need to store\nthe input in state, it may be a better choice to use uncontrolled inputs and simply attach an event\nlistener to the form itself to run a function when the form is submitted.\nListing 8-9 shows a comment form, such as you might see on a blog, which uses an uncontrolled\ninput. When the user submits the form, an event handler function runs that retrieves the data from\nthe uncontrolled input and adds it to the state.\nLISTING 8- 9: A blog comment interface using an uncontrolled input\nimport {useState,useRef} from 'react';\nfunction BlogComment(props){\nconst [comments,setComments] = useState([]);\nconst textAreaRef = useRef(null);\nconst recordComment = (e)=>{\ne.preventDefault();\nsetComments([...comments,textAreaRef.current.value]);\n}\nconst commentList = comments.map((comment,index)=>{\nreturn (<p key={index}>{comment}</p>);\n})\nreturn(\n<>\nUsing Different Form Elements ❘ 229",
		"import {useState,useRef} from 'react';\nfunction BlogComment(props){\nconst [comments,setComments] = useState([]);\nconst textAreaRef = useRef(null);\nconst recordComment = (e)=>{\ne.preventDefault();\nsetComments([...comments,textAreaRef.current.value]);\n}\nconst commentList = comments.map((comment,index)=>{\nreturn (<p key={index}>{comment}</p>);\n})\nreturn(\n<>\nUsing Different Form Elements ❘ 229\n<form onSubmit={recordComment}>\n<p>Enter your comment:</p>\n<textarea ref={textAreaRef}></textarea><br />\n<button>Submit Comment</button>\n<p>All Comments:</p>\n{commentList}\n</form>\n</>\n);\n}\nexport default BlogComment;\nTo get values from uncontrolled inputs, you can use a technique called a ref. The ref creates a refer-\nence to the underlying DOM node, which allows React to access its properties directly. You’ll learn\nmore about refs and how and when to use them in Chapter 9.\nUSING DIFFERENT FORM ELEMENTS\nHTML input elements are the most commonly used types of interactive elements. By changing the",
		"To get values from uncontrolled inputs, you can use a technique called a ref. The ref creates a refer-\nence to the underlying DOM node, which allows React to access its properties directly. You’ll learn\nmore about refs and how and when to use them in Chapter 9.\nUSING DIFFERENT FORM ELEMENTS\nHTML input elements are the most commonly used types of interactive elements. By changing the\ntype attribute of the input element, you can create inputs for a large and growing number of data\ntypes, including:\n➤➤ button\n➤➤ checkbox\n➤➤ color\n➤➤ date\n➤➤ datetime- local\n➤➤ email\n➤➤ file\n➤➤ hidden\n➤➤ image\n➤➤ month\n➤➤ number\n➤➤ password\n➤➤ radio\n➤➤ range\n➤➤ reset\n➤➤ search\n➤➤ submit\n➤➤ tel\n230 ❘ CHAPTER 8 Forms\n➤➤ text\n➤➤ time\n➤➤ url\n➤➤ week\nThe different input types may look different or have different validation that they perform on user\ninput. For example, the number input type will only allow numbers to be entered, the color input",
		"➤➤ date\n➤➤ datetime- local\n➤➤ email\n➤➤ file\n➤➤ hidden\n➤➤ image\n➤➤ month\n➤➤ number\n➤➤ password\n➤➤ radio\n➤➤ range\n➤➤ reset\n➤➤ search\n➤➤ submit\n➤➤ tel\n230 ❘ CHAPTER 8 Forms\n➤➤ text\n➤➤ time\n➤➤ url\n➤➤ week\nThe different input types may look different or have different validation that they perform on user\ninput. For example, the number input type will only allow numbers to be entered, the color input\ntype will display a color picker (in browsers that support it), and the hidden input type doesn’t dis-\nplay anything in the browser window.\nControlling the Input Element\nWith the exception of the input types that create buttons, and the special case of the file input type,\nthe way to get the value of a controlled input element in React is by using the onChange attribute.\nThe button inputs (submit, reset, and button) use the onClick attribute. The button element,\nwhich does the same thing as an input with a type of button, also uses the onClick attribute.",
		"With the exception of the input types that create buttons, and the special case of the file input type,\nthe way to get the value of a controlled input element in React is by using the onChange attribute.\nThe button inputs (submit, reset, and button) use the onClick attribute. The button element,\nwhich does the same thing as an input with a type of button, also uses the onClick attribute.\nThe file input, which allows you to choose a file from your computer to upload to the browser, is a\nread- only input. In React, an input with the type of file is always uncontrolled.\nControlling a textarea\nIn HTML, a textarea element’s value is its children, as shown in Listing 8-10.\nLISTING 8- 10: An HTML textarea’s value is its children\n<textarea name=\"terms- of- use\">\nMake sure to read all of these terms of use. By reading this book, you agree\nto learn React and to never try to mutate a prop or forget to bind an event\nhandler in a class component. Furthermore, although it is not required, you",
		"In HTML, a textarea element’s value is its children, as shown in Listing 8-10.\nLISTING 8- 10: An HTML textarea’s value is its children\n<textarea name=\"terms- of- use\">\nMake sure to read all of these terms of use. By reading this book, you agree\nto learn React and to never try to mutate a prop or forget to bind an event\nhandler in a class component. Furthermore, although it is not required, you\nagree to consider writing a review of this book and to tell your friends how\ngreat this book is.\n</textarea>\nIn React, a textarea is written more like an input element: as an empty element (meaning it doesn’t\nhave an end tag or content) with a value attribute. You can use the onChange event listener to handle\ninput into a textarea in React, as shown in Listing 8-11.\nLISTING 8- 11: Using a textarea in React\nfunction TermsOfUse(props){\nreturn(\n<textarea value={props.terms} onChange={props.updateTerms} />\n);\n}\nexport default TermsOfUse;\nPreventing Default Actions ❘ 231\nControlling a Select Element",
		"have an end tag or content) with a value attribute. You can use the onChange event listener to handle\ninput into a textarea in React, as shown in Listing 8-11.\nLISTING 8- 11: Using a textarea in React\nfunction TermsOfUse(props){\nreturn(\n<textarea value={props.terms} onChange={props.updateTerms} />\n);\n}\nexport default TermsOfUse;\nPreventing Default Actions ❘ 231\nControlling a Select Element\nA select element in HTML creates a dropdown list, with any number of option element chil-\ndren forming the items in the dropdown list. In HTML, each option element has a Boolean attrib-\nute named selected, which determines the current value of the select element, as shown in\nListing 8-12.\nLISTING 8- 12: A select element in HTML\n<select name=\"pizza- type\">\n<option value=\"thin\">Thin Crust</option>\n<option value=\"thick\">Thick Crust</option>\n<option value=\"deep\">Deep Dish</option>\n<option value=\"detroit\" selected>Detroit-s tyle</option>\n<option value=\"chicago\">Chicago-s tyle</option>\n</select>",
		"Listing 8-12.\nLISTING 8- 12: A select element in HTML\n<select name=\"pizza- type\">\n<option value=\"thin\">Thin Crust</option>\n<option value=\"thick\">Thick Crust</option>\n<option value=\"deep\">Deep Dish</option>\n<option value=\"detroit\" selected>Detroit-s tyle</option>\n<option value=\"chicago\">Chicago-s tyle</option>\n</select>\nIn React, the select element has a value attribute that determines which option is currently\nselected, and the onChange attribute on the select input can be used to detect and handle changes to\nthe currently selected option, as shown in Listing 8-13.\nLISTING 8- 13: Using a select input in React\nfunction SizeSelect(props){\nreturn(\n<select name=\"size\" value={props.size} onChange={props.changeSize}>\n<option value=\"xs\">Extra Small</option>\n<option value=\"sm\">Small</option>\n<option vlue=\"md\">Medium</option>\n<option value=\"lg\">Large</option>\n<option value=\"xl\">Extra Large</option>\n</select>\n);\n}\nexport default SizeSelect;\nPREVENTING DEFAULT ACTIONS",
		"LISTING 8- 13: Using a select input in React\nfunction SizeSelect(props){\nreturn(\n<select name=\"size\" value={props.size} onChange={props.changeSize}>\n<option value=\"xs\">Extra Small</option>\n<option value=\"sm\">Small</option>\n<option vlue=\"md\">Medium</option>\n<option value=\"lg\">Large</option>\n<option value=\"xl\">Extra Large</option>\n</select>\n);\n}\nexport default SizeSelect;\nPREVENTING DEFAULT ACTIONS\nWhen you submit a form in a browser window, the default action that the browser will take is to\nreload the current page, passing the values from the form as a querystring appended to the URL.\nYou can change the default action of the form element by using the action and method attributes\nof the form element. The action attribute changes the URL that the form will submit to, and the\nmethod attribute changes the HTTP method used to submit the form (either using HTTP GET or\nHTTP POST).\n232 ❘ CHAPTER 8 Forms",
		"You can change the default action of the form element by using the action and method attributes\nof the form element. The action attribute changes the URL that the form will submit to, and the\nmethod attribute changes the HTTP method used to submit the form (either using HTTP GET or\nHTTP POST).\n232 ❘ CHAPTER 8 Forms\nIn user interfaces written using JavaScript, you don’t want the form element to submit data to a URL\nat all. Instead, the form data should be handled by JavaScript. The reason for this is that default\naction of a form reloads the form or loads a different URL, which has the effect of reloading the\nunderlying JavaScript library and erasing the state of the user interface.\nReact doesn’t have its own method for preventing default actions. Instead, it just uses the prevent-\nDefault method of the Event object. Any time you write an event handler to respond to a submit\nevent, you must include a call to preventDefault, as shown in Listing 8-14.\nLISTING 8- 14: Using preventDefault",
		"underlying JavaScript library and erasing the state of the user interface.\nReact doesn’t have its own method for preventing default actions. Instead, it just uses the prevent-\nDefault method of the Event object. Any time you write an event handler to respond to a submit\nevent, you must include a call to preventDefault, as shown in Listing 8-14.\nLISTING 8- 14: Using preventDefault\nfunction SignUpForm(props){\nconst handleSubmit = (e)=>{\ne.preventDefault();\nprops.commitFormData();\n}\nreturn(\n<form onSubmit={handleSubmit}>\n<input type=\"email\" value={props.email} onChange={props.setEmail} />\n<button>Sign Up!</button>\n</form>\n)\n}\nexport default SignUpForm;\nSUMMARY\nBecause of one- way data flow, using forms and inputs in React is somewhat different from using\nthem in native HTML or in other frameworks and libraries. Controlled inputs give your application\ncomplete access to user input and maintain the fundamental React pattern of data flowing down and\nevents flowing up.",
		"<button>Sign Up!</button>\n</form>\n)\n}\nexport default SignUpForm;\nSUMMARY\nBecause of one- way data flow, using forms and inputs in React is somewhat different from using\nthem in native HTML or in other frameworks and libraries. Controlled inputs give your application\ncomplete access to user input and maintain the fundamental React pattern of data flowing down and\nevents flowing up.\nHowever, there may be times when it’s better to give up control. For this, React provides refs and the\nability to have uncontrolled inputs.\nIn this chapter, you learned:\n➤➤ The difference between controlled and uncontrolled inputs.\n➤➤ How to use events to get data from a controlled input.\n➤➤ How to use refs to get data from an uncontrolled input.\n➤➤ How to use different types of input elements.\n➤➤ How to prevent a form’s default action.\nIn the next chapter, you’ll learn about refs, which, when used wisely, can do much more than just\ngetting data from uncontrolled inputs.\n9\nRefs",
		"➤➤ How to use events to get data from a controlled input.\n➤➤ How to use refs to get data from an uncontrolled input.\n➤➤ How to use different types of input elements.\n➤➤ How to prevent a form’s default action.\nIn the next chapter, you’ll learn about refs, which, when used wisely, can do much more than just\ngetting data from uncontrolled inputs.\n9\nRefs\nRefs are one of the most- often debated and controversial topics in React. Hundreds of blog\nposts and articles on the web will caution you to avoid refs. The official documentation for\nReact even says (several times, in fact) that you should avoid using them, except in particular\nsituations.\nKnowing exactly when it’s okay to use refs and what the problem is with using them is one of\nthe things you’ll pick up with more experience, but my aim in this chapter is to give you a head\nstart on understanding why refs are such a hot- button issue, and some practical advice on how\nto use them correctly.\nIn this chapter, you’ll learn:",
		"situations.\nKnowing exactly when it’s okay to use refs and what the problem is with using them is one of\nthe things you’ll pick up with more experience, but my aim in this chapter is to give you a head\nstart on understanding why refs are such a hot- button issue, and some practical advice on how\nto use them correctly.\nIn this chapter, you’ll learn:\n➤➤ How to use refs in class components.\n➤➤ How to use refs in function components.\n➤➤ When you should use refs.\n➤➤ When you shouldn’t use refs.\n➤➤ How to maintain the correct focus in a form.\nWHAT REFS ARE\nNothing is perfect, and that includes React. There are rare, but unavoidable, times when one-\nway data flow and the declarative way of only modifying children via props break down. In\nthese cases, which I’ll demonstrate in more detail and with plenty of examples in this chapter,\na React developer needs to be able to imperatively get into a child component or a DOM node",
		"WHAT REFS ARE\nNothing is perfect, and that includes React. There are rare, but unavoidable, times when one-\nway data flow and the declarative way of only modifying children via props break down. In\nthese cases, which I’ll demonstrate in more detail and with plenty of examples in this chapter,\na React developer needs to be able to imperatively get into a child component or a DOM node\nto make changes or access some property directly. For these cases, React provides an “escape\nhatch” called refs.\nA ref is reference to a child component that allows you to modify a child component or DOM\nnode from the parent component, rather than by using the standard method of modifying chil-\ndren only by passing props into them.\n234 ❘ CHAPTER 9 Refs\nHOW TO CREATE A REF IN A CLASS COMPONENT\nIn a class component, refs are created using React.createRef. Once you have a ref, you can assign it\nto a child component by passing it as the value of the ref attribute. Listing 9-1 shows how to create a",
		"node from the parent component, rather than by using the standard method of modifying chil-\ndren only by passing props into them.\n234 ❘ CHAPTER 9 Refs\nHOW TO CREATE A REF IN A CLASS COMPONENT\nIn a class component, refs are created using React.createRef. Once you have a ref, you can assign it\nto a child component by passing it as the value of the ref attribute. Listing 9-1 shows how to create a\nref to a textarea element from a component called TextReader.\nLISTING 9- 1: Creating a ref in a class component\nimport React,{Component} from 'react';\nclass TextReader extends Component {\nconstructor(props) {\nsuper(props);\nthis.textView = React.createRef();\n}\nrender() {\nreturn (\n<textarea ref={this.textView} value={this.props.bookText} />\n);\n}\n}\nHOW TO CREATE A REF IN A FUNCTION COMPONENT\nIn a function component, you can use the useRef hook to create a ref, as shown in Listing 9-2.\nLISTING 9- 2: Creating a ref with useRef()\nimport {useRef} from 'react';\nfunction TextReader(props) {",
		"super(props);\nthis.textView = React.createRef();\n}\nrender() {\nreturn (\n<textarea ref={this.textView} value={this.props.bookText} />\n);\n}\n}\nHOW TO CREATE A REF IN A FUNCTION COMPONENT\nIn a function component, you can use the useRef hook to create a ref, as shown in Listing 9-2.\nLISTING 9- 2: Creating a ref with useRef()\nimport {useRef} from 'react';\nfunction TextReader(props) {\nconst textView = useRef(null);\nreturn (\n<textarea ref={textView} value={props.bookText} />\n);\n}\nexport default TextReader;\nUSING REFS\nOnce you have a ref and you’ve assigned it to a child element, you can access the properties of that\nchild element by using a property of the ref called current. When you create a ref to a DOM ele-\nment, current contains the properties of the DOM node (meaning what’s rendered in the browser).\nUsing Refs ❘ 235\nWhen you create a ref to a custom React element, current receives the mounted instance of the\ncomponent.",
		"child element by using a property of the ref called current. When you create a ref to a DOM ele-\nment, current contains the properties of the DOM node (meaning what’s rendered in the browser).\nUsing Refs ❘ 235\nWhen you create a ref to a custom React element, current receives the mounted instance of the\ncomponent.\nRefs can only be passed to class components and DOM elements. Although they can be created inside\nfunction components, refs can’t be passed to function components. The reason why you can’t create\na ref to a function component is that functions don’t have an instance.\nIf you need to pass a ref to a component that’s currently a function component, the easiest way to do\nit is by converting the function component to a class component.\nNOTE Remember: Function components and class components can co- exist\nwithin the same React UI. There’s no need to choose one over the other. Use\nwhat you’re comfortable with or what works best for a component.",
		"If you need to pass a ref to a component that’s currently a function component, the easiest way to do\nit is by converting the function component to a class component.\nNOTE Remember: Function components and class components can co- exist\nwithin the same React UI. There’s no need to choose one over the other. Use\nwhat you’re comfortable with or what works best for a component.\nWith access to the properties and methods of the child, the parent component can pretty much\ndo whatever it wants with it. You could think of creating a ref as like being able to implant a chip\ninto your child that will allow you to remotely control them. But, no one would actually do that\nor want to.\nListing 9-3 shows how to call the DOM focus method on a textarea from its parent component.\nThe reason to do this is to make sure that the textarea containing the text will have focus when it\nmounts so that the user can scroll through it using arrow keys without having to click on it first.",
		"or want to.\nListing 9-3 shows how to call the DOM focus method on a textarea from its parent component.\nThe reason to do this is to make sure that the textarea containing the text will have focus when it\nmounts so that the user can scroll through it using arrow keys without having to click on it first.\nLISTING 9- 3: Calling a DOM method on a child using a ref\nimport React,{Component} from 'react';\nclass TextReader extends Component {\nconstructor(props) {\nsuper(props);\nthis.textView = React.createRef();\n}\ncomponentDidMount(){\nthis.textView.current.focus();\n}\nrender(){\nreturn (\n<textarea style={{width:'380px',height:'400px'}}\nref={this.textView}>{this.props.bookText}</textarea>\n);\n}\n}\nexport default TextReader;\n236 ❘ CHAPTER 9 Refs\nFigure 9-1 shows what the TextReader component looks like rendered in a browser. Notice the high-\nlight around the text area, which indicates that it has focus.\nFIGURE 9- 1: The TextReader component\nCREATING A CALLBACK REF",
		"render(){\nreturn (\n<textarea style={{width:'380px',height:'400px'}}\nref={this.textView}>{this.props.bookText}</textarea>\n);\n}\n}\nexport default TextReader;\n236 ❘ CHAPTER 9 Refs\nFigure 9-1 shows what the TextReader component looks like rendered in a browser. Notice the high-\nlight around the text area, which indicates that it has focus.\nFIGURE 9- 1: The TextReader component\nCREATING A CALLBACK REF\nA third way to create a ref is with a callback ref. A callback ref doesn’t use the createRef function or\nthe useRef hook. Instead, it’s a function that you pass into the ref attribute, which receives the React\ncomponent instance or the HTML DOM element as its argument.\nUsing a ref callback rather than createRef or useRef is useful when the child you’re attaching the\nref to is dynamic. The function you pass into the ref attribute will be called (with the instance or ele-\nment passed into it) when the component mounts, and then it will be called again with null when the\ncomponent unmounts.",
		"component instance or the HTML DOM element as its argument.\nUsing a ref callback rather than createRef or useRef is useful when the child you’re attaching the\nref to is dynamic. The function you pass into the ref attribute will be called (with the instance or ele-\nment passed into it) when the component mounts, and then it will be called again with null when the\ncomponent unmounts.\nListing 9-4 shows an example of creating a callback ref. Notice the use of the condition in the focus-\nTextView method, which allows you to avoid calling the focus method on the ref if the child element\nis unmounted.\nCreating a Callback Ref ❘ 237\nLISTING 9- 4: Creating a callback ref\nimport {Component} from 'react';\nclass TextReaderCallback extends Component {\nconstructor(props) {\nsuper(props);\nthis.textView = null;\nthis.setTextViewRef = element => {\nthis.textView = element;\n};\nthis.focusTextView = () => {\nif (this.textView) this.textView.focus();\n};\n}\ncomponentDidMount(){\nthis.focusTextView();\n}\nrender(){",
		"Creating a Callback Ref ❘ 237\nLISTING 9- 4: Creating a callback ref\nimport {Component} from 'react';\nclass TextReaderCallback extends Component {\nconstructor(props) {\nsuper(props);\nthis.textView = null;\nthis.setTextViewRef = element => {\nthis.textView = element;\n};\nthis.focusTextView = () => {\nif (this.textView) this.textView.focus();\n};\n}\ncomponentDidMount(){\nthis.focusTextView();\n}\nrender(){\nreturn (\n<textarea style={{width:'380px',height:'400px'}}\nref={this.setTextViewRef}\nvalue={this.props.bookText} />\n);\n}\n}\nexport default TextReaderCallback;\nRef callbacks are often passed to child components as inline functions, as shown in Listing 9-5.\nLISTING 9- 5: Passing a ref callback as an inline function\nimport {Component} from 'react';\nclass TextReaderCallback extends Component {\nconstructor(props) {\nsuper(props);\nthis.textView = null;\nthis.focusTextView = () => {\nif (this.textView) this.textView.focus();\n};\n}\ncomponentDidMount(){\ncontinues\n238 ❘ CHAPTER 9 Refs\nLISTING 9-5 (continued)",
		"LISTING 9- 5: Passing a ref callback as an inline function\nimport {Component} from 'react';\nclass TextReaderCallback extends Component {\nconstructor(props) {\nsuper(props);\nthis.textView = null;\nthis.focusTextView = () => {\nif (this.textView) this.textView.focus();\n};\n}\ncomponentDidMount(){\ncontinues\n238 ❘ CHAPTER 9 Refs\nLISTING 9-5 (continued)\nthis.focusTextView();\n}\nrender(){\nreturn (\n<textarea style={{width:'380px',height:'400px'}}\nref={(e)=>this.textView = e}\nvalue={this.props.bookText} />\n);\n}\n}\nexport default TextReaderCallback;\nOne minor caveat to using the inline ref callback syntax is that it will cause the ref callback to be\nexecuted twice when the component first mounts—o nce with null, and then again with the element\npassed into it. This is not a major concern, but if you want to avoid this extra execution of the call-\nback you can simply define the callback in the constructor.\nWHEN TO USE REFS",
		"One minor caveat to using the inline ref callback syntax is that it will cause the ref callback to be\nexecuted twice when the component first mounts—o nce with null, and then again with the element\npassed into it. This is not a major concern, but if you want to avoid this extra execution of the call-\nback you can simply define the callback in the constructor.\nWHEN TO USE REFS\nBecause they allow you to directly manipulate React components and DOM elements from parent\ncomponents, refs are a powerful tool. Certain important tasks in a web application are perfect jobs\nfor refs. These include:\n➤➤ Managing focus\n➤➤ Automatically selecting text within a child element\n➤➤ Controlling media playback\n➤➤ Setting scroll position on a child element\n➤➤ Triggering imperative animations\n➤➤ Integrating with third- party libraries (such as jQuery, for example)\nAlthough you may not need to perform any of these tasks very often, when you do need them, they’re",
		"for refs. These include:\n➤➤ Managing focus\n➤➤ Automatically selecting text within a child element\n➤➤ Controlling media playback\n➤➤ Setting scroll position on a child element\n➤➤ Triggering imperative animations\n➤➤ Integrating with third- party libraries (such as jQuery, for example)\nAlthough you may not need to perform any of these tasks very often, when you do need them, they’re\nimpossible or nearly impossible to do simply by passing props.\nWHEN NOT TO USE REFS\nWith great power comes great responsibility. In theory, you could use refs to bypass all the features of\nReact and just change the contents of elements, call methods of components, change element styles,\nand anything else you need to do in your application in an imperative way. But, this would defeat the\npurpose of using React.\nExamples ❘ 239\nAs a rule, if there’s a way to do something by passing props to children (what we call the “React",
		"React and just change the contents of elements, call methods of components, change element styles,\nand anything else you need to do in your application in an imperative way. But, this would defeat the\npurpose of using React.\nExamples ❘ 239\nAs a rule, if there’s a way to do something by passing props to children (what we call the “React\nWay”) that’s what you should do. Breaking out of the fundamental pattern that makes React work so\nwell will make your app more complicated, harder to debug, and likely less performant.\nEXAMPLES\nFinding working examples of some of the use cases for refs on the web can be difficult. So, for the\nrest of this chapter, I’ll provide some code that you can study and try out to better understand the\nappropriate uses for refs.\nManaging Focus\nProperly managing focus, especially in a web form, is an important part of web user interface usabil-\nity and accessibility.\nThe most basic use case for managing focus is shown in Listing 9-3. The same technique is also com-",
		"rest of this chapter, I’ll provide some code that you can study and try out to better understand the\nappropriate uses for refs.\nManaging Focus\nProperly managing focus, especially in a web form, is an important part of web user interface usabil-\nity and accessibility.\nThe most basic use case for managing focus is shown in Listing 9-3. The same technique is also com-\nmonly used to automatically place the cursor into the first field in a login form when it loads.\nAnother common use for managing focus is to return a user to the same field they were editing before\na modal window was opened or after they save their input into a form and return to it at a later time.\nAutomatically Selecting Text\nSelecting text in a child element can be useful for making components that display text and provide\na button for copying the text. This is often done in applications that generate some kind of a code or\nkey. Listing 9-6 shows an example of a text input with a button for copying the contents.",
		"Automatically Selecting Text\nSelecting text in a child element can be useful for making components that display text and provide\na button for copying the text. This is often done in applications that generate some kind of a code or\nkey. Listing 9-6 shows an example of a text input with a button for copying the contents.\nThis example also demonstrates how to display a temporary notification in a React component.\nAfter you copy the code, the component updates a state variable called message to display a success\nmessage. This state change triggers the componentDidUpdate lifecycle hook, which uses JavaScript’s\nsetTimeout method to wait three seconds and then set message back to an empty string, thus\nremoving the success message.\nLISTING 9- 6: Selecting and copying text with a ref\nimport React,{Component} from 'react';\nclass CodeDisplay extends Component {\nconstructor(props) {\nsuper(props);\nthis.state={message:''};\nthis.codeField = React.createRef();",
		"setTimeout method to wait three seconds and then set message back to an empty string, thus\nremoving the success message.\nLISTING 9- 6: Selecting and copying text with a ref\nimport React,{Component} from 'react';\nclass CodeDisplay extends Component {\nconstructor(props) {\nsuper(props);\nthis.state={message:''};\nthis.codeField = React.createRef();\nthis.copyCode = this.copyCode.bind(this);\n}\ncontinues\n240 ❘ CHAPTER 9 Refs\nLISTING 9-6 (continued)\ncomponentDidUpdate(){\nsetTimeout(() => this.setState({message:''}), 3000);\n}\ncopyCode(){\nthis.codeField.current.select();\ndocument.execCommand('copy');\nthis.setState({message:'code copied!'});\n}\nrender(){\nreturn (\n<>\n<input value={this.props.yourCode}\nref={this.codeField} /> {this.state.message}<br />\n<button onClick={this.copyCode}>Copy your Code</button>\n</>\n);\n}\n}\nexport default CodeDisplay;\nFigure 9-2 shows the value of the text input selected and the success message that displays right after\nyou click the button.",
		"this.setState({message:'code copied!'});\n}\nrender(){\nreturn (\n<>\n<input value={this.props.yourCode}\nref={this.codeField} /> {this.state.message}<br />\n<button onClick={this.copyCode}>Copy your Code</button>\n</>\n);\n}\n}\nexport default CodeDisplay;\nFigure 9-2 shows the value of the text input selected and the success message that displays right after\nyou click the button.\nFIGURE 9- 2: Selecting text and displaying a temporary message\nExamples ❘ 241\nControlling Media Playback\nHTML’s audio and video elements can be controlled using several DOM methods, including\nplay, pause, and load. You can attach refs to media elements to use these methods, as shown in\nListing 9-7.\nLISTING 9- 7: A React audio player\nimport React,{Component} from 'react';\nclass AudioPlayer extends Component {\nconstructor(props) {\nsuper(props);\nthis.mediaFile = React.createRef();\nthis.playToggle = this.playToggle.bind(this);\n}\nplayToggle(){\nif (this.mediaFile.current.paused){\nthis.mediaFile.current.play();\n} else {",
		"Listing 9-7.\nLISTING 9- 7: A React audio player\nimport React,{Component} from 'react';\nclass AudioPlayer extends Component {\nconstructor(props) {\nsuper(props);\nthis.mediaFile = React.createRef();\nthis.playToggle = this.playToggle.bind(this);\n}\nplayToggle(){\nif (this.mediaFile.current.paused){\nthis.mediaFile.current.play();\n} else {\nthis.mediaFile.current.pause();\n}\n}\nrender(){\nreturn (\n<>\n<audio ref={this.mediaFile}>\n<source src=\"/music/thebestsongever.mp3\" type=\"audio/mpeg\" />\n</audio><br />\n<button onClick={this.playToggle}>Play/Pause</button>\n</>\n);\n}\n}\nexport default AudioPlayer;\nSetting Scroll Position\nThe DOM window.scrollTo method takes coordinates in a document (specified as x and y pixel\nvalues) and scrolls the window to those coordinates. One way to use this is to find out the position\nof a certain element in a document (using the offsetTop property) and then scroll the window to\nthat element.",
		"</>\n);\n}\n}\nexport default AudioPlayer;\nSetting Scroll Position\nThe DOM window.scrollTo method takes coordinates in a document (specified as x and y pixel\nvalues) and scrolls the window to those coordinates. One way to use this is to find out the position\nof a certain element in a document (using the offsetTop property) and then scroll the window to\nthat element.\nThis can be useful for navigating long documents, or for remembering a user’s position\nbetween sessions.\n242 ❘ CHAPTER 9 Refs\nListing 9-8 demonstrates how to use a ref to get the position of an element and then scroll to that ele-\nment. Previous examples have used class components, so I’ll use a function component for this one.\nLISTING 9- 8: Scrolling to an element with a ref\nimport {useRef} from 'react';\nconst ScrollToElement = (ref)=>{window.scrollTo(0,ref.current.offsetTop)};\nfunction ScrollToDemo(){\nconst bookStart = useRef();\nreturn (\n<>\n<h1 ref={bookStart}>CHAPTER 1. Loomings.</h1>",
		"ment. Previous examples have used class components, so I’ll use a function component for this one.\nLISTING 9- 8: Scrolling to an element with a ref\nimport {useRef} from 'react';\nconst ScrollToElement = (ref)=>{window.scrollTo(0,ref.current.offsetTop)};\nfunction ScrollToDemo(){\nconst bookStart = useRef();\nreturn (\n<>\n<h1 ref={bookStart}>CHAPTER 1. Loomings.</h1>\n<div style={{width:'300px'}}><p>...</p></div>\n<button onClick={() => ScrollToElement(bookStart)}>\nScroll to the Beginning\n</button>\n</>\n);\n}\nexport default ScrollToDemo;\nSUMMARY\nIn this chapter, you learned about React’s escape hatch, refs. Refs are an important and useful part of\nReact. Used incorrectly, however, they’re antithetical to the goals and purpose of React and can have\na detrimental effect on your React UI. Fortunately, the use cases for refs are relatively few, and I’ve\ncovered most of them with examples in this chapter. In this chapter, you learned:\n➤➤ What refs are and why they exist.",
		"React. Used incorrectly, however, they’re antithetical to the goals and purpose of React and can have\na detrimental effect on your React UI. Fortunately, the use cases for refs are relatively few, and I’ve\ncovered most of them with examples in this chapter. In this chapter, you learned:\n➤➤ What refs are and why they exist.\n➤➤ How to create refs in both function and class components.\n➤➤ How to use refs to access component and DOM elements from a parent.\n➤➤ What callback refs are and how to use them.\n➤➤ How to implement basic versions of several of ref’s use cases.\nIn the next chapter, you’ll learn about another hotly debated and sometimes controversial aspect of\nReact, namely, how to apply style to React components.\n10\nStyling React\nHow to style React components, and React user interfaces in general, can be a polarizing topic.\nThere are many ways to handle style in React, and you’re likely to see several of them used side-\nby- side on most React projects.\nIn this chapter, you’ll learn:",
		"React, namely, how to apply style to React components.\n10\nStyling React\nHow to style React components, and React user interfaces in general, can be a polarizing topic.\nThere are many ways to handle style in React, and you’re likely to see several of them used side-\nby- side on most React projects.\nIn this chapter, you’ll learn:\n➤➤ How to include and use CSS files in React.\n➤➤ How to write inline styles in React.\n➤➤ How to use CSS Modules.\n➤➤ How to use CSS- in- JS.\nTHE IMPORTANCE OF STYLES\nStyle in web applications determines how individual elements look, including typefaces, weight\nof text, colors, backgrounds, width, and height, for example. It also determines how elements\nrelate to each other and to the HTML document or browser window— their borders, margins,\nalignment, and position. Certain CSS styles create animations. Still others affect how elements\nbehave and how they look when they’re in different states, such as hovered over, clicked,\nfocused, and so on.",
		"of text, colors, backgrounds, width, and height, for example. It also determines how elements\nrelate to each other and to the HTML document or browser window— their borders, margins,\nalignment, and position. Certain CSS styles create animations. Still others affect how elements\nbehave and how they look when they’re in different states, such as hovered over, clicked,\nfocused, and so on.\nEven if you don’t add any style at all to your user interface, it’s still affected by the browser’s\ndefault styles, which are rarely ideal. Styles also determine how your user interface will look\non different sized devices, when printed, and even how it will sound when read by a text- to-\nspeech reader.\nWith styles determining so much of what the end user’s experience with your application will\nbe, it’s essential for a developer or a development team to give more than a little thought to how\nstyle will be managed and implemented in a user interface.\n244 ❘ CHAPTER 10 Styling React",
		"on different sized devices, when printed, and even how it will sound when read by a text- to-\nspeech reader.\nWith styles determining so much of what the end user’s experience with your application will\nbe, it’s essential for a developer or a development team to give more than a little thought to how\nstyle will be managed and implemented in a user interface.\n244 ❘ CHAPTER 10 Styling React\nBecause React is just JavaScript and because everything in your React user interface will start its life\nas JavaScript, you have more options for how to implement style with React than if you were devel-\noping an application using plain old HTML and CSS files.\nUsing ordinary CSS with React is an option, however, and it’s the option that we’ll talk about first.\nIMPORTING CSS INTO THE HTML FILE\nThe most basic way to style a React user interface is by importing one or more CSS files into the\nHTML file that loads React. This can be done as simply as by opening up index.html, which lives",
		"oping an application using plain old HTML and CSS files.\nUsing ordinary CSS with React is an option, however, and it’s the option that we’ll talk about first.\nIMPORTING CSS INTO THE HTML FILE\nThe most basic way to style a React user interface is by importing one or more CSS files into the\nHTML file that loads React. This can be done as simply as by opening up index.html, which lives\nin the public folder in a Create React App project, and adding an HTML link element between the\n<head> and </head> tags, as shown in Listing 10-1.\nLISTING 10- 1: Adding an HTML link to the HTML file\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf- 8\" />\n<link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1\" />\n<meta name=\"theme- color\" content=\"#000000\" />\n<meta\nname=\"description\"\ncontent=\"Web site created using create-r eact- app\" />\n<link rel=\"stylesheet\" href=\"%PUBLIC_URL%/css/style.css\" />",
		"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf- 8\" />\n<link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1\" />\n<meta name=\"theme- color\" content=\"#000000\" />\n<meta\nname=\"description\"\ncontent=\"Web site created using create-r eact- app\" />\n<link rel=\"stylesheet\" href=\"%PUBLIC_URL%/css/style.css\" />\n<link rel=\"apple- touch- icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n<link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n</head>\n<body>\n<noscript>You need to enable JavaScript to run this app.</noscript>\n<div id=\"root\"></div>\n</body>\n</html>\nIn Create React App projects, the index.html file is a template, which gets compiled when you run\nnpm start or npm run build. Variables in the template are surrounded by the % character. So, in the\nCSS link added in Listing 10-1, the %PUBLIC_URL% variable will be replaced with the actual URL\nwhere the application is being served.",
		"<div id=\"root\"></div>\n</body>\n</html>\nIn Create React App projects, the index.html file is a template, which gets compiled when you run\nnpm start or npm run build. Variables in the template are surrounded by the % character. So, in the\nCSS link added in Listing 10-1, the %PUBLIC_URL% variable will be replaced with the actual URL\nwhere the application is being served.\nTo use this method of styling React, just put a CSS file in the right place inside the public directory or\npoint the link to an external URL (such as a hosted stylesheet or a stylesheet library like Bootstrap).\nThis method of styling React is useful for providing an overall style to the user interface, or a theme.\nHowever, it should be used carefully, since the styles included in the HTML file will affect every\nUsing Plain Old CSS in Components ❘ 245\ncomponent in your application, and it’s easy to accidentally cause problems lower in the component\ntree or create unnecessary complexity by adding styles at this level.",
		"However, it should be used carefully, since the styles included in the HTML file will affect every\nUsing Plain Old CSS in Components ❘ 245\ncomponent in your application, and it’s easy to accidentally cause problems lower in the component\ntree or create unnecessary complexity by adding styles at this level.\nUSING PLAIN OLD CSS IN COMPONENTS\nCreate React App has built into it the ability to load and bundle ordinary CSS files into your user\ninterface. If you’re familiar with CSS and how to use CSS selectors to apply style to elements, classes,\nand IDs, you’ll find using CSS in React comfortable and familiar. Listing 10-2 shows how to include a\nCSS file into a React component and then use the CSS classes.\nLISTING 10- 2: Including CSS in a component\nimport \"styles.css\";\nfunction ArticleLink(props){\nreturn (\n<div className=\"article- link\">\n<h1 className=\"title\">{props.title}</h1>\n<p className=\"firstPara\">{props.firstPararaph}</p>",
		"and IDs, you’ll find using CSS in React comfortable and familiar. Listing 10-2 shows how to include a\nCSS file into a React component and then use the CSS classes.\nLISTING 10- 2: Including CSS in a component\nimport \"styles.css\";\nfunction ArticleLink(props){\nreturn (\n<div className=\"article- link\">\n<h1 className=\"title\">{props.title}</h1>\n<p className=\"firstPara\">{props.firstPararaph}</p>\n<p><a className=\"articleLink\" href={props.link}>read more</a></p>\n</div>\n);\n}\nexport default ArticleLink;\nImporting a stylesheet into a React component has the benefit of being a familiar way to work, and it\nalso allows you to use existing stylesheets that you may have.\nAs with importing styles into the HTML file, CSS imported into the components cascades to the\ncomponent’s children. For example, Listing 10-3 shows a stylesheet, a parent component, and a child\ncomponent rendered by the parent component. The styles are imported into the parent component,",
		"also allows you to use existing stylesheets that you may have.\nAs with importing styles into the HTML file, CSS imported into the components cascades to the\ncomponent’s children. For example, Listing 10-3 shows a stylesheet, a parent component, and a child\ncomponent rendered by the parent component. The styles are imported into the parent component,\nbut the class and element styles defined in the stylesheet are only used in the child.\nLISTING 10- 3: Cascading styles in components\n/* style.css */\np {\nfont- size: 80px;\n}\n.red {\ncolor: red;\n}\ncontinues\n246 ❘ CHAPTER 10 Styling React\nLISTING 10-3 (continued)\n// StyledParent.js\nimport StyledChild from './StyledChild';\nimport './style.css';\nfunction StyledParent(props){\nreturn (<StyledChild />)\n}\nexport default StyledParent;\n// StyledChild.js\nfunction StyledChild(props){\nreturn (<p className=\"red\">This is testing whether styles cascade.</p>)\n}\nexport default StyledChild;",
		"color: red;\n}\ncontinues\n246 ❘ CHAPTER 10 Styling React\nLISTING 10-3 (continued)\n// StyledParent.js\nimport StyledChild from './StyledChild';\nimport './style.css';\nfunction StyledParent(props){\nreturn (<StyledChild />)\n}\nexport default StyledParent;\n// StyledChild.js\nfunction StyledChild(props){\nreturn (<p className=\"red\">This is testing whether styles cascade.</p>)\n}\nexport default StyledChild;\nThe result of rendering StyledParent in your browser is shown in Figure 10-1.\nFIGURE 10- 1: Cascading styles from parent to child\nThis trickling down of styles from parent elements to child elements and the complex series of steps\nthat a browser goes through to determine the priority of different styles is the way that CSS was\nWriting Inline Styles ❘ 247\ndesigned. It can often be useful to be able to apply styles to a tree of elements and to make use of the\nCSS cascade to apply styles, but more often it creates confusion and results in components that have",
		"that a browser goes through to determine the priority of different styles is the way that CSS was\nWriting Inline Styles ❘ 247\ndesigned. It can often be useful to be able to apply styles to a tree of elements and to make use of the\nCSS cascade to apply styles, but more often it creates confusion and results in components that have\naccess to far more styles than they actually use.\nOne way to tame CSS is to only use the class selector. This is an approach used by many CSS librar-\nies, including Bootstrap. By only applying styles using the class selector (which is created using the\n“.” symbol in CSS stylesheets and matches the value of the className attribute in JSX) you elimi-\nnate the problem of styles that are applied to IDs overriding styles that are applied to classes, and\nstyles applied to elements overriding classes and IDs, and styles marked as !important overriding\neverything.\nBut, no matter what you do, CSS is not a programming language, and it doesn’t have scope as",
		"nate the problem of styles that are applied to IDs overriding styles that are applied to classes, and\nstyles applied to elements overriding classes and IDs, and styles marked as !important overriding\neverything.\nBut, no matter what you do, CSS is not a programming language, and it doesn’t have scope as\nprogrammers understand it or many of the conveniences of programming languages. This is why\nmany developers who use CSS directly in their components or HTML file use a CSS preprocessor,\nsuch as SASS.\nNOTE A discussion of CSS preprocessors is beyond the scope of this book,\nbut if you want to learn more, visit sass- lang.com/.\nHowever, React has built into it another way to style components that gives you all of the capabilities\nof a CSS preprocessor, without having to learn the language used by the CSS preprocessor: you can\nsimply use JavaScript to apply style to components.\nWRITING INLINE STYLES",
		"but if you want to learn more, visit sass- lang.com/.\nHowever, React has built into it another way to style components that gives you all of the capabilities\nof a CSS preprocessor, without having to learn the language used by the CSS preprocessor: you can\nsimply use JavaScript to apply style to components.\nWRITING INLINE STYLES\nReact’s built-i n DOM elements have a style attribute that accepts a style object as its value. When\nyou pass DOM style properties into this attribute, those properties will be applied to the resulting\nHTML element.\nTo demonstrate a basic use of the style attribute, Listing 10-4 shows a React component that\nreturns a styled paragraph of text.\nLISTING 10- 4: Using inline styles in React\nfunction WarningMessage(props){\nreturn (\n<p style={{color:\"red\",padding:\"6px\",backgroundColor:\"#000000\"}}>\n{props.warningMessage}\n</p>\n)\n}\nexport default WarningMessage;\n248 ❘ CHAPTER 10 Styling React",
		"HTML element.\nTo demonstrate a basic use of the style attribute, Listing 10-4 shows a React component that\nreturns a styled paragraph of text.\nLISTING 10- 4: Using inline styles in React\nfunction WarningMessage(props){\nreturn (\n<p style={{color:\"red\",padding:\"6px\",backgroundColor:\"#000000\"}}>\n{props.warningMessage}\n</p>\n)\n}\nexport default WarningMessage;\n248 ❘ CHAPTER 10 Styling React\nIn this example, notice that the style object, which is written as an object literal (using curly brack-\nets) must itself be surrounded by curly brackets to indicate that it’s to be treated as literal JavaScript\nrather than JSX, which is why there are double curly brackets around the style properties.\nJavaScript Style Syntax\nThe properties that you can access and manipulate using JavaScript mirror the CSS properties, and\nyou can do anything using JavaScript styles that you can do with CSS. Because of the differences\nbetween JavaScript and CSS, however, JavaScript styles are written differently.",
		"rather than JSX, which is why there are double curly brackets around the style properties.\nJavaScript Style Syntax\nThe properties that you can access and manipulate using JavaScript mirror the CSS properties, and\nyou can do anything using JavaScript styles that you can do with CSS. Because of the differences\nbetween JavaScript and CSS, however, JavaScript styles are written differently.\nThe first difference is that a CSS rule- set does not follow the rules of JavaScript object literals,\nalthough it does resemble one. In particular, CSS style rules don’t have quotes around the values,\nwhile in JavaScript style objects, quotes are required around strings.\nThe second difference between CSS rule- sets and JavaScript objects is that the individual rules in CSS\nare separated by semicolons, while in JavaScript objects, properties are separated by commas.\nThe third difference is that CSS property names containing more than one word have hyphens",
		"while in JavaScript style objects, quotes are required around strings.\nThe second difference between CSS rule- sets and JavaScript objects is that the individual rules in CSS\nare separated by semicolons, while in JavaScript objects, properties are separated by commas.\nThe third difference is that CSS property names containing more than one word have hyphens\nbetween the words. In JavaScript, this would result in an error, so JavaScript style properties use\ncamelCase for multi-w ord names.\nFinally, CSS has the concept of selectors, which is how styles can be selectively applied to only certain\nelements. A rule-s et attached to a class selector (which is indicated by a . before the name of the rule-\nset) will apply to elements that have that class (or className in JSX).\nIn JavaScript, style objects that aren’t inline styles must be assigned to a variable and that variable can\nbe used as the value of a DOM element’s style attribute.",
		"elements. A rule-s et attached to a class selector (which is indicated by a . before the name of the rule-\nset) will apply to elements that have that class (or className in JSX).\nIn JavaScript, style objects that aren’t inline styles must be assigned to a variable and that variable can\nbe used as the value of a DOM element’s style attribute.\nListing 10-5 shows a CSS rule- set, followed by the JavaScript style object that accomplishes the\nsame thing.\nLISTING 10- 5: CSS rule- sets vs. JavaScript style objects\n/* CSS rule- set */\n.headingStyle{\nbackground- color: #999999;\ncolor: #eee;\nborder: 1px solid black;\nborder- radius: 4px;\nwidth: 50%;\n}\n//JavaScript style object\nconst headingStyle = {\nbackgroundColor: '#999999',\ncolor: '#eee',\nborder: '1px solid black',\nborderRadius: '4px',\nwidth: '50%'\n};\nWriting Inline Styles ❘ 249\nWhy to Use Inline Styles\nInline styles make it easy to see how a component will be styled. If you’re only applying a couple of",
		"color: #eee;\nborder: 1px solid black;\nborder- radius: 4px;\nwidth: 50%;\n}\n//JavaScript style object\nconst headingStyle = {\nbackgroundColor: '#999999',\ncolor: '#eee',\nborder: '1px solid black',\nborderRadius: '4px',\nwidth: '50%'\n};\nWriting Inline Styles ❘ 249\nWhy to Use Inline Styles\nInline styles make it easy to see how a component will be styled. If you’re only applying a couple of\nstyle properties to an element, and you’re not going to reuse that particular combination of properties\nin another component, writing them as inline styles is easy and fast. Using inline styles also increases\nthe portability of a component, since the styles are part of the component file and don’t rely on an\nexternal module being present.\nWhy Not to Use Inline Styles\nIn a React application with many different components, using inline styles can become a mainte-\nnance nightmare. It’s simply a good user interface design practice to reuse certain styles, including",
		"the portability of a component, since the styles are part of the component file and don’t rely on an\nexternal module being present.\nWhy Not to Use Inline Styles\nIn a React application with many different components, using inline styles can become a mainte-\nnance nightmare. It’s simply a good user interface design practice to reuse certain styles, including\nhow headings are styled, colors and sizes of buttons, sizes and typefaces of different types of text,\nand so forth.\nIf you were to write the same style object, containing the same style properties, each time you styled a\nblock of text, you’d soon come to the realization that writing inline style objects is a waste of effort.\nAt that point, logically, the thing to do is to create variables to store your style objects.\nImproving Inline Styles with Style Modules\nRather than writing your style objects directly in the style attribute of each element, you can create\nvariables to hold the styles, as shown in Listing 10-6.",
		"At that point, logically, the thing to do is to create variables to store your style objects.\nImproving Inline Styles with Style Modules\nRather than writing your style objects directly in the style attribute of each element, you can create\nvariables to hold the styles, as shown in Listing 10-6.\nLISTING 10- 6: Using variables to hold style objects\nfunction WarningMessage(props){\nconst warningStyle = {color:\"red\",padding:\"6px\",backgroundColor:\"#000000\"};\nreturn (\n<p style={warningStyle}>\n{props.warningMessage}\n</p>\n)\n}\nexport default WarningMessage;\nVariables created to hold style objects can be kept inside the component, as shown in Listing 10-6, or\nyou can put them into separate files and export them using either named exports (if you want to cre-\nate a style library containing the styles for multiple components) or a default export.\nListing 10-7 shows an example of a style object library containing styles for multiple different\ncomponents.\n250 ❘ CHAPTER 10 Styling React",
		"you can put them into separate files and export them using either named exports (if you want to cre-\nate a style library containing the styles for multiple components) or a default export.\nListing 10-7 shows an example of a style object library containing styles for multiple different\ncomponents.\n250 ❘ CHAPTER 10 Styling React\nLISTING 10- 7: A style object library\nexport const warningStyle = {color:\"red\",padding:\"6px\",backgroundColor:\"#000000\"};\nexport const infoStyle = {color:\"yellow\",padding:\"6px\",backgroundColor:\"#000000\"};\nexport const successStyle = {color:\"green\",padding:\"6px\",backgroundColor:\"#000000\"};\nIgnoring how ugly these styles will actually look in reality, they could be saved in a file called\nmessageStyles.js and then imported individually or as a group into each component that needs to\ndisplay a message.\nListing 10-8 shows how to import an entire style object library into a component that will display",
		"export const successStyle = {color:\"green\",padding:\"6px\",backgroundColor:\"#000000\"};\nIgnoring how ugly these styles will actually look in reality, they could be saved in a file called\nmessageStyles.js and then imported individually or as a group into each component that needs to\ndisplay a message.\nListing 10-8 shows how to import an entire style object library into a component that will display\ntext in a different style, depending on the type of message passed into the component.\nLISTING 10- 8: Importing multiple styles\nimport {warningStyle,infoStyle,successStyle} from './messageStyles.js';\nfunction DisplayStatus(props){\nlet messageStyle;\nswitch(props.message.type){\ncase 'warning':\nmessageStyle = 'warningStyle';\nbreak;\ncase 'info':\nmessageStyle = 'infoStyle';\nbreak;\ncase 'success':\nmessageStyle = \"successStyle\";\nbreak;\ndefault:\nmessageStyle = \"infoStyle\";\nbreak;\n}\nreturn (\n<p style={messageStyle}>{props.message.text}</p>\n);\n}\nexport default DisplayStatus;\nCSS MODULES",
		"function DisplayStatus(props){\nlet messageStyle;\nswitch(props.message.type){\ncase 'warning':\nmessageStyle = 'warningStyle';\nbreak;\ncase 'info':\nmessageStyle = 'infoStyle';\nbreak;\ncase 'success':\nmessageStyle = \"successStyle\";\nbreak;\ndefault:\nmessageStyle = \"infoStyle\";\nbreak;\n}\nreturn (\n<p style={messageStyle}>{props.message.text}</p>\n);\n}\nexport default DisplayStatus;\nCSS MODULES\nCSS Modules give you some of the benefits of using JavaScript style objects while using standard CSS\nstylesheets. Specifically, CSS Modules solve the problem of name conflicts and scoping in CSS.\nCSS Modules ❘ 251\nCSS modules can be written like normal CSS files, and then imported into your components as if they\nwere JavaScript. In fact, what happens during the compilation of your components is that CSS mod-\nules are converted into JavaScript objects. This gives CSS modules some special powers, which we’ll\ntalk about in a moment. Listing 10-9 shows a basic CSS module.\nLISTING 10- 9: A CSS Module",
		"CSS modules can be written like normal CSS files, and then imported into your components as if they\nwere JavaScript. In fact, what happens during the compilation of your components is that CSS mod-\nules are converted into JavaScript objects. This gives CSS modules some special powers, which we’ll\ntalk about in a moment. Listing 10-9 shows a basic CSS module.\nLISTING 10- 9: A CSS Module\n/* my- component.module.css */\n.bigText {\nfont- size: 4em;\n}\n.redText {\ncolor: #FF0000;\n}\nTo import the preceding CSS module into a component, make sure to save the file with .module.css\nat the end and use the following import statement:\nimport styles from './my- component.module.css';\nWhen your component is compiled, the classes in the CSS module will be rewritten using a format\ncalled ICSS, which stands for Interoperable CSS.\nYou can then access the imported styles using dot notation and pass them into the className attrib-\nute, as shown in Listing 10-10.\nLISTING 10- 10: Using a CSS Module",
		"import styles from './my- component.module.css';\nWhen your component is compiled, the classes in the CSS module will be rewritten using a format\ncalled ICSS, which stands for Interoperable CSS.\nYou can then access the imported styles using dot notation and pass them into the className attrib-\nute, as shown in Listing 10-10.\nLISTING 10- 10: Using a CSS Module\nimport styles from './my- component.module.css';\nfunction DisplayMessage(props) {\nreturn (<p className = {styles.redText}>This text is red.</p>);\n}\nexport default DisplayMessage;\nCSS Modules isn’t specific to React. It’s a separate specification, which can be used with any front-\nend library. However, support for it is built into Create React App, so to use it in your React applica-\ntions built using Create React App, you don’t need to do anything special to start using it.\nNaming CSS Module Files\nAlthough CSS module files resemble ordinary CSS files, when you use them inside of Create React",
		"end library. However, support for it is built into Create React App, so to use it in your React applica-\ntions built using Create React App, you don’t need to do anything special to start using it.\nNaming CSS Module Files\nAlthough CSS module files resemble ordinary CSS files, when you use them inside of Create React\nApp, their filenames must end with .module.css to indicate to the compiler that they need to be\nprocessed as CSS modules.\n252 ❘ CHAPTER 10 Styling React\nThe standard naming convention for CSS module files is to lowercase and hyphenate the component\nname that the module will be used in, and then follow that with .module.css.\nSo, if your React component is named NavBar, the CSS module file for the NavBar component would\nbe named nav- bar.module.css. You can import the styles contained in the CSS module file using\nany name you want, but it’s normal to import them as an object named styles, like this:\nimport styles from './nav- bar.module.css';",
		"name that the module will be used in, and then follow that with .module.css.\nSo, if your React component is named NavBar, the CSS module file for the NavBar component would\nbe named nav- bar.module.css. You can import the styles contained in the CSS module file using\nany name you want, but it’s normal to import them as an object named styles, like this:\nimport styles from './nav- bar.module.css';\nBecause each component can import its own styles object, you can write the CSS for any compo-\nnent without having to worry that a class name you use for one component’s styles will interfere with\na style having the same name in another component.\nThe styles inside a CSS module file should use camelCase so that when you use them inside your JSX,\nyou can access them using dot notation.\nAdvanced CSS Modules Functionality\nCSS module files can be just plain CSS, but they also have some additional capabilities that can make\nthem more powerful than plain old CSS.\nGlobal Classes",
		"a style having the same name in another component.\nThe styles inside a CSS module file should use camelCase so that when you use them inside your JSX,\nyou can access them using dot notation.\nAdvanced CSS Modules Functionality\nCSS module files can be just plain CSS, but they also have some additional capabilities that can make\nthem more powerful than plain old CSS.\nGlobal Classes\nBy default, the rules you create in CSS module files are scoped locally to the component you import\nthe styles into. If you want to create a global rule, you can do so by prefixing the name of the class\nwith :global, like this:\n:global .header1 {\nfont- size: 2rem;\nfont- weight: bold;\n}\nIn this example, the header1 class will be available to all of your components.\nClass Composition\nClass composition lets you create new classes in CSS modules by extending existing ones. For exam-\nple, you might have a class named bodyText that determines how standard text in your component",
		"with :global, like this:\n:global .header1 {\nfont- size: 2rem;\nfont- weight: bold;\n}\nIn this example, the header1 class will be available to all of your components.\nClass Composition\nClass composition lets you create new classes in CSS modules by extending existing ones. For exam-\nple, you might have a class named bodyText that determines how standard text in your component\nshould display. With class composition, different types of text can extend the base bodyText class to\ncreate variations. Class composition in CSS modules uses a special property called composes, which\ntakes as its value any number of classes that should be used as the starting point for the current class.\nListing 10-11 shows an example of using class composition to create a firstParagraph class based\non bodyText.\nLISTING 10- 11: Using class composition\n.bodyText {\nfont- size: 12px;\nfont- family: Georgia serif;\ncolor: #333;\nCSS-i n-J S and Styled Components ❘ 253\ntext- indent: 25px;\n}\n.firstParagraph {",
		"Listing 10-11 shows an example of using class composition to create a firstParagraph class based\non bodyText.\nLISTING 10- 11: Using class composition\n.bodyText {\nfont- size: 12px;\nfont- family: Georgia serif;\ncolor: #333;\nCSS-i n-J S and Styled Components ❘ 253\ntext- indent: 25px;\n}\n.firstParagraph {\ncomposes: bodyText;\ntext- indent: 0px;\n}\nYou can also import styles from other stylesheets to use as the base class for a new style, as shown in\nListing 10-12.\nLISTING 10- 12: Basing a new class on an external style\n.checkoutButton {\ncomposes: button from './buttons';\nbackground- color: #4CAF50;\nfont- size: 32px;\n}\nCSS- IN- JS AND STYLED COMPONENTS\nCSS- in- JS refers to a pattern of composing styles using JavaScript. Several third- party libraries exist\nfor implementing CSS- in- JS. Perhaps the most popular and commonly used is Styled Components.\nBecause Styled Components is a separate library, which is not installed by Create React App by",
		"background- color: #4CAF50;\nfont- size: 32px;\n}\nCSS- IN- JS AND STYLED COMPONENTS\nCSS- in- JS refers to a pattern of composing styles using JavaScript. Several third- party libraries exist\nfor implementing CSS- in- JS. Perhaps the most popular and commonly used is Styled Components.\nBecause Styled Components is a separate library, which is not installed by Create React App by\ndefault, the first step in using it is to install it:\nnpm install - - save styled- components\nOnce installed, you can include the styled- components package into any component where you\nwant to use it.\nStyled Components uses tagged template literals to let you write new components using CSS. See the\n“JavaScript Lesson: Tagged Template Literals” sidebar in this chapter to learn more about this rela-\ntively new feature of JavaScript.\nStyled Components creates a styled component that you can wrap around the elements you want",
		"want to use it.\nStyled Components uses tagged template literals to let you write new components using CSS. See the\n“JavaScript Lesson: Tagged Template Literals” sidebar in this chapter to learn more about this rela-\ntively new feature of JavaScript.\nStyled Components creates a styled component that you can wrap around the elements you want\nto style. The result is that your JSX code is free from style objects, class names, and style attributes,\nbecause all the styling is done with reusable styled elements. Styled Components is a declarative way\nof styling React components, as we say.\nListing 10-13 shows a simple example of using Styled Components to create a component called\nHeading that applies styles to its contents.\nLISTING 10- 13: Using Styled Components\nimport styled from 'styled- components';\nconst Heading = styled.h1`\ncontinues\n254 ❘ CHAPTER 10 Styling React\nLISTING 10-13 (continued)\nwidth: 50%;\nmargin: 0 auto;\nfont- size: 2.2em;\ncolor: #333300;`\nconst ExampleComponent = ()=>{",
		"Heading that applies styles to its contents.\nLISTING 10- 13: Using Styled Components\nimport styled from 'styled- components';\nconst Heading = styled.h1`\ncontinues\n254 ❘ CHAPTER 10 Styling React\nLISTING 10-13 (continued)\nwidth: 50%;\nmargin: 0 auto;\nfont- size: 2.2em;\ncolor: #333300;`\nconst ExampleComponent = ()=>{\nreturn(\n<Heading>Example Heading</Heading>\n);\n}\nexport default ExampleComponent;\nStyled Components can be defined in separate files just like other components and then imported\ninto multiple files, they can be nested to create more complex components through composition, and\nbecause they’re JavaScript, they can be scripted.\nJAVASCRIPT LESSON: TAGGED TEMPLATE LITERALS\nTagged template literals are a more advanced form of template literals, so I’ll start by\nreviewing template literals.\nTemplate literals use the backtick character (`) to turn a JavaScript string into a tem-\nplate. A string surrounded by backticks can include JavaScript expressions by sur-",
		"because they’re JavaScript, they can be scripted.\nJAVASCRIPT LESSON: TAGGED TEMPLATE LITERALS\nTagged template literals are a more advanced form of template literals, so I’ll start by\nreviewing template literals.\nTemplate literals use the backtick character (`) to turn a JavaScript string into a tem-\nplate. A string surrounded by backticks can include JavaScript expressions by sur-\nrounding the expression with ${}. For example, if you want to dynamically generate\na message to display after someone has placed an order on your website, you could\nuse something like the following:\nconst thankYouMessage = `Thank you, ${customer.name}, for your\norder.`;\nPrior to template literals, the preceding code had to be written like this:\nconst thankYouMessage = \"Thank you, \" + customer.name + \" for\nyour order.\";\nTagged template literals let you parse a string with a function. The tag function\ntakes a template literal as its argument, and returns a new string. For example, if you",
		"const thankYouMessage = `Thank you, ${customer.name}, for your\norder.`;\nPrior to template literals, the preceding code had to be written like this:\nconst thankYouMessage = \"Thank you, \" + customer.name + \" for\nyour order.\";\nTagged template literals let you parse a string with a function. The tag function\ntakes a template literal as its argument, and returns a new string. For example, if you\nhave a function that reverses the letters in a string, you could use it as a tag func-\ntion, like this:\nreverseString`Bet you can't read this.`;\nBecause the tag function only takes one argument, the parentheses around the argu-\nment are optional and are usually omitted when using tagged templates.\nSummary ❘ 255\nIf you include variables in the string that you pass into a tag template, those vari-\nables are passed to the function as arguments. In the following example, the tag\nfunction receives a sentence with a price variable that’s used to display a custom-\nized message:\nlet orderTotal = 42;",
		"ment are optional and are usually omitted when using tagged templates.\nSummary ❘ 255\nIf you include variables in the string that you pass into a tag template, those vari-\nables are passed to the function as arguments. In the following example, the tag\nfunction receives a sentence with a price variable that’s used to display a custom-\nized message:\nlet orderTotal = 42;\nfunction determineShipping(strings, price) {\nlet str0 = strings[0]; // \"Your order \"\nlet str1 = strings[1]; // \" for free shipping.\"\nlet qualifyStr;\nif (price > 50){\nqualifyStr = 'qualifies';\n} else {\nqualifyStr = 'does not qualify';\n}\nreturn `${str0}${qualifyStr}${str1}`;\n}\nlet output = determineShipping`Your order ${orderTotal} for\nfree shipping.`;\nconsole.log(output);\n// Your order does not qualify for free shipping.\nSUMMARY\nBecause React doesn’t give developers many rules about exactly how to structure user interfaces,\nyou’re free to mix and match solutions and patterns and find out what works best. Nowhere is",
		"}\nreturn `${str0}${qualifyStr}${str1}`;\n}\nlet output = determineShipping`Your order ${orderTotal} for\nfree shipping.`;\nconsole.log(output);\n// Your order does not qualify for free shipping.\nSUMMARY\nBecause React doesn’t give developers many rules about exactly how to structure user interfaces,\nyou’re free to mix and match solutions and patterns and find out what works best. Nowhere is\nthis more apparent than in the multiple approaches to styling components that have been devised\nfor React.\nIn this chapter, you learned:\n➤➤ How to import CSS into components.\n➤➤ How to use inline styles.\n➤➤ How to import and use JavaScript style modules.\n➤➤ How to write and use CSS Modules.\n➤➤ About CSS- in- JS.\nIn the next chapter, you’ll learn how to use hooks to give function components most of the same\nfunctionality as class components.",
		"11\nIntroducing Hooks\nReact Hooks give function components access to much of the functionality of React that was\npreviously only available with class components. Hooks also give developers a simpler syntax\nfor using state, performing tasks in response to lifecycle events, and reusing code.\nIn this chapter, you’ll learn:\n➤➤ What hooks are.\n➤➤ General rules and best practices for using hooks.\n➤➤ How to use React’s built-i n hooks.\n➤➤ How to write custom hooks.\n➤➤ How to find and use other custom hooks.\nWHAT ARE HOOKS?\nHooks are functions that are part of the React library which give you access to features of\nReact that were previously only available by extending the React.Component class. These\nfeatures include state and lifecycle, as well as refs and caching of function results (aka memoiza-\ntion). Hooks “hook into” React from functions.\nWHY WERE HOOKS INTRODUCED?\nHooks were introduced to solve several problems with the React library. The first is that React",
		"React that were previously only available by extending the React.Component class. These\nfeatures include state and lifecycle, as well as refs and caching of function results (aka memoiza-\ntion). Hooks “hook into” React from functions.\nWHY WERE HOOKS INTRODUCED?\nHooks were introduced to solve several problems with the React library. The first is that React\ndidn’t have a simple way to share reusable functionality between components. Prior to React\nHooks, solutions such as higher- order components and render props (both of which are covered\nin Chapter 12) were commonly used (and still are) for sharing functionality. However, higher-\norder components tend to result in code and component trees that are difficult to read and\noverly complex. Code that renders multiple levels of components within components within\n258 ❘ CHAPTER 11 IntroducIng Hooks\ncomponents in order to provide reusable functionality to a deeply buried component is what is com-",
		"order components tend to result in code and component trees that are difficult to read and\noverly complex. Code that renders multiple levels of components within components within\n258 ❘ CHAPTER 11 IntroducIng Hooks\ncomponents in order to provide reusable functionality to a deeply buried component is what is com-\nmonly known in the React world as “wrapper hell.” Figure 11-1 shows a view of the React Developer\nTools for a component tree that’s suffering badly from this condition.\nFIGURE 11- 1: Wrapper hell\nReact’s other big problem prior to hooks was that people found using classes to be unnecessarily\nconfusing and verbose. If you’ve made it this far into the book, I don’t need to explain this one to you\nagain. Most of the time, what requires 50 lines of code in a class can be done with a fraction of that\nby using a function.\nThe Built-i n Hooks ❘ 259\nAs you’ll see, beyond just having the ability to accomplish the same thing with less code, hooks also",
		"confusing and verbose. If you’ve made it this far into the book, I don’t need to explain this one to you\nagain. Most of the time, what requires 50 lines of code in a class can be done with a fraction of that\nby using a function.\nThe Built-i n Hooks ❘ 259\nAs you’ll see, beyond just having the ability to accomplish the same thing with less code, hooks also\ngive you the ability to split up your components into smaller parts by creating custom hooks.\nNow that you understand the motivation for hooks, let’s take a look at the specifics.\nRULES OF HOOKS\nAlthough different hooks accomplish different things, all of them have two important rules which\nmust be followed:\n1. Hooks can only be used in function components.\n2. Hooks must be called at the top level of your function components— meaning inside the\nfunction, but not inside of a statement or inner function. Because hooks need to run just once\nevery time your function component runs, they can’t be called from inside of conditional",
		"must be followed:\n1. Hooks can only be used in function components.\n2. Hooks must be called at the top level of your function components— meaning inside the\nfunction, but not inside of a statement or inner function. Because hooks need to run just once\nevery time your function component runs, they can’t be called from inside of conditional\nstatements, loops, or nested functions.\nTHE BUILT- IN HOOKS\nReact has 10 built-i n hooks that you can use without needing to install anything else. These built- in\nhooks are:\n➤➤ useState\n➤➤ useEffect\n➤➤ useContext\n➤➤ useReducer\n➤➤ useCallback\n➤➤ useMemo\n➤➤ useRef\n➤➤ useImperativeHandle\n➤➤ useLayoutEffect\n➤➤ useDebugValue\nThe first three hooks—u seState, useEffect, and useContext— are the basic hooks. They’re the\nones you’ll use most often and that are therefore the most important ones to understand.\nThe other seven hooks are called “Additional Hooks” in the React documentation. These are hooks",
		"➤➤ useReducer\n➤➤ useCallback\n➤➤ useMemo\n➤➤ useRef\n➤➤ useImperativeHandle\n➤➤ useLayoutEffect\n➤➤ useDebugValue\nThe first three hooks—u seState, useEffect, and useContext— are the basic hooks. They’re the\nones you’ll use most often and that are therefore the most important ones to understand.\nThe other seven hooks are called “Additional Hooks” in the React documentation. These are hooks\nthat you may only use occasionally (or never) or which are variations on the three basic hooks. There\nare some really useful things (and a couple that are essential, in my opinion) in this set of hooks,\nhowever, so I’m going to spend some time covering them and showing examples of how to use\nthem as well.\n260 ❘ CHAPTER 11 IntroducIng Hooks\nManaging State with useState\nOn the first render of a function component containing it, the useState hook creates a stateful\nvalue from the argument passed to it, along with the function for updating it. After the first render,",
		"however, so I’m going to spend some time covering them and showing examples of how to use\nthem as well.\n260 ❘ CHAPTER 11 IntroducIng Hooks\nManaging State with useState\nOn the first render of a function component containing it, the useState hook creates a stateful\nvalue from the argument passed to it, along with the function for updating it. After the first render,\nuseState returns its most recent value after updates are applied. Like class properties (such as this\n.state), values created with useState persist between renders.\nAs with all of the hooks, the first step in using useState is to import it:\nimport {useState} from 'react';\nIMPORTING ALL THE HOOKS\nIn reality, since hooks are part of the React library, you can import all of the hooks\nat once by importing the entire React library and then referencing them using dot\nnotation, like this:\nimport React from 'react';\nconst [state,setState] = React.useState();",
		"As with all of the hooks, the first step in using useState is to import it:\nimport {useState} from 'react';\nIMPORTING ALL THE HOOKS\nIn reality, since hooks are part of the React library, you can import all of the hooks\nat once by importing the entire React library and then referencing them using dot\nnotation, like this:\nimport React from 'react';\nconst [state,setState] = React.useState();\nAlthough there’s no real problem with using hooks this way, it’s more common, and\nperhaps more efficient, to import just the hooks you need individually using named\nimports. If your component makes use of multiple hooks, separate them with com-\nmas inside of the curly braces, like this:\nimport {useState,useEffect,useCallback} from 'react';\nOnce you import useState into a component, you can use it as many times as you need to create\nstateful variables. React keeps track of stateful values in a function component based on the order",
		"imports. If your component makes use of multiple hooks, separate them with com-\nmas inside of the curly braces, like this:\nimport {useState,useEffect,useCallback} from 'react';\nOnce you import useState into a component, you can use it as many times as you need to create\nstateful variables. React keeps track of stateful values in a function component based on the order\nin which they appear in the code, which is how it can return the latest value for each stateful vari-\nable each time the function renders. This is why hooks can’t be used inside of conditional or looping\ncode— doing so would cause the hooks in a function component to not always be called, or to not be\ncalled in the same order with each render, which would cause React to return unexpected values.\nListing 11-1 shows a simple example of using useState to keep track of the score and the current\nguess in a number guessing game.\nLISTING 11- 1: A number guessing game with useState\nimport {useState} from 'react';",
		"called in the same order with each render, which would cause React to return unexpected values.\nListing 11-1 shows a simple example of using useState to keep track of the score and the current\nguess in a number guessing game.\nLISTING 11- 1: A number guessing game with useState\nimport {useState} from 'react';\nfunction NumberGuessing(props){\nconst [score,setScore] = useState(0);\nconst [guess,setGuess] = useState('');\nconst checkNumber =()=>{\nconst randomNumber = Math.floor(Math.random() * 10)+1;\nif (Number(guess) === randomNumber){\nThe Built-i n Hooks ❘ 261\nsetScore(()=>score+1);\n}\n}\nreturn (\n<>\nWhat number (between 1 and 10) am I thinking of?\n<input value={guess}\ntype=\"number\"\nmin=\"1\"\nmax=\"10\"\nonChange={(e)=>setGuess(e.target.value)}\n/>\n<button onClick={checkNumber}>Guess!</button>\n<p>Your score: {score}</p>\n</>\n)\n}\nexport default NumberGuessing;\nIn the preceding example, the user’s guess is updated using an inline event handler in the onChange",
		"setScore(()=>score+1);\n}\n}\nreturn (\n<>\nWhat number (between 1 and 10) am I thinking of?\n<input value={guess}\ntype=\"number\"\nmin=\"1\"\nmax=\"10\"\nonChange={(e)=>setGuess(e.target.value)}\n/>\n<button onClick={checkNumber}>Guess!</button>\n<p>Your score: {score}</p>\n</>\n)\n}\nexport default NumberGuessing;\nIn the preceding example, the user’s guess is updated using an inline event handler in the onChange\nevent listener when the user enters a number into the number input field.\nWhen the button is clicked, the checkNumber function generates a random number between 1 and 10\nand then compares that number with the latest value stored in the guess stateful variable.\nOne important thing to notice with the comparison is that I used the Number function to convert\nguess to a number. This is necessary because even numeric values from <input> elements are stored\nin the browser as strings. The random number variable is of the number data type, however, so to be",
		"and then compares that number with the latest value stored in the guess stateful variable.\nOne important thing to notice with the comparison is that I used the Number function to convert\nguess to a number. This is necessary because even numeric values from <input> elements are stored\nin the browser as strings. The random number variable is of the number data type, however, so to be\nable to do a strict comparison between them, one of them has to be converted.\nIf the two numbers match, the score variable is updated to its current value plus 1.\nJAVASCRIPT LESSON: STRICT EQUALITY\nJavaScript has two equality operators, == and ===. The difference between them is\nthat == will disregard the data type when comparing, and the === operator will com-\npare both the value and the data type of the values being compared.\nIf you’re coming to JavaScript from another programming language, the behavior of\nthe == operator will seem strange and mysterious. It’s simply not correct that “0” is",
		"that == will disregard the data type when comparing, and the === operator will com-\npare both the value and the data type of the values being compared.\nIf you’re coming to JavaScript from another programming language, the behavior of\nthe == operator will seem strange and mysterious. It’s simply not correct that “0” is\nequal to 0, for example.\nIn fact, the existence of the == operator (and its opposite, the != operator) in\nJava Script is widely regarded as a flaw in the language, because it has the potential\nto create mysterious behavior and errors. It is therefore best to avoid using == and to\nalways perform strict equality comparisons.\n262 ❘ CHAPTER 11 IntroducIng Hooks\nSetting the Initial State\nTo set the initial state of a stateful variable created using useState, pass the initial value into\nuseState. The useState hook accepts a single argument, which can be any of JavaScript’s data types\n(or an expression that evaluates to a single value) or a function.",
		"always perform strict equality comparisons.\n262 ❘ CHAPTER 11 IntroducIng Hooks\nSetting the Initial State\nTo set the initial state of a stateful variable created using useState, pass the initial value into\nuseState. The useState hook accepts a single argument, which can be any of JavaScript’s data types\n(or an expression that evaluates to a single value) or a function.\nIf you don’t pass an argument into useState, the resulting stateful variable will be created with an\ninitial value of undefined.\nIf the initial state is an expression, that expression will still run on each render, but the result will be\nignored after the first render. For this reason, if your initial state is the result of an expensive calcu-\nlation (for example, it requires a network request), pass a function that returns the initial value to\nuseState, as shown here:\nconst [mailingList,setMailingList] = useState(()=>{\nconst initialMailingList = loadMailingList(props);\nreturn initialMailingList;\n});",
		"ignored after the first render. For this reason, if your initial state is the result of an expensive calcu-\nlation (for example, it requires a network request), pass a function that returns the initial value to\nuseState, as shown here:\nconst [mailingList,setMailingList] = useState(()=>{\nconst initialMailingList = loadMailingList(props);\nreturn initialMailingList;\n});\nThe function will only be run on the first render of the component. React calls this lazy initial state.\nUsing the Setter Function\nLike the setState function in a class component, the setter function returned by useState will\ntrigger a render. If you pass a setter function down to a child component and call it from that child\ncomponent, it will still operate on the original variable it was created with, as demonstrated by\nListing 11-2.\nLISTING 11- 2: Setter functions are bound to their creator components\nimport {useState} from 'react';\nfunction ButtonContainer(){\nconst [count,setCount] = useState(0);\nreturn (\n<>",
		"trigger a render. If you pass a setter function down to a child component and call it from that child\ncomponent, it will still operate on the original variable it was created with, as demonstrated by\nListing 11-2.\nLISTING 11- 2: Setter functions are bound to their creator components\nimport {useState} from 'react';\nfunction ButtonContainer(){\nconst [count,setCount] = useState(0);\nreturn (\n<>\n<MyButton count = {count} setCount = {setCount} /><br />\ncount value: {count}\n</>\n);\n}\nfunction MyButton(props){\nreturn (\n<button onClick = {()=>props.setCount(props.count+1)}>\nAdd 1 to the Count\n</button>\n);\n}\nexport default ButtonContainer;\nThe Built-i n Hooks ❘ 263\nFigure 11-2 shows the result of rendering the ButtonContainer component and clicking the button\n(which is rendered by the MyButton child component).\nFIGURE 11- 2: Passing a setter function as a prop\nThe setter function returned by useState can be used in two different ways: by passing it a function\nor by passing it a single value.",
		");\n}\nexport default ButtonContainer;\nThe Built-i n Hooks ❘ 263\nFigure 11-2 shows the result of rendering the ButtonContainer component and clicking the button\n(which is rendered by the MyButton child component).\nFIGURE 11- 2: Passing a setter function as a prop\nThe setter function returned by useState can be used in two different ways: by passing it a function\nor by passing it a single value.\nPassing a Value to a Setter\nWhen you pass a single value (or an expression that evaluates to a single value) into a useState set-\nter function, the stateful variable attached to that useState function call will be set to the new value\nyou pass it:\nconst [guess,setGuess] = useState(''); // guess === ''\nsetGuess('7'); // guess === '7'\nsetGuess('3'); // guess === '3'\nUnlike when you use setState in a class component, useState’s setter functions do not merge\nobjects. If you pass an object into a useState setter function, the variable connected to that",
		"you pass it:\nconst [guess,setGuess] = useState(''); // guess === ''\nsetGuess('7'); // guess === '7'\nsetGuess('3'); // guess === '3'\nUnlike when you use setState in a class component, useState’s setter functions do not merge\nobjects. If you pass an object into a useState setter function, the variable connected to that\nuseState function will be set to exactly that object.\nPassing a Function to a Setter\nThe other way to use useState setter functions is to pass them a function. This is the method that\nshould be used when the new state of the variable is based on the previous state of the variable.\nPassing a function ensures that the setter function will always receive the latest value of the variable.\n264 ❘ CHAPTER 11 IntroducIng Hooks\nThe function you pass to a setter function will receive the previous value of the stateful variable as\nan argument, and it’s common to name this argument prev or the name of the variable with prev\nbefore it:",
		"Passing a function ensures that the setter function will always receive the latest value of the variable.\n264 ❘ CHAPTER 11 IntroducIng Hooks\nThe function you pass to a setter function will receive the previous value of the stateful variable as\nan argument, and it’s common to name this argument prev or the name of the variable with prev\nbefore it:\nconst [score,setScore] = useState(0); // score === 0\nsetScore((prevScore)=>prevScore+1); // score === 1\nSetter Function Value Comparison\nIf the value that you pass into a setter function is the same as the current value of the state variable,\nthe setter function will “bail out” without re-r endering the component’s children.\nHooking into the Lifecycle with useEffect\nThe useEffect hook accepts a function, which it will run after each render of the function\ncomponent by default. The useEffect hook can be used to simulate the componentDidMount(),\ncomponentDidUpdate(), and componentWillUnmount() lifecycle methods in function components.",
		"the setter function will “bail out” without re-r endering the component’s children.\nHooking into the Lifecycle with useEffect\nThe useEffect hook accepts a function, which it will run after each render of the function\ncomponent by default. The useEffect hook can be used to simulate the componentDidMount(),\ncomponentDidUpdate(), and componentWillUnmount() lifecycle methods in function components.\nThe purpose of useEffect is to allow you to run imperative code that may have side effects inside a\nfunction component. These side effects are the types of things that aren’t otherwise allowed in func-\ntion components, such as network requests, setting timers, and manipulating the DOM directly. The\nreason these types of operations aren’t otherwise possible in function components is that function\ncomponents are essentially just the render method of a component. Side effects shouldn’t be done in\nthe render method, even in class components, because the render method is likely to overwrite the",
		"tion components, such as network requests, setting timers, and manipulating the DOM directly. The\nreason these types of operations aren’t otherwise possible in function components is that function\ncomponents are essentially just the render method of a component. Side effects shouldn’t be done in\nthe render method, even in class components, because the render method is likely to overwrite the\nresults of any side effects. Instead, side effects should be performed after the render method has run\nand the DOM has been updated.\nThis is why side effects are handled inside of lifecycle methods, such as constructor(),\ncomponentDidMount(), and componentDidUpdate() in class components.\nJAVASCRIPT LESSON: SIDE EFFECTS\nThe term “side effects” comes up frequently in React, but it’s not a React-s pecific\nterm. In computer science, a side effect is a result of an impure function. If you recall,\na pure function is one whose return value is always the same when given the same",
		"componentDidMount(), and componentDidUpdate() in class components.\nJAVASCRIPT LESSON: SIDE EFFECTS\nThe term “side effects” comes up frequently in React, but it’s not a React-s pecific\nterm. In computer science, a side effect is a result of an impure function. If you recall,\na pure function is one whose return value is always the same when given the same\narguments, and that doesn’t do anything that lasts past the running of the function\nexcept return a value.\nAnything that a function does that has an effect outside of the function, other than\nproducing a return value, is a side effect.\nSide effects in a browser- based application can include:\n➤➤ Modifying global variables.\n➤➤ Making a network request.\n➤➤ Changing the DOM.\n➤➤ Writing to a database or a file.\n➤➤ Modifying an argument.\nThe Built-i n Hooks ❘ 265\nUsing the Default useEffect Behavior\nIn its most basic form, useEffect simply accepts a function and executes it after each render is com-\nplete, as shown in Listing 11-3.",
		"Side effects in a browser- based application can include:\n➤➤ Modifying global variables.\n➤➤ Making a network request.\n➤➤ Changing the DOM.\n➤➤ Writing to a database or a file.\n➤➤ Modifying an argument.\nThe Built-i n Hooks ❘ 265\nUsing the Default useEffect Behavior\nIn its most basic form, useEffect simply accepts a function and executes it after each render is com-\nplete, as shown in Listing 11-3.\nLISTING 11- 3: The most basic form of useEffect\nimport {useEffect,useState} from 'react';\nfunction RenderCounter(){\nconst [count,setCount] = useState(0);\nuseEffect(()=>{console.log(count)});\nreturn(\n<>\nThis component will count how many times it renders.\n<button onClick={()=>setCount((prev)=>prev+1)}>Update State</button>\n</>\n);\n}\nexport default RenderCounter;\nWhen you run the component in Listing 11-3, it will count each time the function passed to\nuseEffect runs and log the current count to the browser’s JavaScript console.",
		"useEffect(()=>{console.log(count)});\nreturn(\n<>\nThis component will count how many times it renders.\n<button onClick={()=>setCount((prev)=>prev+1)}>Update State</button>\n</>\n);\n}\nexport default RenderCounter;\nWhen you run the component in Listing 11-3, it will count each time the function passed to\nuseEffect runs and log the current count to the browser’s JavaScript console.\nThis use of useEffect is similar to if you had passed this same function into both the\ncomponentDidMount() and the componentDidUpdate() lifecycle methods in a class component.\nHowever, there is an important difference between these lifecycle methods and how useEffect\nworks. Namely, the timing of when a class component’s lifecycle methods run and when useEffect\nruns are different. Most of the time this isn’t an issue, but in some cases it can cause problems or\nglitches in the layout in the browser. I’ll discuss this and how to solve it when I cover the\nuseLayoutEffect hook.\nCleaning Up After Effects",
		"works. Namely, the timing of when a class component’s lifecycle methods run and when useEffect\nruns are different. Most of the time this isn’t an issue, but in some cases it can cause problems or\nglitches in the layout in the browser. I’ll discuss this and how to solve it when I cover the\nuseLayoutEffect hook.\nCleaning Up After Effects\nIf you use useEffect to set up subscriptions, set event listeners, or create timers, you run\nthe risk of introducing memory leaks into your React application. In class components, the\ncomponentWillUnmount() lifecycle method is used for cleaning up and avoiding memory leaks, as\nyou saw in Chapter 4.\nTo clean up after effects in function components you can return a function from the function passed\ninto useEffect. This function will run before the component is removed from the user interface. In\naddition, it will also run before every update of the component.",
		"componentWillUnmount() lifecycle method is used for cleaning up and avoiding memory leaks, as\nyou saw in Chapter 4.\nTo clean up after effects in function components you can return a function from the function passed\ninto useEffect. This function will run before the component is removed from the user interface. In\naddition, it will also run before every update of the component.\nAlthough it may seem inefficient for the cleanup function to run before every update of a component,\nif you think about how function components work, you’ll understand why this is necessary. Since\nJavaScript functions aren’t persistent, effects will run every time a component renders. If you’re creat-\ning a subscription to a data source, or a timer, this means that a new timer or subscription will be\n266 ❘ CHAPTER 11 IntroducIng Hooks\ncreated each time the component renders. If it renders multiple times and there’s nothing cleaning up\nthe multiple timers or subscriptions, you’ll have a memory leak.",
		"ing a subscription to a data source, or a timer, this means that a new timer or subscription will be\n266 ❘ CHAPTER 11 IntroducIng Hooks\ncreated each time the component renders. If it renders multiple times and there’s nothing cleaning up\nthe multiple timers or subscriptions, you’ll have a memory leak.\nUsing a cleanup function in useEffect is optional.\nCustomizing useEffect\nThere are times when you don’t want to run an effect on every render, but instead only on the initial\nrender, or only when a specific value changes. To customize the behavior of useEffect, you can pass\nit an optional second argument. The second argument is an array of values that the effect depends on.\nFor example, Listing 11-4 shows a component that starts a timer and uses the default\nuseEffect behavior. With the default useEffect behavior, this timer is re- created each time the\ncomponent renders.\nLISTING 11- 4: Starting a timer with each render\nimport {useEffect} from 'react';\nfunction TimerFun(){",
		"For example, Listing 11-4 shows a component that starts a timer and uses the default\nuseEffect behavior. With the default useEffect behavior, this timer is re- created each time the\ncomponent renders.\nLISTING 11- 4: Starting a timer with each render\nimport {useEffect} from 'react';\nfunction TimerFun(){\nuseEffect(() => {\nlet time = 0;\nconst interval = setInterval(() => {\nconsole.log(time++);\n}, 1000);\nreturn () => clearInterval(interval);\n});\nreturn (<p>Check the console to see the timer.</p>);\n}\nexport default TimerFun;\nSince this component doesn’t use state or accept any props, there’s no reason for it to re- render, so the\ntimer will continue to increment and log a higher number each second for as long as the component is\nmounted in the browser window.\nIf this component were to re-r ender, however, the default behavior of useEffect would cause the\ncleanup function to run and a new timer to be created with each render, as shown in Listing 11-5.",
		"timer will continue to increment and log a higher number each second for as long as the component is\nmounted in the browser window.\nIf this component were to re-r ender, however, the default behavior of useEffect would cause the\ncleanup function to run and a new timer to be created with each render, as shown in Listing 11-5.\nLISTING 11- 5: Creating a new timer with each render\nimport {useEffect,useState} from 'react';\nfunction TimerRestartFun(props){\nconst [count,setCount] = useState(0);\nThe Built-i n Hooks ❘ 267\nuseEffect(() => {\nlet time = 0;\nconst interval = setInterval(() => {\nconsole.log(time++);\n}, 1000);\nreturn () => clearInterval(interval);\n});\nreturn (\n<p>Check the console to see the timer.\n<button onClick={()=>setCount((prev)=>prev+1)}>{count}</button>\n</p>\n);\n}\nexport default TimerRestartFun;\nEach time you click the button in the preceding example component, the state changes and the return",
		"useEffect(() => {\nlet time = 0;\nconst interval = setInterval(() => {\nconsole.log(time++);\n}, 1000);\nreturn () => clearInterval(interval);\n});\nreturn (\n<p>Check the console to see the timer.\n<button onClick={()=>setCount((prev)=>prev+1)}>{count}</button>\n</p>\n);\n}\nexport default TimerRestartFun;\nEach time you click the button in the preceding example component, the state changes and the return\nvalue changes, which causes the component to render, which causes a new timer to start, as shown in\nFigure 11-3.\nFIGURE 11- 3: Starting a new timer with each render\nBut what if you want to create a game that runs a timer to test how quickly you can click the button?\nOne way to do this would be to only start the timer after the component first mounts, rather than\nafter every render. The way to do this with useEffect is to pass it an empty array as the second argu-\nment, as shown in Listing 11-6.\n268 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11- 6: Passing an empty array to only run useEffect on mount",
		"One way to do this would be to only start the timer after the component first mounts, rather than\nafter every render. The way to do this with useEffect is to pass it an empty array as the second argu-\nment, as shown in Listing 11-6.\n268 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11- 6: Passing an empty array to only run useEffect on mount\nimport {useEffect,useState} from 'react';\nfunction TimerOnceFun(props){\nconst [count,setCount] = useState(0);\nuseEffect(() => {\nlet time = 0;\nconst interval = setInterval(() => {\nconsole.log(time++);\nif(time===10){\nconsole.log(`time's up!`);\nclearInterval(interval);\n}\n}, 1000);\nreturn () => clearInterval(interval);\n},[]);\nreturn (<p>Check the console to see the timer.\n<button onClick={()=>setCount((prev)=>prev+1)}>{count}</button>\n</p>);\n}\nexport default TimerOnceFun;\nWith the effect only running when the component mounts, the render caused by incrementing the\ncount variable no longer creates a new timer, as shown in Figure 11-4.",
		"clearInterval(interval);\n}\n}, 1000);\nreturn () => clearInterval(interval);\n},[]);\nreturn (<p>Check the console to see the timer.\n<button onClick={()=>setCount((prev)=>prev+1)}>{count}</button>\n</p>);\n}\nexport default TimerOnceFun;\nWith the effect only running when the component mounts, the render caused by incrementing the\ncount variable no longer creates a new timer, as shown in Figure 11-4.\nFIGURE 11- 4: Running an effect only after mounting\nThe Built-i n Hooks ❘ 269\nPassing an empty array as the second argument of useEffect causes it to simulate the behavior of\nthe componentDidMount() lifecycle method, and makes it a good place to put fetch requests for\ndata that won’t change during the life of the component, for example. The empty dependency array\nworks because the dependency array’s job is to say, “run the function when one of these values has\nchanged.” If there are no values in the dependency array, the effect only runs when it’s first created.",
		"the componentDidMount() lifecycle method, and makes it a good place to put fetch requests for\ndata that won’t change during the life of the component, for example. The empty dependency array\nworks because the dependency array’s job is to say, “run the function when one of these values has\nchanged.” If there are no values in the dependency array, the effect only runs when it’s first created.\nBut, what if you wanted to change the game so that the timer could be restarted when the user wants,\nor when the count gets up to a certain number, for example? What you need is to conditionally run\nuseEffect. To do this, you can make useEffect depend on one or more values that will determine\nwhen it runs, as shown in Listing 11-7.\nLISTING 11- 7: Specifying useEffect’s dependencies\nimport {useEffect,useState} from 'react';\nfunction TimerConditionalFun(props){\nconst [count,setCount] = useState(0);\nconst [gameNumber,setGameNumber] = useState(0);\nuseEffect(() => {\nlet time = 0;",
		"useEffect. To do this, you can make useEffect depend on one or more values that will determine\nwhen it runs, as shown in Listing 11-7.\nLISTING 11- 7: Specifying useEffect’s dependencies\nimport {useEffect,useState} from 'react';\nfunction TimerConditionalFun(props){\nconst [count,setCount] = useState(0);\nconst [gameNumber,setGameNumber] = useState(0);\nuseEffect(() => {\nlet time = 0;\nconst interval = setInterval(() => {\nconsole.log(time++);\nif(time===10){\nconsole.log(`time's up!`);\nclearInterval(interval);\n}\n}, 1000);\nreturn () => clearInterval(interval);\n},[gameNumber]);\nreturn (\n<>\n<h1>Game Number {gameNumber}</h1>\n<p>Click as fast as you can!\n<button onClick={()=>setCount((prev)=>prev+1)}>{count}</button>\n</p>\n<p>\n<button onClick={()=>setGameNumber((prev)=>prev+1)}>New Game</button>\n</p>\n</>\n);\n}\nexport default TimerConditionalFun;\nWhen the component in Listing 11-7 mounts, the timer will start, and it will only be restarted when\nthe value of gameNumber changes.",
		"<>\n<h1>Game Number {gameNumber}</h1>\n<p>Click as fast as you can!\n<button onClick={()=>setCount((prev)=>prev+1)}>{count}</button>\n</p>\n<p>\n<button onClick={()=>setGameNumber((prev)=>prev+1)}>New Game</button>\n</p>\n</>\n);\n}\nexport default TimerConditionalFun;\nWhen the component in Listing 11-7 mounts, the timer will start, and it will only be restarted when\nthe value of gameNumber changes.\n270 ❘ CHAPTER 11 IntroducIng Hooks\nEven when the benefits and results of conditionally running an effect aren’t as apparent as those\nin Listing 11-7, specifying the dependencies of an effect can often be a way to increase the perfor-\nmance of your user interface by eliminating unnecessary renders of components, as you’ll see in the\nnext section.\nRunning Asynchronous Code with useEffect\nBecause useEffect is asynchronous and runs after the component has rendered, it’s the ideal place to\nperform asynchronous tasks such as fetching data. Listing 11-8 shows a postal code lookup compo-",
		"mance of your user interface by eliminating unnecessary renders of components, as you’ll see in the\nnext section.\nRunning Asynchronous Code with useEffect\nBecause useEffect is asynchronous and runs after the component has rendered, it’s the ideal place to\nperform asynchronous tasks such as fetching data. Listing 11-8 shows a postal code lookup compo-\nnent that uses an effect hook to look up the U.S. city and state whenever the ZIP code entered into an\ninput field changes.\nLISTING 11- 8: Asynchronous requests with useEffect\nimport {useEffect, useState} from 'react';\nfunction ShippingAddress(props){\nconst [zipcode,setZipcode] = useState('');\nconst [city,setCity] = useState('');\nconst [state,setState] = useState('');\nconst API_URL = 'https://api.zip-\ncodes.com/ZipCodesAPI.svc/1.0/QuickGetZipCodeDetails/';\nconst API_KEY = 'DEMOAPIKEY';\nconst updateZip = (e)=>{\ne.preventDefault();\nsetZipcode(e.target.zipcode.value);\n}\nuseEffect(()=>{\nif (zipcode){\nconst loadAddressData = async ()=>{",
		"const [zipcode,setZipcode] = useState('');\nconst [city,setCity] = useState('');\nconst [state,setState] = useState('');\nconst API_URL = 'https://api.zip-\ncodes.com/ZipCodesAPI.svc/1.0/QuickGetZipCodeDetails/';\nconst API_KEY = 'DEMOAPIKEY';\nconst updateZip = (e)=>{\ne.preventDefault();\nsetZipcode(e.target.zipcode.value);\n}\nuseEffect(()=>{\nif (zipcode){\nconst loadAddressData = async ()=>{\nconst response = await fetch(`${API_URL}${zipcode}?key=${API_KEY}`);\nconst data = await response.json();\nsetCity(data.City);\nsetState(data.State);\n}\nloadAddressData();\n}\n},[zipcode]);\nreturn (\n<form onSubmit={updateZip}>\nZipcode: <input type=\"text\" name=\"zipcode\" />\n<button type=\"submit\">Lookup City/State</button><br />\nCity: {city}<br />\nState: {state}<br />\nThe Built-i n Hooks ❘ 271\n</form>\n)\n}\nexport default ShippingAddress;\nThe result of running the component in Listing 11-8 is shown in Figure 11-5.\nFIGURE 11- 5: Performing an asynchronous request using useEffect",
		"return (\n<form onSubmit={updateZip}>\nZipcode: <input type=\"text\" name=\"zipcode\" />\n<button type=\"submit\">Lookup City/State</button><br />\nCity: {city}<br />\nState: {state}<br />\nThe Built-i n Hooks ❘ 271\n</form>\n)\n}\nexport default ShippingAddress;\nThe result of running the component in Listing 11-8 is shown in Figure 11-5.\nFIGURE 11- 5: Performing an asynchronous request using useEffect\nThis example uses a number of the techniques that you’ve learned about in the last couple of\nchapters, plus a couple of new ones, so let’s take a walk through the code step by step:\n1. On its initial render, the zipcode, city, and state variables are set to empty strings. The\nuseEffect hook runs, but the conditional statement that checks whether zipcode has a\nvalue that evaluates to a Boolean true prevents the inner function, loadAddress(), from\nbeing created or running.\n2. The user can enter text into an uncontrolled input. Because the input is uncontrolled, it",
		"1. On its initial render, the zipcode, city, and state variables are set to empty strings. The\nuseEffect hook runs, but the conditional statement that checks whether zipcode has a\nvalue that evaluates to a Boolean true prevents the inner function, loadAddress(), from\nbeing created or running.\n2. The user can enter text into an uncontrolled input. Because the input is uncontrolled, it\ndoesn’t cause the UI to render and useEffect doesn’t run. If this input were controlled, the\neffect would run on each keystroke because the value of zipcode would be changing.\n3. When the user clicks the button, the zipcode state variable is set by the\nupdateZip() function.\n4. The change to the zipcode variable causes a render. Because zipcode is listed as a depend-\nency for the useEffect hook, the effect runs.\n272 ❘ CHAPTER 11 IntroducIng Hooks\n5. This time, zipcode has a value that evaluates to true, so the inner function is created and\nthen runs.",
		"3. When the user clicks the button, the zipcode state variable is set by the\nupdateZip() function.\n4. The change to the zipcode variable causes a render. Because zipcode is listed as a depend-\nency for the useEffect hook, the effect runs.\n272 ❘ CHAPTER 11 IntroducIng Hooks\n5. This time, zipcode has a value that evaluates to true, so the inner function is created and\nthen runs.\n6. The loadAddress() function is an async function. Using the async keyword before the\nfunction definition allows the function to use the await statement to perform asynchro-\nnous tasks. In the case of this function, it will call the fetch command and then wait for\na response. When a response is received, the json() command reads the response into an\nobject named data.\n7. The data from the API is used to set the values of the city and state stateful variables. This\ncauses another render of the component. The zipcode hasn’t changed, so the useEffect\nhook won’t run.",
		"nous tasks. In the case of this function, it will call the fetch command and then wait for\na response. When a response is received, the json() command reads the response into an\nobject named data.\n7. The data from the API is used to set the values of the city and state stateful variables. This\ncauses another render of the component. The zipcode hasn’t changed, so the useEffect\nhook won’t run.\nThis component illustrates how to use effect dependencies to eliminate unnecessary renders, which\nare one of the most common types of performance problems in React components. It’s possible that\nthis component would still function without the dependency array, but it would make many unnec-\nessary API requests, which would slow down your component (at the least) and possibly cost you\nmoney if the API charges you for requests.\nSubscribing to Global Data with useContext\nGlobal data is data that’s used by all or many components in a program, such as a theme or user pref-",
		"this component would still function without the dependency array, but it would make many unnec-\nessary API requests, which would slow down your component (at the least) and possibly cost you\nmoney if the API charges you for requests.\nSubscribing to Global Data with useContext\nGlobal data is data that’s used by all or many components in a program, such as a theme or user pref-\nerences. It can be a hassle to have to pass global data from parent components to child components\nfor every component in an React app—e specially when your component tree has multiple levels.\nReact Context provides a way to share global data between components without having to manually\npass values as props. The useContext hook accepts a Context object as its argument and returns the\nmost recent value of that object.\nNOTE Chapter 17 covers the React Context API in detail, along with when and\nexactly how to use it.\nOne example of global data that can be passed to child components using Context is a style",
		"pass values as props. The useContext hook accepts a Context object as its argument and returns the\nmost recent value of that object.\nNOTE Chapter 17 covers the React Context API in detail, along with when and\nexactly how to use it.\nOne example of global data that can be passed to child components using Context is a style\ntheme. A theme refers to styles that are used by multiple components to give them a common look\nwithin an app.\nListing 11-9 shows an example of using the useContext hook in the child component to subscribe to\na Context object.\nLISTING 11- 9: Using Context with the useContext hook\nimport { ThemeContext } from './theme-c ontext'\nfunction App() {\nconst { theme } = React.useContext(ThemeContext)\nThe Built-i n Hooks ❘ 273\nreturn (\n<>\n<header\nclassName=\"App- header\"\nstyle={{ backgroundColor: theme.backgroundColor, color: theme.color }}\n>\n<h1>Welcome to my app.</h1>\n</header>\n</>\n)\n}\nexport default App;\nCombining Logic and State with useReducer",
		"import { ThemeContext } from './theme-c ontext'\nfunction App() {\nconst { theme } = React.useContext(ThemeContext)\nThe Built-i n Hooks ❘ 273\nreturn (\n<>\n<header\nclassName=\"App- header\"\nstyle={{ backgroundColor: theme.backgroundColor, color: theme.color }}\n>\n<h1>Welcome to my app.</h1>\n</header>\n</>\n)\n}\nexport default App;\nCombining Logic and State with useReducer\nThe useReducer hook is an alternative to useState that’s useful for complex state updates or situa-\ntions where the new state depends on the previous state. Whereas useState takes just an initial state\nas its argument, useReducer takes an initial state and a reducer as its arguments. A reducer is a pure\nfunction that takes the current state and an object called an action and returns the new state. In other\nwords, here’s the signature of a reducer function:\n(state, action) => newState\nThe useReducer hook returns a value and a dispatch function. A dispatch function can be used",
		"as its argument, useReducer takes an initial state and a reducer as its arguments. A reducer is a pure\nfunction that takes the current state and an object called an action and returns the new state. In other\nwords, here’s the signature of a reducer function:\n(state, action) => newState\nThe useReducer hook returns a value and a dispatch function. A dispatch function can be used\nin response to events, but instead of taking a value to set the stateful variable to, it takes an action\nobject. An action object has a type and an optional payload.\nUsing reducers is quite a bit more complicated than simple state updates, but once you see some\nexamples, they become much clearer. Listing 11-10 shows our old friend the Counter component, but\nrewritten to use a reducer.\nLISTING 11- 10: A Counter with useReducer\nimport {useReducer} from 'react';\nconst initialState = {count: 0};\nfunction reducer(state, action) {\nswitch (action.type) {\ncase 'increment':\nreturn {count: state.count + 1};",
		"examples, they become much clearer. Listing 11-10 shows our old friend the Counter component, but\nrewritten to use a reducer.\nLISTING 11- 10: A Counter with useReducer\nimport {useReducer} from 'react';\nconst initialState = {count: 0};\nfunction reducer(state, action) {\nswitch (action.type) {\ncase 'increment':\nreturn {count: state.count + 1};\ncase 'decrement':\nreturn {count: state.count - 1};\ndefault:\nthrow new Error();\n}\n}\nfunction Counter() {\nconst [state, dispatch] = useReducer(reducer, initialState);\ncontinues\n274 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 1-10 (continued)\nreturn (\n<>\nCount: {state.count}\n<button onClick={() => dispatch({type: 'decrement'})}>-< /button>\n<button onClick={() => dispatch({type: 'increment'})}>+</button>\n</>\n);\n}\nexport default Counter;\nIn Listing 11-10, the action only has a type property. But, if you wanted to have a more advanced\ncounter, you could add a payload that could be used to indicate how much to increment or decrement",
		"return (\n<>\nCount: {state.count}\n<button onClick={() => dispatch({type: 'decrement'})}>-< /button>\n<button onClick={() => dispatch({type: 'increment'})}>+</button>\n</>\n);\n}\nexport default Counter;\nIn Listing 11-10, the action only has a type property. But, if you wanted to have a more advanced\ncounter, you could add a payload that could be used to indicate how much to increment or decrement\nthe counter by, as shown in Listing 11-11.\nLISTING 11- 11: Passing a payload to a reducer\nimport {useReducer} from 'react';\nconst initialState = {count: 0};\nfunction reducer(state, action) {\nswitch (action.type) {\ncase 'increment':\nreturn {count: state.count + action.payload};\ncase 'decrement':\nreturn {count: state.count - action.payload};\ndefault:\nthrow new Error();\n}\n}\nfunction Counter() {\nconst [state, dispatch] = useReducer(reducer, initialState);\nreturn (\n<>\nCount: {state.count}\n<button onClick={() => dispatch({type: 'decrement', payload:4})}>- 4</\nbutton>",
		"switch (action.type) {\ncase 'increment':\nreturn {count: state.count + action.payload};\ncase 'decrement':\nreturn {count: state.count - action.payload};\ndefault:\nthrow new Error();\n}\n}\nfunction Counter() {\nconst [state, dispatch] = useReducer(reducer, initialState);\nreturn (\n<>\nCount: {state.count}\n<button onClick={() => dispatch({type: 'decrement', payload:4})}>- 4</\nbutton>\n<button onClick={() => dispatch({type: 'increment', payload:4})}>+4</\nbutton>\n</>\n);\n}\nexport default Counter;\nThe Built-i n Hooks ❘ 275\nMemoized Callbacks with useCallback\nFunctions that you define in components are normally re- created with each render. This is\nnot usually a problem. However, sometimes you do need to (or should for performance reasons)\nreturn a memoized version of a function to keep it available between renderings. This is where\nuseCallback comes in.\nListing 11-12 shows the most common use case for useCallback. In this example, the useEffect",
		"Functions that you define in components are normally re- created with each render. This is\nnot usually a problem. However, sometimes you do need to (or should for performance reasons)\nreturn a memoized version of a function to keep it available between renderings. This is where\nuseCallback comes in.\nListing 11-12 shows the most common use case for useCallback. In this example, the useEffect\nhook should call a function passed into it (which we call a callback function) when the value of\nthe phoneNumber variable changes. The useEffect hook has two dependencies—t he function and\nthe variable.\nBecause callback functions are re-c reated on each render, the effect in this example will still call its\ninternal function each time the component renders.\nListing 11- 12 Function dependencies cause unnecessary renders\nimport {useEffect,useState,useRef} from 'react';\nfunction CallMe(props){\nconst [phoneNumber,setPhoneNumber] = useState();\nconst [currentNumber,setCurrentNumber] = useState();",
		"Because callback functions are re-c reated on each render, the effect in this example will still call its\ninternal function each time the component renders.\nListing 11- 12 Function dependencies cause unnecessary renders\nimport {useEffect,useState,useRef} from 'react';\nfunction CallMe(props){\nconst [phoneNumber,setPhoneNumber] = useState();\nconst [currentNumber,setCurrentNumber] = useState();\nconst phoneInputRef = useRef();\nconst handleClick = (e)=>{\nsetPhoneNumber(currentNumber);\n}\nconst placeCall = () => {\nif(currentNumber){\nconsole.log(`dialing ${currentNumber}`);\n}\n};\nuseEffect(() => {\nplaceCall(phoneNumber);\n},[phoneNumber,placeCall]);\nreturn(\n<>\n<label>Enter the number to call:</label>\n<input type=\"phone\" ref={phoneInputRef}\nonChange={()=>{setCurrentNumber(phoneInputRef.current.value)}}/>\n<button onClick={handleClick}>\nPlace Call\n</button>\ncontinues\n276 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11-12 (continued)\n<h1>{currentNumber}</h1>\n</>\n);\n}\nexport default CallMe;",
		"placeCall(phoneNumber);\n},[phoneNumber,placeCall]);\nreturn(\n<>\n<label>Enter the number to call:</label>\n<input type=\"phone\" ref={phoneInputRef}\nonChange={()=>{setCurrentNumber(phoneInputRef.current.value)}}/>\n<button onClick={handleClick}>\nPlace Call\n</button>\ncontinues\n276 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11-12 (continued)\n<h1>{currentNumber}</h1>\n</>\n);\n}\nexport default CallMe;\nIf you try to run the preceding component using Create React App, you’ll get a warning in the con-\nsole, as shown in Figure 11-6.\nFIGURE 11- 6: Unnecessary renders warning due to a function dependency\nWhen you type into the input field, you’ll see that the placeCall() function is called each time the\ncomponent renders, which happens every time you type a character.\nAs the warning message tells you, there are two solutions to this problem. The first is to just define\nthe placeCall() function inside of the useEffect hook and then remove it from the dependencies\nlist, like this:\nuseEffect(() => {",
		"When you type into the input field, you’ll see that the placeCall() function is called each time the\ncomponent renders, which happens every time you type a character.\nAs the warning message tells you, there are two solutions to this problem. The first is to just define\nthe placeCall() function inside of the useEffect hook and then remove it from the dependencies\nlist, like this:\nuseEffect(() => {\nconst placeCall = () => {\nif(phoneNumber){\nconsole.log(`dialing ${phoneNumber}`);\n}\n};\nThe Built-i n Hooks ❘ 277\nplaceCall(phoneNumber);\n},[phoneNumber]);\nThe other solution, which is the correct one if you’re going to use the placeCall() function in more\nthan one place, is to memoize the callback function using useCallback, like this:\nconst placeCall = useCallback(() => {\nif(phoneNumber){\nconsole.log(`dialing ${phoneNumber}`);\n}\n},[phoneNumber]);\nThe useCallback hook creates a persistent version of the function that will only be re- created when",
		"The other solution, which is the correct one if you’re going to use the placeCall() function in more\nthan one place, is to memoize the callback function using useCallback, like this:\nconst placeCall = useCallback(() => {\nif(phoneNumber){\nconsole.log(`dialing ${phoneNumber}`);\n}\n},[phoneNumber]);\nThe useCallback hook creates a persistent version of the function that will only be re- created when\nthe phoneNumber variable changes. With this change, the useEffect hook will behave the way you\nwant it to—o nly calling the inner function when the value of phoneNumber changes— as shown in\nListing 11-13.\nLISTING 11- 13: Memoized callbacks fix the unnecessary effect problem\nimport {useEffect,useState,useRef,useCallback} from 'react';\nfunction CallMe(props){\nconst [phoneNumber,setPhoneNumber] = useState();\nconst [currentNumber,setCurrentNumber] = useState();\nconst phoneInputRef = useRef();\nconst handleClick = (e)=>{\nsetPhoneNumber(currentNumber);\n}\nconst placeCall = useCallback(() => {",
		"LISTING 11- 13: Memoized callbacks fix the unnecessary effect problem\nimport {useEffect,useState,useRef,useCallback} from 'react';\nfunction CallMe(props){\nconst [phoneNumber,setPhoneNumber] = useState();\nconst [currentNumber,setCurrentNumber] = useState();\nconst phoneInputRef = useRef();\nconst handleClick = (e)=>{\nsetPhoneNumber(currentNumber);\n}\nconst placeCall = useCallback(() => {\nif(phoneNumber){\nconsole.log(`dialing ${phoneNumber}`);\n}\n},[phoneNumber]);\nuseEffect(() => {\nplaceCall(phoneNumber);\n},[phoneNumber,placeCall]);\nreturn(\n<>\n<label>Enter the number to call:</label>\n<input type=\"phone\"\nref={phoneInputRef}\nonChange={()=>{setCurrentNumber(phoneInputRef.current.value)}}\n/>\n<button onClick={handleClick}>\nPlace Call\ncontinues\n278 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11-13 (continued)\n</button>\n<h1>{currentNumber}</h1>\n</>\n);\n}\nexport default CallMe;\nCaching Computed Values with useMemo",
		"return(\n<>\n<label>Enter the number to call:</label>\n<input type=\"phone\"\nref={phoneInputRef}\nonChange={()=>{setCurrentNumber(phoneInputRef.current.value)}}\n/>\n<button onClick={handleClick}>\nPlace Call\ncontinues\n278 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11-13 (continued)\n</button>\n<h1>{currentNumber}</h1>\n</>\n);\n}\nexport default CallMe;\nCaching Computed Values with useMemo\nThe useMemo hook memoizes (caches) values between renderings of a function component. It works\nthe same way as useCallback, except that it can cache any value type, not just functions.\nAs with useCallback, there are two reason to use useMemo:\n➤➤ To solve problems with unnecessary renders.\n➤➤ To solve performance problems related to computationally expensive calculations.\nSolving Unnecessary Renders\nI covered the first case already in the “Memoized Callbacks with useCallback” section. The issue\ncomes up when you have an object, array, or function serve as a dependency for a function that",
		"➤➤ To solve problems with unnecessary renders.\n➤➤ To solve performance problems related to computationally expensive calculations.\nSolving Unnecessary Renders\nI covered the first case already in the “Memoized Callbacks with useCallback” section. The issue\ncomes up when you have an object, array, or function serve as a dependency for a function that\nshould only be run when its dependencies change.\nIn JavaScript, when you create two objects (or functions, or arrays) with exactly the same properties,\nthe two objects are not equal to each other. You can test this by opening your browser’s JavaScript\nconsole and executing the following expressions:\n{} === {}\n[] === []\n() => {} === () => {}\nIn each case, the result will be false, as shown in Figure 11-7.\nFIGURE 11- 7: Testing referential equality\nThe Built-i n Hooks ❘ 279\nBecause of this, using an object, array, or function in a dependency array will result in the function",
		"console and executing the following expressions:\n{} === {}\n[] === []\n() => {} === () => {}\nIn each case, the result will be false, as shown in Figure 11-7.\nFIGURE 11- 7: Testing referential equality\nThe Built-i n Hooks ❘ 279\nBecause of this, using an object, array, or function in a dependency array will result in the function\nrunning on every render of the function component. Just as useCallback is the solution for callback\nfunctions, useMemo is the solution to unnecessary renders due to object or array dependencies.\nSolving Performance Problems\nNormally, JavaScript (and therefore calculations within React) is very fast. However, in rare cases, or\nwhen you do encounter a performance problem due to a computationally expensive operation,\nuseMemo can be used to solve it.\nFor example, the component in Listing 11-14 generates a chart from a large set of data. By using\nuseMemo to cache the chart, you can prevent it from being regenerated each time the component ren-",
		"when you do encounter a performance problem due to a computationally expensive operation,\nuseMemo can be used to solve it.\nFor example, the component in Listing 11-14 generates a chart from a large set of data. By using\nuseMemo to cache the chart, you can prevent it from being regenerated each time the component ren-\nders. Instead, it will only be generated when the data supplied to it changes.\nLISTING 11- 14: Solving performance problems with useMemo\nimport {useMemo} from 'react';\nimport {chartGenerator} from 'some-c hart- library';\nfunction Chart(props){\nconst giantChart = useMemo(()=>{\nreturn chartGenerator(props.chartData);\n},[props.chartData]);\nreturn {giantChart};\n}\nexport default Chart;\nAccessing Children Imperatively with useRef\nThe useRef hook returns a ref object with a mutable property named current. One use for a ref\nobject is to imperatively access the DOM. When a DOM node that a ref is attached to changes, the",
		"function Chart(props){\nconst giantChart = useMemo(()=>{\nreturn chartGenerator(props.chartData);\n},[props.chartData]);\nreturn {giantChart};\n}\nexport default Chart;\nAccessing Children Imperatively with useRef\nThe useRef hook returns a ref object with a mutable property named current. One use for a ref\nobject is to imperatively access the DOM. When a DOM node that a ref is attached to changes, the\nref object’s current property is updated. Changes to a ref do not cause the component to re- render.\nListing 11-15 shows a component that uses a ref to get the value of an uncontrolled <textarea> in\norder to count the number of words in it.\nLISTING 11- 15: Getting the value of a textarea and counting its words\nimport {useState,useRef} from 'react';\nfunction WordCount(props){\nconst textAreaRef = useRef();\nconst [wordCount,setWordCount] = useState(0);\ncontinues\n280 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11-15 (continued)\nconst countWords = () => {\nconst text = textAreaRef.current.value;",
		"order to count the number of words in it.\nLISTING 11- 15: Getting the value of a textarea and counting its words\nimport {useState,useRef} from 'react';\nfunction WordCount(props){\nconst textAreaRef = useRef();\nconst [wordCount,setWordCount] = useState(0);\ncontinues\n280 ❘ CHAPTER 11 IntroducIng Hooks\nLISTING 11-15 (continued)\nconst countWords = () => {\nconst text = textAreaRef.current.value;\nsetWordCount(text.split(\" \").length);\n}\nreturn (\n<>\n<textarea ref={textAreaRef} /><br />\n<button onClick={countWords}>Count Words</button>\n<p>{wordCount} words.</p>\n</>\n)\n}\nexport default WordCount;\nCustomizing Exposed Values with useImperativeHandle\nThe useImperativeHandle hook lets you create a “handle” or custom name for a value exposed to a\nparent component using a ref. This is useful when using React.forwardRef to forward a ref attrib-\nute from one component to its child.\nFor example, in Listing 11-16, a component called CountingBox is created that contains a",
		"}\nexport default WordCount;\nCustomizing Exposed Values with useImperativeHandle\nThe useImperativeHandle hook lets you create a “handle” or custom name for a value exposed to a\nparent component using a ref. This is useful when using React.forwardRef to forward a ref attrib-\nute from one component to its child.\nFor example, in Listing 11-16, a component called CountingBox is created that contains a\n<textarea>. The ref attribute passed into the CountingBox component will be forwarded and\nattached to the <textarea>. The useImperativeHandle hook is then used to make a new property\nof the ref.current object (called count in this case) available to the parent component.\nLISTING 11- 16: Customizing a value exposed by a ref\nimport {useState,useRef,useImperativeHandle,forwardRef} from 'react';\nconst CountingBox = forwardRef((props, ref) => {\nconst [text,setText] = useState('');\nuseImperativeHandle(ref, () => {\nreturn {count: text.split(\" \").length}\n},[text]);\nreturn (\n<>",
		"of the ref.current object (called count in this case) available to the parent component.\nLISTING 11- 16: Customizing a value exposed by a ref\nimport {useState,useRef,useImperativeHandle,forwardRef} from 'react';\nconst CountingBox = forwardRef((props, ref) => {\nconst [text,setText] = useState('');\nuseImperativeHandle(ref, () => {\nreturn {count: text.split(\" \").length}\n},[text]);\nreturn (\n<>\n<textarea value={text} onChange={(e)=>setText(e.target.value)} />\n</>);\n});\nfunction TextEdit(props){\nconst countingBoxRef = useRef();\nconst [wordCount,setWordCount] = useState(0);\nWriting Custom Hooks ❘ 281\nconst handleClick = (count) => {\nsetWordCount(count)\n}\nreturn (\n<>\n<CountingBox ref={countingBoxRef} /><br />\n<button onClick={()=>handleClick(countingBoxRef.current.count)}>\ncount words\n</button><br />\ncurrent count: {wordCount}<br />\n</>\n)\n}\nexport default TextEdit;\nNOTE Notice that useImperativeHandle has a third argument, which is a",
		"Writing Custom Hooks ❘ 281\nconst handleClick = (count) => {\nsetWordCount(count)\n}\nreturn (\n<>\n<CountingBox ref={countingBoxRef} /><br />\n<button onClick={()=>handleClick(countingBoxRef.current.count)}>\ncount words\n</button><br />\ncurrent count: {wordCount}<br />\n</>\n)\n}\nexport default TextEdit;\nNOTE Notice that useImperativeHandle has a third argument, which is a\ndependency array (similar to that used by useEffect, useCallback, and\nuseMemo). In the current version of React, useImperativeHandle memoizes the\nvalue of the handle, which can be a problem if you’re trying to get an updated\nvalue (as in this case). Specifying a dependency that changes with each render\nsolves the problem.\nThe useImperativeHandle hook is the least important hook to fully understand. In most cases, any-\nthing you want to do using useImperativeHandle can be better done by passing props from parent\ncomponents to child components.\nUpdating the DOM Synchronously with useLayoutEffect",
		"value (as in this case). Specifying a dependency that changes with each render\nsolves the problem.\nThe useImperativeHandle hook is the least important hook to fully understand. In most cases, any-\nthing you want to do using useImperativeHandle can be better done by passing props from parent\ncomponents to child components.\nUpdating the DOM Synchronously with useLayoutEffect\nThe useLayoutEffect hook is identical to useEffect in every way, except in when and how it exe-\ncutes. Whereas useEffect runs its functions asynchronously (that is, without blocking anything else)\nafter the component appears in the browser, useLayoutEffect runs its function before the DOM is\npainted to the browser, and it runs synchronously.\nThe useLayoutEffect hook can be used in cases where an effect results in changes to the DOM and\nwhere the useEffect hook may cause flicker or inconsistent display of the results.\nWRITING CUSTOM HOOKS",
		"after the component appears in the browser, useLayoutEffect runs its function before the DOM is\npainted to the browser, and it runs synchronously.\nThe useLayoutEffect hook can be used in cases where an effect results in changes to the DOM and\nwhere the useEffect hook may cause flicker or inconsistent display of the results.\nWRITING CUSTOM HOOKS\nCustom hooks are functions that make use of the built- in hooks to encapsulate reusable functional-\nity. Many different custom hooks have been written and are available for free on the web, either by\nthemselves as standalone components, or as features within React libraries. You can also write your\nown custom hooks.\n282 ❘ CHAPTER 11 IntroducIng Hooks\nCustom hooks, like the built-i n hooks, have names that start with use. This is a helpful convention\nrather than a requirement. To write a custom hook, write a function that uses at least one built- in\nhook and export a value from the function.",
		"themselves as standalone components, or as features within React libraries. You can also write your\nown custom hooks.\n282 ❘ CHAPTER 11 IntroducIng Hooks\nCustom hooks, like the built-i n hooks, have names that start with use. This is a helpful convention\nrather than a requirement. To write a custom hook, write a function that uses at least one built- in\nhook and export a value from the function.\nListing 11-17 shows a custom hook based on the zipcode lookup component from earlier in this\nchapter. When imported into a component, useZipLookup will take a zipcode as its argument and\nreturn an array containing the corresponding city and state.\nLISTING 11- 17: useZipLookup: a custom hook to return location data based on a ZIP code\nimport {useEffect,useState} from 'react';\nfunction useZipLookup(zipcode){\nconst [city,setCity] = useState('');\nconst [state,setState] = useState('');\nconst API_URL = 'https://api.zip-\ncodes.com/ZipCodesAPI.svc/1.0/QuickGetZipCodeDetails/';",
		"return an array containing the corresponding city and state.\nLISTING 11- 17: useZipLookup: a custom hook to return location data based on a ZIP code\nimport {useEffect,useState} from 'react';\nfunction useZipLookup(zipcode){\nconst [city,setCity] = useState('');\nconst [state,setState] = useState('');\nconst API_URL = 'https://api.zip-\ncodes.com/ZipCodesAPI.svc/1.0/QuickGetZipCodeDetails/';\nconst API_KEY = 'DEMOAPIKEY';\nuseEffect(()=>{\nif (zipcode){\nconst loadAddressData = async ()=>{\nconst response = await fetch(`${API_URL}${zipcode}?key=${API_KEY}`);\nconst data = await response.json();\nsetCity(data.City);\nsetState(data.State);\n}\nloadAddressData();\n}\n},[zipcode]);\nreturn [city,state];\n}\nexport default useZipLookup;\nTo use the useZipLookup hook, import it into a component, pass it a ZIP code, and deconstruct the\nreturned array into two local variables, as shown in Listing 11-18.\nLISTING 11- 18: Using the useZipLookup custom hook\nimport {useRef,useState} from 'react';",
		"setCity(data.City);\nsetState(data.State);\n}\nloadAddressData();\n}\n},[zipcode]);\nreturn [city,state];\n}\nexport default useZipLookup;\nTo use the useZipLookup hook, import it into a component, pass it a ZIP code, and deconstruct the\nreturned array into two local variables, as shown in Listing 11-18.\nLISTING 11- 18: Using the useZipLookup custom hook\nimport {useRef,useState} from 'react';\nimport useZipLookup from './useZipLookup';\nfunction ShippingAddress2(props){\nconst [zipcode,setZipcode] = useState('');\nconst [city,state] = useZipLookup(zipcode);\nLabeling Custom Hooks with useDebugValue ❘ 283\nconst setZip = (e)=>{\ne.preventDefault();\nsetZipcode(e.target.zipcode.value);\n}\nreturn (\n<form onSubmit={setZip}>\nZipcode: <input type=\"text\" name=\"zipcode\" />\n<button type=\"submit\">Lookup City/State</button><br />\nCity: {city}<br />\nState: {state}<br />\n</form>\n)\n}\nexport default ShippingAddress2;\nBy creating the useZipLookup custom hook, we’ve made this functionality reusable and we simplified",
		"const setZip = (e)=>{\ne.preventDefault();\nsetZipcode(e.target.zipcode.value);\n}\nreturn (\n<form onSubmit={setZip}>\nZipcode: <input type=\"text\" name=\"zipcode\" />\n<button type=\"submit\">Lookup City/State</button><br />\nCity: {city}<br />\nState: {state}<br />\n</form>\n)\n}\nexport default ShippingAddress2;\nBy creating the useZipLookup custom hook, we’ve made this functionality reusable and we simplified\nthe component that outputs the user interface.\nLABELING CUSTOM HOOKS WITH USEDEBUGVALUE\nWhen you use a custom hook, it shows up in the React Developer Tools as a hook when you inspect a\ncomponent, as shown in Figure 11-8.\nFIGURE 11- 8: Inspecting a custom hook\nIt can be helpful for debugging in some cases to output a value from a custom hook. Normally, the\ntime- honored practice of JavaScript developers everywhere is to use console.log to output debug-\nging code to the console. However simple this may be, it doesn’t provide any context as to what\n284 ❘ CHAPTER 11 IntroducIng Hooks",
		"FIGURE 11- 8: Inspecting a custom hook\nIt can be helpful for debugging in some cases to output a value from a custom hook. Normally, the\ntime- honored practice of JavaScript developers everywhere is to use console.log to output debug-\nging code to the console. However simple this may be, it doesn’t provide any context as to what\n284 ❘ CHAPTER 11 IntroducIng Hooks\nfunction wrote the log message, unless you add that information into the console.log message.\nLogged messages tend to build up in your code over time, unless you’re careful about removing them\nwhen you no longer need them. But, when you remove them, you often end up adding them again\nwhen you’re debugging something related. Logging to the console, while essential sometimes, is less\nthan ideal.\nThe useDebugValue hook lets you export a value from a custom hook that will be visible next to the\nname of the hook in the React Developer Tools component inspector. This value can be anything you",
		"when you’re debugging something related. Logging to the console, while essential sometimes, is less\nthan ideal.\nThe useDebugValue hook lets you export a value from a custom hook that will be visible next to the\nname of the hook in the React Developer Tools component inspector. This value can be anything you\nwant. Listing 11-19 shows how to use useDebugValue in the useZipLookup component to display\nthe value of the zipcode parameter passed into it.\nLISTING 11- 19: Using useDebugValue\nimport {useEffect,useState,useDebugValue} from 'react';\nfunction useZipLookup(zipcode){\nconst [city,setCity] = useState('');\nconst [state,setState] = useState('');\nuseDebugValue(zipcode);\nconst API_URL = 'https://api.zip-\ncodes.com/ZipCodesAPI.svc/1.0/QuickGetZipCodeDetails/';\nconst API_KEY = 'DEMOAPIKEY';\nuseEffect(()=>{\nif (zipcode){\nconst loadAddressData = async ()=>{\nconst response = await fetch(`${API_URL}${zipcode}?key=${API_KEY}`);\nconst data = await response.json();\nsetCity(data.City);",
		"const [state,setState] = useState('');\nuseDebugValue(zipcode);\nconst API_URL = 'https://api.zip-\ncodes.com/ZipCodesAPI.svc/1.0/QuickGetZipCodeDetails/';\nconst API_KEY = 'DEMOAPIKEY';\nuseEffect(()=>{\nif (zipcode){\nconst loadAddressData = async ()=>{\nconst response = await fetch(`${API_URL}${zipcode}?key=${API_KEY}`);\nconst data = await response.json();\nsetCity(data.City);\nsetState(data.State);\n}\nloadAddressData();\n}\n},[zipcode]);\nreturn [city,state];\n}\nexport default useZipLookup;\nFigure 11-9 shows how the value from useDebugValue displays in the component inspector.\nThe useDebugValue hook can also optionally accept a formatting function as its second parameter.\nThis function receives the debug value and can be used for doing conversions or other formatting to\nthe debug value. The function only runs when the hook is actually being inspected.\nFinding and Using Custom Hooks ❘ 285\nFIGURE 11- 9: Viewing a Custom Hook’s debug value",
		"The useDebugValue hook can also optionally accept a formatting function as its second parameter.\nThis function receives the debug value and can be used for doing conversions or other formatting to\nthe debug value. The function only runs when the hook is actually being inspected.\nFinding and Using Custom Hooks ❘ 285\nFIGURE 11- 9: Viewing a Custom Hook’s debug value\nOne example of where using the formatting function is helpful would be a case where a date is stored\nas a UNIX timestamp, but you want to be able to view it in the component inspector in a human-\nreadable form. By using the formatting function, you can avoid doing the conversion except when the\nhook is actually being inspected. Here’s what that might look like, using a function from the moment\n.js date library:\nuseDebugValue(timestamp, timestamp=>timestamp.format(\"HH/mm/ss\"));\nFINDING AND USING CUSTOM HOOKS\nCustom hooks deliver on React’s promise of a simple way for developers to share reusable compo-",
		"hook is actually being inspected. Here’s what that might look like, using a function from the moment\n.js date library:\nuseDebugValue(timestamp, timestamp=>timestamp.format(\"HH/mm/ss\"));\nFINDING AND USING CUSTOM HOOKS\nCustom hooks deliver on React’s promise of a simple way for developers to share reusable compo-\nnents. Thousands of custom hooks have been created for just about any common functionality that a\ndeveloper might need.\nUnfortunately, finding out which custom hooks are available isn’t always easy, and this is complicated\nby hooks that have the same purpose and name but are part of different Node.js packages and have\ndifferent APIs. Here are a few of the more popular custom hooks that are currently available.\nuse- http\nThe useFetch hook that’s part of the use- http package (https://use- http.com) makes isomor-\nphic HTTP requests. What this means is that it can be used both on the server and in the browser.",
		"by hooks that have the same purpose and name but are part of different Node.js packages and have\ndifferent APIs. Here are a few of the more popular custom hooks that are currently available.\nuse- http\nThe useFetch hook that’s part of the use- http package (https://use- http.com) makes isomor-\nphic HTTP requests. What this means is that it can be used both on the server and in the browser.\nIt features caching, TypeScript support, automatic aborting of pending requests when a component\nunmounts, React Native, GraphQL, and retrying.\n286 ❘ CHAPTER 11 IntroducIng Hooks\nreact- fetch- hook\nReact Fetch Hook’s useFetch hook (https://www.npmjs.com/package/react- fetch- hook) takes\na URL and a response formatter function as parameters and returns a Boolean named isLoading and\nformatted data. In its most basic form, using this hook looks like this:\nconst {isLoading,data} = useFetch(\"http://example-u rl.com/api/users/1\");\naxios- hooks",
		"286 ❘ CHAPTER 11 IntroducIng Hooks\nreact- fetch- hook\nReact Fetch Hook’s useFetch hook (https://www.npmjs.com/package/react- fetch- hook) takes\na URL and a response formatter function as parameters and returns a Boolean named isLoading and\nformatted data. In its most basic form, using this hook looks like this:\nconst {isLoading,data} = useFetch(\"http://example-u rl.com/api/users/1\");\naxios- hooks\nThe useAxios hook (https://www.npmjs.com/package/axios- hooks) executes HTTP requests\nusing the popular Axios library. It takes a URL and an options object as parameters and returns an\nobject containing data, the loading status, and any error message that was returned by the URL. It\nalso returns a function that you can use to manually execute the HTTP request.\nListing 11-20 shows a simple example of using the useAxios hook.\nLISTING 11- 20: Using useAxios\nimport {useState} from 'react';\nimport useAxios from 'axios- hooks';\nimport {API_KEY} from './config';\nfunction WeatherWidget() {",
		"also returns a function that you can use to manually execute the HTTP request.\nListing 11-20 shows a simple example of using the useAxios hook.\nLISTING 11- 20: Using useAxios\nimport {useState} from 'react';\nimport useAxios from 'axios- hooks';\nimport {API_KEY} from './config';\nfunction WeatherWidget() {\nconst [city,setCity] = useState('London');\nconst [{data, loading, error}, refetch] =\nuseAxios(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\nif (loading) return <p>Loading...</p>;\nif (error) return <p>There was an error. {error.message}</p>;\nreturn (\n<>\n<input type=\"text\" value={city} onChange={e=>setCity(e.target.value)} />\n<pre>{JSON.stringify(data,null,2)}</pre>\n</>\n);\n}\nexport default WeatherWidget;\nreact- hook- form\nReact Hook Form’s useForm hook makes building forms and validating data input simple. The\nuseForm hook returns a function called register() that you can pass as a ref to uncontrolled inputs",
		"return (\n<>\n<input type=\"text\" value={city} onChange={e=>setCity(e.target.value)} />\n<pre>{JSON.stringify(data,null,2)}</pre>\n</>\n);\n}\nexport default WeatherWidget;\nreact- hook- form\nReact Hook Form’s useForm hook makes building forms and validating data input simple. The\nuseForm hook returns a function called register() that you can pass as a ref to uncontrolled inputs\nwith name attributes. The handleSubmit() method returned by useForm will then handle all of the\ndata from your form.\nYou can pass options to each register() function to validate fields, make them required, and\nspecify other limits such as minimum and maximum values.\nListing 11-21 shows a basic use of useForm.\nFinding and Using Custom Hooks ❘ 287\nLISTING 11- 21: Using useForm\nimport {useForm} from 'react- hook- form';\nfunction SignUpForm() {\nconst {register, handleSubmit} = useForm();\nconst onSubmit = data => {\nconsole.log(data);\n};\nreturn (\n<form onSubmit = {handleSubmit(onSubmit)}>\n<label>First Name: </label>",
		"Listing 11-21 shows a basic use of useForm.\nFinding and Using Custom Hooks ❘ 287\nLISTING 11- 21: Using useForm\nimport {useForm} from 'react- hook- form';\nfunction SignUpForm() {\nconst {register, handleSubmit} = useForm();\nconst onSubmit = data => {\nconsole.log(data);\n};\nreturn (\n<form onSubmit = {handleSubmit(onSubmit)}>\n<label>First Name: </label>\n<input name=\"firstname\" {...register(\"firstname\",{required:true})} />\n<label>Last Name: </label>\n<input name=\"lastname\" {...register(\"lastname\",{required:true})} />\n<input type=\"submit\" />\n</form>\n);\n}\nexport default SignUpForm;\n@rehooks/local- storage\nThe useLocalStorage hook, which is part of the Rehooks library (https://github.com/rehooks),\nprovides functions for working with the browser’s local storage. Browser local storage is useful for\nstoring data between browser sessions. This is helpful for creating offline apps, for increasing the\nperformance of a web app, and for remembering the user’s state between sessions.",
		"@rehooks/local- storage\nThe useLocalStorage hook, which is part of the Rehooks library (https://github.com/rehooks),\nprovides functions for working with the browser’s local storage. Browser local storage is useful for\nstoring data between browser sessions. This is helpful for creating offline apps, for increasing the\nperformance of a web app, and for remembering the user’s state between sessions.\nAnother feature of useLocalStorage is that it can sync data between browser tabs.\nuse- local- storage- state\nThe useLocalStorageState hook (https://www.npmjs.com/package/use- local- storage-\nstate) takes a key and an optional default value and returns an array with three values: a value, a\nsetter function, and a Boolean named isPersistent. Here’s an example:\nconst [reminders, setReminders, isPersistent] =\nuseLocalState('reminders',['sleep','eat food']);\nThe first two return values work the same as the values returned by useState. The third tells",
		"state) takes a key and an optional default value and returns an array with three values: a value, a\nsetter function, and a Boolean named isPersistent. Here’s an example:\nconst [reminders, setReminders, isPersistent] =\nuseLocalState('reminders',['sleep','eat food']);\nThe first two return values work the same as the values returned by useState. The third tells\nyou whether the value is stored in memory or in local storage. By default, of course, any\nvalue you create using useLocalStorageState will be stored in localStorage. In the event that\nlocalStorage isn’t available for some reason, useLocalStorageState will fall back to just keeping\nthe value in memory.\n288 ❘ CHAPTER 11 IntroducIng Hooks\nOther Fun Hooks\nGoing beyond the basic tasks that are used in most modern user interfaces, other custom hooks\nencapsulate functionality that’s more specialized or even just for fun. Here are a few custom hooks\nthat fall into this category:",
		"localStorage isn’t available for some reason, useLocalStorageState will fall back to just keeping\nthe value in memory.\n288 ❘ CHAPTER 11 IntroducIng Hooks\nOther Fun Hooks\nGoing beyond the basic tasks that are used in most modern user interfaces, other custom hooks\nencapsulate functionality that’s more specialized or even just for fun. Here are a few custom hooks\nthat fall into this category:\n➤➤ The useGeolocation hook (https://github.com/streamich/react- use) tracks a user’s\ngeographic location.\n➤➤ The useNetworkStatus hook (https://github.com/rehooks/network- status) returns\ninformation about a user’s current network status.\n➤➤ The useKonomiCode hook (https://stackblitz.com/edit/use- konami- code) is an eas-\nter egg hook for detecting when a user has entered the famous Konomi Code (↑ ↑ ↓ ↓ ← →\n← → B A), which is used as a cheat code in many video games.\nLists of Hooks\nFinding custom hooks for just about any purpose is becoming easier thanks to some great lists of",
		"information about a user’s current network status.\n➤➤ The useKonomiCode hook (https://stackblitz.com/edit/use- konami- code) is an eas-\nter egg hook for detecting when a user has entered the famous Konomi Code (↑ ↑ ↓ ↓ ← →\n← → B A), which is used as a cheat code in many video games.\nLists of Hooks\nFinding custom hooks for just about any purpose is becoming easier thanks to some great lists of\nhooks being maintained and updated by the React community. Here are a few of the lists of hooks\nthat are currently available:\n➤➤ Hooks.guide (https://hooks- guide.netlify.app/). A curated and categorized\nlist of hooks.\n➤➤ Collection of React Hooks (https://nikgraf.github.io/react- hooks/). A searchable\ncollection of hooks that anyone can add to.\n➤➤ Use Hooks (https://use- hooks.org/). Provides a tool for scaffolding React hooks and a\nlist of hooks created using the scaffolding.\nSUMMARY\nHooks aren’t just a new and better way of doing something in React; they dramatically improve the",
		"list of hooks.\n➤➤ Collection of React Hooks (https://nikgraf.github.io/react- hooks/). A searchable\ncollection of hooks that anyone can add to.\n➤➤ Use Hooks (https://use- hooks.org/). Provides a tool for scaffolding React hooks and a\nlist of hooks created using the scaffolding.\nSUMMARY\nHooks aren’t just a new and better way of doing something in React; they dramatically improve the\nentire React development experience, they make learning React easier, and they solve the problem of\ncreating a standard and simple way to share code between components.\nIn this chapter, you learned:\n➤➤ What React Hooks are.\n➤➤ Why React Hooks were created.\n➤➤ How to use each of the built-i n hooks.\n➤➤ How to use and create custom hooks.\n➤➤ How to find pre-b uilt custom hooks.\nIn the next chapter you’ll learn how to manage complex user interfaces and applications by associat-\ning URLs with components and layouts using React Router.\n12\nRouting",
		"In this chapter, you learned:\n➤➤ What React Hooks are.\n➤➤ Why React Hooks were created.\n➤➤ How to use each of the built-i n hooks.\n➤➤ How to use and create custom hooks.\n➤➤ How to find pre-b uilt custom hooks.\nIn the next chapter you’ll learn how to manage complex user interfaces and applications by associat-\ning URLs with components and layouts using React Router.\n12\nRouting\nUntil now, every user interface example you’ve seen in this book has only had a single screen\nand everything the application can do is displayed at once. In the real world, apps have multiple\nmodes, tabs, and screens. The ability to change from an app’s main screen to a settings screen,\nfor example, makes it possible for user interfaces to do more while not overwhelming the user\nwith complexity and clutter.\nIn this chapter, you’ll learn:\n➤➤ What routing is and why you need it.\n➤➤ How routing works in single page applications.\n➤➤ How to install and use React Router.\n➤➤ How to create basic routes.",
		"for example, makes it possible for user interfaces to do more while not overwhelming the user\nwith complexity and clutter.\nIn this chapter, you’ll learn:\n➤➤ What routing is and why you need it.\n➤➤ How routing works in single page applications.\n➤➤ How to install and use React Router.\n➤➤ How to create basic routes.\n➤➤ How to create navigation.\n➤➤ How to create nested routes.\n➤➤ How to use React Router’s hooks.\nWHAT IS ROUTING?\nThe most basic concept behind the web (what we call Web 1.0) is that a web browser requests\na web page from a web (HTTP) server using a unique URL. The web server then responds with\nan HTML page that is rendered in the browser, as shown in Figure 12‑1.\nWhen a user clicks a link on a web page, it requests a new HTML page, which the browser\ndownloads and displays instead of the current page. Browsers and servers maintain a user’s\nstate between different web pages by using browser cookies, the localStorage API, and\nserver‑ side data.\n290 ❘ CHAPTER 12 Routing",
		"an HTML page that is rendered in the browser, as shown in Figure 12‑1.\nWhen a user clicks a link on a web page, it requests a new HTML page, which the browser\ndownloads and displays instead of the current page. Browsers and servers maintain a user’s\nstate between different web pages by using browser cookies, the localStorage API, and\nserver‑ side data.\n290 ❘ CHAPTER 12 Routing\nFIGURE 12- 1: How the web works\nThe problem with loading a new web page each time a user clicks a link is that it doesn’t create a\nsmooth experience for the user, and it doesn’t allow for refreshing data dynamically. The whole web\npage is downloaded and rendered each time a new URL is loaded.\nAJAX (which stands for Asynchronous JavaScript and XML) was created to solve this problem. With\nAJAX, JavaScript dynamically loads data into a web page without loading a new HTML page. AJAX\nmade dynamic web user interfaces possible, and JavaScript libraries and frameworks made building",
		"page is downloaded and rendered each time a new URL is loaded.\nAJAX (which stands for Asynchronous JavaScript and XML) was created to solve this problem. With\nAJAX, JavaScript dynamically loads data into a web page without loading a new HTML page. AJAX\nmade dynamic web user interfaces possible, and JavaScript libraries and frameworks made building\nthem easier. This is what was referred to as Web 2.0.\nNow instead of the web browser requesting new pages from a web server, the browser only loads the\nfirst page containing the JavaScript code and the JavaScript virtual machine takes over from there and\ndynamically loads data and updates the browser using the DOM API.\nJavaScript user interface libraries hijack the original request/response model that the web was built\non. This works well, but it means that the browser is always displaying the same HTML page. This is\nwhat we call a single page application (SPA). Having a website or web application that only con‑",
		"dynamically loads data and updates the browser using the DOM API.\nJavaScript user interface libraries hijack the original request/response model that the web was built\non. This works well, but it means that the browser is always displaying the same HTML page. This is\nwhat we call a single page application (SPA). Having a website or web application that only con‑\nsists of one web page makes it impossible for other sites to link to specific data within your app or\nsite using a URL, and it makes it more difficult for search engines to index the data on your site or\nin your app.\nThe solution is to have the JavaScript that runs your web application simulate the browser’s built‑ in\nability to load web pages that correspond to unique URLs, as shown in Figure 12‑2.\nThis mapping of URLs to things happening inside a JavaScript application is what we call routing.\nHow Routing Works in React ❘ 291\nFIGURE 12- 2: JavaScript routing\nHOW ROUTING WORKS IN REACT\nIn React, routing has two purposes:",
		"ability to load web pages that correspond to unique URLs, as shown in Figure 12‑2.\nThis mapping of URLs to things happening inside a JavaScript application is what we call routing.\nHow Routing Works in React ❘ 291\nFIGURE 12- 2: JavaScript routing\nHOW ROUTING WORKS IN REACT\nIn React, routing has two purposes:\n1. To change the window.location property of the browser (when used with a web browser).\n2. To detect the current location and use it to show or hide different components or combina‑\ntions of components.\nThe browser’s window.location.href property is what indicates the current URL of the web page.\nBy setting window.location.href without making a server request, a JavaScript routing program\ncan simulate the native way that browsers change the rendered view. What this means is that a user or\nsearch engine can navigate to or link to a specific URL, such as www.example.com/aboutUs.\nOnce the value of window.location.href changes, this property can be read using JavaScript and",
		"By setting window.location.href without making a server request, a JavaScript routing program\ncan simulate the native way that browsers change the rendered view. What this means is that a user or\nsearch engine can navigate to or link to a specific URL, such as www.example.com/aboutUs.\nOnce the value of window.location.href changes, this property can be read using JavaScript and\ndifferent URLs can be associated with different components. This association is called a route.\nListing 12‑1 shows a simple use of React Router to create two routes, such as you might do in a con‑\nfiguration utility, a survey, or a text‑b ased adventure game.\nLISTING 12- 1: A simple routing component\nimport React from \"react\";\nimport {LessTraveledPath,MoreTraveledPath} from './PathOptions';\nimport {\nBrowserRouter,\nSwitch,\nRoute,\nLink\n} from \"react- router- dom\";\ncontinues\n292 ❘ CHAPTER 12 Routing\nLISTING 12-1 (continued)\nfunction ChooseYourAdventure() {\nreturn (\n<BrowserRouter>\n<div>",
		"figuration utility, a survey, or a text‑b ased adventure game.\nLISTING 12- 1: A simple routing component\nimport React from \"react\";\nimport {LessTraveledPath,MoreTraveledPath} from './PathOptions';\nimport {\nBrowserRouter,\nSwitch,\nRoute,\nLink\n} from \"react- router- dom\";\ncontinues\n292 ❘ CHAPTER 12 Routing\nLISTING 12-1 (continued)\nfunction ChooseYourAdventure() {\nreturn (\n<BrowserRouter>\n<div>\n<p>You come to a fork in the road. Which path will you take?</p>\n<ul>\n<li>\n<Link to=\"/worn\">The More Well-t raveled Path</Link>\n</li>\n<li>\n<Link to=\"/untrodden\">The Less Well-t raveled Path</Link>\n</li>\n</ul>\n<Switch>\n<Route path=\"/worn\">\n<MoreTraveledPath />\n</Route>\n<Route path=\"/untrodden\">\n<LessTraveledPath />\n</Route>\n</Switch>\n</div>\n</BrowserRouter>\n);\n}\nexport default ChooseYourAdventure;\nIn this example, the Link component changes the current browser location. The Route components\nrender the correct child component depending on the browser’s location. When the browser’s location",
		"</li>\n</ul>\n<Switch>\n<Route path=\"/worn\">\n<MoreTraveledPath />\n</Route>\n<Route path=\"/untrodden\">\n<LessTraveledPath />\n</Route>\n</Switch>\n</div>\n</BrowserRouter>\n);\n}\nexport default ChooseYourAdventure;\nIn this example, the Link component changes the current browser location. The Route components\nrender the correct child component depending on the browser’s location. When the browser’s location\n(after the domain name) is /worn, the MoreTraveledPath component will be displayed, and when\nthe location is /untrodden, the LessTraveledPath component will be displayed.\nYou can verify that the window.location.href property changes by opening the JavaScript console\nand typing window.location.href, as shown in Figure 12‑3.\nUsing React Router ❘ 293\nFIGURE 12- 3: Changing routes and viewing the window.location.href property\nUSING REACT ROUTER\nReact Router can be used for routing in web applications or in mobile apps. Because of the funda‑",
		"You can verify that the window.location.href property changes by opening the JavaScript console\nand typing window.location.href, as shown in Figure 12‑3.\nUsing React Router ❘ 293\nFIGURE 12- 3: Changing routes and viewing the window.location.href property\nUSING REACT ROUTER\nReact Router can be used for routing in web applications or in mobile apps. Because of the funda‑\nmental differences in routing in a browser versus routing in a native mobile app, there are two differ‑\nent versions of React Router:\n➤➤ react- router- dom is the version of React Router for the web.\n➤➤ react- router- native is the version of React Router for native apps.\nSince this book is primarily about creating user interfaces for the web, we’ll use\nreact- router- dom. However, the basic process that you’ll use to create routes and links in React\nRouter applies for either version.\nInstalling and Importing react- router- dom",
		"➤➤ react- router- dom is the version of React Router for the web.\n➤➤ react- router- native is the version of React Router for native apps.\nSince this book is primarily about creating user interfaces for the web, we’ll use\nreact- router- dom. However, the basic process that you’ll use to create routes and links in React\nRouter applies for either version.\nInstalling and Importing react- router- dom\nReact Router isn’t installed with Create React App by default, so you’ll need to install it before you\ncan start using it. Once you have a React application built with Create React App, you can install\nreact- router- dom using npm by entering the following command into the terminal:\nnpm install react-router-dom@5.3.0\n294 ❘ CHAPTER 12 Routing\nOnce react- router- dom is installed, you can import components, functions, and hooks from the\nlibrary into any of your components that will use routing. For most uses of React Router, you’ll need\nthree parts:\n➤➤ A router component.",
		"react- router- dom using npm by entering the following command into the terminal:\nnpm install react-router-dom@5.3.0\n294 ❘ CHAPTER 12 Routing\nOnce react- router- dom is installed, you can import components, functions, and hooks from the\nlibrary into any of your components that will use routing. For most uses of React Router, you’ll need\nthree parts:\n➤➤ A router component.\n➤➤ A linking component.\n➤➤ A route component.\nThe Router Component\nA router component is the top‑l evel component that makes routing possible. It handles the changing\nof the window.location property and it provides React Router props to components below it.\nSelecting a Router\nReact Router contains five different router components:\n➤➤ BrowserRouter\n➤➤ HashRouter\n➤➤ MemoryRouter\n➤➤ StaticRouter\n➤➤ NativeRouter\nNo matter which router you choose, it’s a convention to import the router component using the name\nRouter, like this:\nimport {BrowserRouter as Router} from 'react-r outer- dom';",
		"Selecting a Router\nReact Router contains five different router components:\n➤➤ BrowserRouter\n➤➤ HashRouter\n➤➤ MemoryRouter\n➤➤ StaticRouter\n➤➤ NativeRouter\nNo matter which router you choose, it’s a convention to import the router component using the name\nRouter, like this:\nimport {BrowserRouter as Router} from 'react-r outer- dom';\nImporting the router as Router also simplifies things later if you want to change the router.\nNOTE The five router components listed here are the “high- level” routers.\nReact Router also has a component named Router, which is the “low- level”\nrouter. The low- level Router component is used for synchronizing routes with\nstate management libraries (such as Redux). Unless you have a good reason to\nuse the low- level Router, you can safely ignore it.\nBrowserRouter\nBrowserRouter is the Router component that you’ll use most, if not all, of the time. It uses the\nHTML5 history API to change the browser’s window.location.href property. Using Browser-",
		"state management libraries (such as Redux). Unless you have a good reason to\nuse the low- level Router, you can safely ignore it.\nBrowserRouter\nBrowserRouter is the Router component that you’ll use most, if not all, of the time. It uses the\nHTML5 history API to change the browser’s window.location.href property. Using Browser-\nRouter allows your React UI to simulate the familiar way of navigating the web using URL paths.\nUsing React Router ❘ 295\nHashRouter\nHashRouter uses the part of the URL after the hash symbol (#) to synchronize the location and the\ndisplayed components. HashRouter relies on the fact that anything after a # in a URL won’t cause a\nbrowser to load a new page by default. For example, the following two addresses both use the same\nHTML page:\nhttps://www.example.com/\nhttps://www.example.com/#/aboutUs\nThe second URL passes a path after a #, which can be read using JavaScript and used to change the\ndisplayed components.",
		"displayed components. HashRouter relies on the fact that anything after a # in a URL won’t cause a\nbrowser to load a new page by default. For example, the following two addresses both use the same\nHTML page:\nhttps://www.example.com/\nhttps://www.example.com/#/aboutUs\nThe second URL passes a path after a #, which can be read using JavaScript and used to change the\ndisplayed components.\nPrior to the widespread availability of the HTML5 history API in browsers, which allows JavaScript\nto change the address without loading new pages, hash routing was how JavaScript routing always\nworked. Today, HashRouter is mostly still around for backwards compatibility with older apps\nand browsers.\nMemoryRouter\nMemoryRouter doesn’t update or read the browser’s window.location property at all. Instead, it\nkeeps the routing history in memory. MemoryRouter is useful for non‑b rowser environments such as\nReact Native, and for in‑m emory tests of your user interface.\nStaticRouter",
		"worked. Today, HashRouter is mostly still around for backwards compatibility with older apps\nand browsers.\nMemoryRouter\nMemoryRouter doesn’t update or read the browser’s window.location property at all. Instead, it\nkeeps the routing history in memory. MemoryRouter is useful for non‑b rowser environments such as\nReact Native, and for in‑m emory tests of your user interface.\nStaticRouter\nStaticRouter creates a router that never changes. It’s useful for server‑ side rendering of React,\nwhere the web server passes a path to React on the server and React generates static code to serve\nto the user.\nNativeRouter\nNativeRouter is used for creating navigation in iOS and Android apps built using React Native.\nKeep in mind that React apps can be rendered to many different types of user interface devices\n(as you saw in Chapter 4). Native apps handle routing differently from web browsers, and the\nNativeRouter component translates the lower‑ level React Router components to routing commands",
		"NativeRouter\nNativeRouter is used for creating navigation in iOS and Android apps built using React Native.\nKeep in mind that React apps can be rendered to many different types of user interface devices\n(as you saw in Chapter 4). Native apps handle routing differently from web browsers, and the\nNativeRouter component translates the lower‑ level React Router components to routing commands\nthat work with your target mobile operating system.\nUsing the Router Component\nWhichever router component you choose, it needs to wrap around the other React Router compo‑\nnents. One common way to make sure that the router is available to your entire app is by rendering it\naround your root component in the ReactDOM.render method.\nThis is one of the few times that you’ll have a need to modify index.js after you initially create it.\nIf you recall from Chapter 2, the ReactDOM.render method is used once in a React UI and takes a",
		"nents. One common way to make sure that the router is available to your entire app is by rendering it\naround your root component in the ReactDOM.render method.\nThis is one of the few times that you’ll have a need to modify index.js after you initially create it.\nIf you recall from Chapter 2, the ReactDOM.render method is used once in a React UI and takes a\ncomponent (called the root component) and a DOM node where that component should be rendered\nas arguments.\n296 ❘ CHAPTER 12 Routing\nFor example, the default Create React App ReactRouter.render method looks like this:\nReactDOM.render(\n<React.StrictMode>\n<App />\n</React.StrictMode>,\ndocument.getElementById('root')\n);\nThe React.StrictMode component is optional in the preceding example and may or may not be\npresent depending on how and when you bootstrapped your app with Create React App. But, just\nas React.StrictMode wraps around the root component, App, you can wrap a router component",
		"ReactDOM.render(\n<React.StrictMode>\n<App />\n</React.StrictMode>,\ndocument.getElementById('root')\n);\nThe React.StrictMode component is optional in the preceding example and may or may not be\npresent depending on how and when you bootstrapped your app with Create React App. But, just\nas React.StrictMode wraps around the root component, App, you can wrap a router component\naround App to provide routing capabilities to your entire app.\nAfter you’ve imported your router component, enclose the root component in a router like this:\nimport React from 'react';\nimport ReactDOM from 'react- dom';\nimport {BrowserRouter as Router} from 'react-r outer- dom';\nReactDOM.render(\n<React.StrictMode>\n<Router>\n<App />\n</Router>\n</React.StrictMode>,\ndocument.getElementById('root')\n);\nWith the router in place, you can move on to creating links and routes.\nLinking to Routes\nReact Router has three different linking components:\n➤➤ Link\n➤➤ NavLink\n➤➤ Redirect",
		"import ReactDOM from 'react- dom';\nimport {BrowserRouter as Router} from 'react-r outer- dom';\nReactDOM.render(\n<React.StrictMode>\n<Router>\n<App />\n</Router>\n</React.StrictMode>,\ndocument.getElementById('root')\n);\nWith the router in place, you can move on to creating links and routes.\nLinking to Routes\nReact Router has three different linking components:\n➤➤ Link\n➤➤ NavLink\n➤➤ Redirect\nThe first two linking components are essentially wrappers around the HTML a element with some\nadditional features and capabilities added. The Redirect component changes the current URL with‑\nout user interaction.\nInternal Linking with Link\nBecause React Router overrides the default behavior of links in a browser, you can’t simply link\nbetween routes using the a element as you normally would in a website. The Link element is the basic\nlinking element in React Router. All it requires is a path to link to, which can be provided using the\nto attribute, and a single child node, as in the following example:",
		"Internal Linking with Link\nBecause React Router overrides the default behavior of links in a browser, you can’t simply link\nbetween routes using the a element as you normally would in a website. The Link element is the basic\nlinking element in React Router. All it requires is a path to link to, which can be provided using the\nto attribute, and a single child node, as in the following example:\n<Link to=\"/user/login\">Log in</Link>\nUsing React Router ❘ 297\nThe value of the to attribute can be a string (or an expression that evaluates to a string) or an object.\nIf the to property is specified as an object, the properties of the object are concatenated to create the\ndestination location.\nLinking with a String\nIf you pass a string to the to attribute, it can be any valid internal path that you would normally\nuse as the value of the href attribute with the HTML a element. Any path that you pass to the Link",
		"If the to property is specified as an object, the properties of the object are concatenated to create the\ndestination location.\nLinking with a String\nIf you pass a string to the to attribute, it can be any valid internal path that you would normally\nuse as the value of the href attribute with the HTML a element. Any path that you pass to the Link\ncomponent will be used to update the browser location relative to the path of the app. Because using\nLink updates the URL relative to the app, the following example won’t work as you might expect:\n<Link to=\"https://chrisminnick.com\">Link to my website</Link>\nFigure 12‑4 shows what happens in the address bar when you click the preceding link in a React\nRouter app.\nFIGURE 12- 4: React Router can’t be used for external linking\nIf you want to link to an external site from a React app, just use the a element.\nLinking with an Object\nTo use an object as the value of the to attribute, specify a combination of the allowed properties:",
		"Figure 12‑4 shows what happens in the address bar when you click the preceding link in a React\nRouter app.\nFIGURE 12- 4: React Router can’t be used for external linking\nIf you want to link to an external site from a React app, just use the a element.\nLinking with an Object\nTo use an object as the value of the to attribute, specify a combination of the allowed properties:\n➤➤ pathname: A string containing the path to link to.\n➤➤ search: A string containing query parameters (the question mark followed by the\nname=value pairs that form an HTML querystring).\n➤➤ hash: A string containing the hash symbol (#) followed by any values you want to provide to\nthe destination route in the hash portion of the URL.\n➤➤ state: An object containing state that you want to persist in the destination location.\nFor example, the following Link component, when followed, will pass a path and querystring to\nthe destination Route component:\n<Link to={{path: '/orders, search: '?filterBy=new'}}>\nView New Orders",
		"the destination route in the hash portion of the URL.\n➤➤ state: An object containing state that you want to persist in the destination location.\nFor example, the following Link component, when followed, will pass a path and querystring to\nthe destination Route component:\n<Link to={{path: '/orders, search: '?filterBy=new'}}>\nView New Orders\n</Link>\nAdditional Link Props\nThe Link component can receive several optional props. These include replace, component, and\npass‑ through props, which are discussed next.\n298 ❘ CHAPTER 12 Routing\nreplace\nNormally, when a Link element is clicked, React Router adds a new location entry to the browser\nhistory stack. If you want to return to the route you were previously at, you can use the browser back\nbutton or change the browser’s position in the history stack. The replace attribute replaces the cur‑\nrent entry in the history stack rather than adding a new one:\n<Link to=\"/somepath\" replace>Go to the new location</Link>\ncomponent",
		"history stack. If you want to return to the route you were previously at, you can use the browser back\nbutton or change the browser’s position in the history stack. The replace attribute replaces the cur‑\nrent entry in the history stack rather than adding a new one:\n<Link to=\"/somepath\" replace>Go to the new location</Link>\ncomponent\nThe component attribute takes a custom navigation component as its value. You can use the\ncomponent attribute to supply the name of the component you’d like to use in place of the default\nLink component. To create a custom navigation component that you want to use for the link and\npass the prop from the Link component through to it, do this:\nconst SpecialLink = (props)=>(\n<a {...props}>***Super Special Link*** {props.children}</a>\n);\n<Link to=\"/somepath\" component={SpecialLink}>Click the special link</Link>\npass- through props\nIf you want to attach additional props to the a element that results from the Link, you can specify",
		"pass the prop from the Link component through to it, do this:\nconst SpecialLink = (props)=>(\n<a {...props}>***Super Special Link*** {props.children}</a>\n);\n<Link to=\"/somepath\" component={SpecialLink}>Click the special link</Link>\npass- through props\nIf you want to attach additional props to the a element that results from the Link, you can specify\nthem as well. Examples include className, id, and title.\nInternal Navigation with NavLink\nNavigation links are a subset of internal links within an app. They’re used for changing modes, tabs,\nor pages within a web application. Examples of navigation links include the links in a navigation bar\nor mobile site navigation menu.\nNavigation links function the same as any other link in a web application, but it’s good user interface\ndesign to indicate which link is currently active, as shown in Figure 12‑5.\nFIGURE 12- 5: Navigation links indicate the current position\nUsing React Router ❘ 299",
		"or pages within a web application. Examples of navigation links include the links in a navigation bar\nor mobile site navigation menu.\nNavigation links function the same as any other link in a web application, but it’s good user interface\ndesign to indicate which link is currently active, as shown in Figure 12‑5.\nFIGURE 12- 5: Navigation links indicate the current position\nUsing React Router ❘ 299\nReact Router’s NavLink component creates navigation links. The difference between a NavLink and a\nLink component is that the NavLink has attributes that allow it to be styled when the value of its to\nattribute matches the browser’s current location.\nYou can style a NavLink component using either the activeClassName attribute, which accepts a\nCSS class name, or the activeStyle attribute, which accepts a style object:\n<NavLink to=\"/home\" activeClassName=\"active\">Home</NavLink>\nDepending on how your app is designed, there are options to consider when deciding when a",
		"attribute matches the browser’s current location.\nYou can style a NavLink component using either the activeClassName attribute, which accepts a\nCSS class name, or the activeStyle attribute, which accepts a style object:\n<NavLink to=\"/home\" activeClassName=\"active\">Home</NavLink>\nDepending on how your app is designed, there are options to consider when deciding when a\nNavLink will display in its “active” style. For example, in the navigation menu shown in Figure 12‑6,\nshould the “Home” and “About Us” menus be highlighted when the “Meet the Team” sub‑m enu link\nis active?\nListing 12‑2 shows the JSX used to build the navigation menu in Figure 12‑6.\nFIGURE 12- 6: A navigation menu with sub-i tems\nLISTING 12- 2: A list of NavLinks with sub-i tems\n<ul>\n<li><NavLink to=\"/\" activeClassName=\"active\">Home</NavLink></li>\n<li><NavLink to=\"/aboutUs\" activeClassName=\"active\">About Us</NavLink>\n<ul>\n<li>\n<NavLink to=\"/aboutUs/team\" activeClassName=\"active\">\ncontinues\n300 ❘ CHAPTER 12 Routing",
		"FIGURE 12- 6: A navigation menu with sub-i tems\nLISTING 12- 2: A list of NavLinks with sub-i tems\n<ul>\n<li><NavLink to=\"/\" activeClassName=\"active\">Home</NavLink></li>\n<li><NavLink to=\"/aboutUs\" activeClassName=\"active\">About Us</NavLink>\n<ul>\n<li>\n<NavLink to=\"/aboutUs/team\" activeClassName=\"active\">\ncontinues\n300 ❘ CHAPTER 12 Routing\nLISTING 12-2 (continued)\nMeet the Team\n</NavLink>\n</li>\n<li>\n<NavLink to=\"/aboutUs/history\" activeClassName=\"active\">\nCompany History\n</NavLink>\n</li>\n</ul>\n</li>\n<li><NavLink to=\"/contactUs\" activeClassName=\"active\">Contact Us</NavLink></li>\n</ul>\nBy default, NavLink will apply the active style when part of the path matches. In the preceding exam‑\nple, when the Team link is active, the active style will be applied to not only the Team link, but also to\nthe aboutUs and Home links, as shown in Figure 12‑7.\nFIGURE 12- 7: Partial matches activate the active style",
		"</ul>\nBy default, NavLink will apply the active style when part of the path matches. In the preceding exam‑\nple, when the Team link is active, the active style will be applied to not only the Team link, but also to\nthe aboutUs and Home links, as shown in Figure 12‑7.\nFIGURE 12- 7: Partial matches activate the active style\nIf you only want to activate the active style when there’s an exact match, you use the Boolean exact\nattribute, as shown in Listing 12‑3.\nUsing React Router ❘ 301\nLISTING 12- 3: Using the exact attribute on NavLink components\n<ul>\n<li><NavLink exact to=\"/\" activeClassName=\"active\">Home</NavLink></li>\n<li><NavLink exact to=\"/aboutUs\" activeStyle={{color:'green'}}>About\nUs</NavLink>\n<ul>\n<li><NavLink exact to=\"/aboutUs/team\" activeClassName=\"active\">Meet the\nTeam</NavLink></li>\n<li><NavLink exact to=\"/aboutUs/history\" activeClassName=\"active\">\nCompany History</NavLink></li>\n</ul>\n</li>\n<li><NavLink exact to=\"/contactUs\" activeClassName=\"active\">Contact",
		"<li><NavLink exact to=\"/aboutUs\" activeStyle={{color:'green'}}>About\nUs</NavLink>\n<ul>\n<li><NavLink exact to=\"/aboutUs/team\" activeClassName=\"active\">Meet the\nTeam</NavLink></li>\n<li><NavLink exact to=\"/aboutUs/history\" activeClassName=\"active\">\nCompany History</NavLink></li>\n</ul>\n</li>\n<li><NavLink exact to=\"/contactUs\" activeClassName=\"active\">Contact\nUs</NavLink></li>\n</ul>\nFigure 12‑8 shows the resulting navigation bar after the exact attribute has been added to each of\nthe NavLink components.\nFIGURE 12- 8: Using the exact attribute on NavLink components\n302 ❘ CHAPTER 12 Routing\nIf you need an even more strict matching of paths, the strict attribute can be used with NavLink\ncomponents to also take into account the trailing slash in a URL path:\n<li><NavLink strict to=\"/aboutUs\" activeClassName=\"active\">About Us</NavLink>\nIn the preceding link, the active style will be applied if the location is /aboutUs, but not if it’s\n/aboutUs/.\nAutomatic Linking with Redirect",
		"If you need an even more strict matching of paths, the strict attribute can be used with NavLink\ncomponents to also take into account the trailing slash in a URL path:\n<li><NavLink strict to=\"/aboutUs\" activeClassName=\"active\">About Us</NavLink>\nIn the preceding link, the active style will be applied if the location is /aboutUs, but not if it’s\n/aboutUs/.\nAutomatic Linking with Redirect\nThe Redirect component changes the current URL by replacing the current location in the history\nstack when it renders. Like the Link and NavLink components, Redirect takes an attribute named\nto, which can have a value of a string or object. Unlike Link and NavLink, a Redirect doesn’t\nhave children.\nRedirect is often used to change the URL in response to the result of a conditional statement, as in\nthe following example:\n{loginSuccess?<Redirect to=\"/members\" />:<Redirect to=\"/forgotPassword\" />}\nIf you want to add a new location to the history stack, rather than replacing the current one, use the",
		"have children.\nRedirect is often used to change the URL in response to the result of a conditional statement, as in\nthe following example:\n{loginSuccess?<Redirect to=\"/members\" />:<Redirect to=\"/forgotPassword\" />}\nIf you want to add a new location to the history stack, rather than replacing the current one, use the\npush attribute:\n<Redirect push to=\"/pageNotFound\" />\nThe Redirect component can also take an attribute called from, which causes it to function as a\nrouting component. I’ll discuss the from attribute in the next section, “Creating Routes.”\nCreating Routes\nThe Route component is the one that actually creates routes. In its simplest form, Route takes an\nattribute named path, which it compares with the current location. If there’s a match, Route will\nrender its children:\n<Route path=\"/login\">\n<LoginForm />\n</Route>\nBy default, the path only needs to match part of the location. For example, if the current browser",
		"Creating Routes\nThe Route component is the one that actually creates routes. In its simplest form, Route takes an\nattribute named path, which it compares with the current location. If there’s a match, Route will\nrender its children:\n<Route path=\"/login\">\n<LoginForm />\n</Route>\nBy default, the path only needs to match part of the location. For example, if the current browser\nlocation is /login, the component in Listing 12‑4 will render both the Home component and the\nLogin component.\nLISTING 12- 4: Multiple routes in a component may have matches\nimport {BrowserRouter as Router, Route} from 'react-r outer- dom';\nfunction HomeScreen(props){\nreturn (\n<Router>\n<Route path=\"/\">\n<Home />\n</Route>\nUsing React Router ❘ 303\n<Route path=\"/login\">\n<Login />\n</Route>\n</Router>\n)\n}\nexport default HomeScreen;\nFigure 12‑9 shows what the resulting page might look like when the location is /login, with the\nHome and Login components both displaying.\nFIGURE 12- 9: Multiple routes can match the URL",
		"function HomeScreen(props){\nreturn (\n<Router>\n<Route path=\"/\">\n<Home />\n</Route>\nUsing React Router ❘ 303\n<Route path=\"/login\">\n<Login />\n</Route>\n</Router>\n)\n}\nexport default HomeScreen;\nFigure 12‑9 shows what the resulting page might look like when the location is /login, with the\nHome and Login components both displaying.\nFIGURE 12- 9: Multiple routes can match the URL\nThe ability to match and display multiple routes means that you can compose pages and create sub‑\nnavigation with React Router.\n304 ❘ CHAPTER 12 Routing\nRestricting Path Matching\nYou can use the exact attribute with Route to restrict path matching to exact matches. Figure 12‑10\nshows the result of adding exact to both of the Routes from the previous example and visiting the\n/login path.\nFIGURE 12- 10: Add the exact attribute to Routes to restrict matching\nIf you want to enforce the ending slash in path matching, use the strict attribute:\n<Route strict path=\"/user/\">\n<UserProfile />\n</Route>\nUsing URL Parameters",
		"shows the result of adding exact to both of the Routes from the previous example and visiting the\n/login path.\nFIGURE 12- 10: Add the exact attribute to Routes to restrict matching\nIf you want to enforce the ending slash in path matching, use the strict attribute:\n<Route strict path=\"/user/\">\n<UserProfile />\n</Route>\nUsing URL Parameters\nURLs frequently contain dynamic data that need to be available inside of child components. For\nexample, in the following path, the directory name user is followed by a slash and then a number:\n/user/5455\nUsing React Router ❘ 305\nThis type of URL usually indicates that the number represents a unique identifier for a user, rather\nthan a component named “5455” (which isn’t a valid component name).\nA Route component to match this path would look for the /user/ path and then indicate that the\ncharacters after the path are a parameter that should be available inside the child component, as\nshown in Listing 12‑5.\nLISTING 12- 5: Using URL parameters",
		"than a component named “5455” (which isn’t a valid component name).\nA Route component to match this path would look for the /user/ path and then indicate that the\ncharacters after the path are a parameter that should be available inside the child component, as\nshown in Listing 12‑5.\nLISTING 12- 5: Using URL parameters\nimport {BrowserRouter as Router, Route} from 'react-r outer- dom';\nfunction HomeScreen(props){\nreturn (\n<Router>\n<Route exact path=\"/\">\n<Home />\n</Route>\n<Route exact path=\"/login\">\n<Login />\n</Route>\n<Route path=\"/user/:id\">\n<UserProfile />\n</Route>\n</Router>\n)\n}\nexport default HomeScreen;\nInside the rendered child component, you can access URL parameters using the useParams hook, as\nshown in Listing 12‑6.\nLISTING 12- 6: Using the useParams hook\nfunction UserProfile() {\nlet { id } = useParams();\nreturn (\n<div>\n<h3>User ID: {id}</h3>\n</div>\n);\n}\nThe component Prop\nInstead of specifying the component to be rendered by a matching route using children of the Route",
		"Inside the rendered child component, you can access URL parameters using the useParams hook, as\nshown in Listing 12‑6.\nLISTING 12- 6: Using the useParams hook\nfunction UserProfile() {\nlet { id } = useParams();\nreturn (\n<div>\n<h3>User ID: {id}</h3>\n</div>\n);\n}\nThe component Prop\nInstead of specifying the component to be rendered by a matching route using children of the Route\ncomponent, you can use the component attribute, as shown in Listing 12‑7.\n306 ❘ CHAPTER 12 Routing\nLISTING 12- 7: Using the component attribute\nimport React from \"react\";\nimport {\nBrowserRouter as Router,\nRoute,\nLink\n} from \"react- router- dom\";\nfunction ComponentProp(props) {\nconst OrderDetails = (props)=>{\nreturn (\n<h1>Details for order # {props.match.params.orderid}</h1>\n)\n}\nreturn (\n<>\n<Router>\n<Link to=\"/orders/4\">Order #4</Link>\n<Route path=\"/orders/:orderid\" component={OrderDetails} />\n</Router>\n</>\n);\n}\nexport default ComponentProp;",
		"import {\nBrowserRouter as Router,\nRoute,\nLink\n} from \"react- router- dom\";\nfunction ComponentProp(props) {\nconst OrderDetails = (props)=>{\nreturn (\n<h1>Details for order # {props.match.params.orderid}</h1>\n)\n}\nreturn (\n<>\n<Router>\n<Link to=\"/orders/4\">Order #4</Link>\n<Route path=\"/orders/:orderid\" component={OrderDetails} />\n</Router>\n</>\n);\n}\nexport default ComponentProp;\nReact Router will use the component passed to the component attribute to create and render a\nnew React element. Using the component attribute results in the component being unmounted and\nrendered with every render.\nRender Props\nAnother option for rendering components when routes match is to specify a function inside the render\nattribute. When the route matches, this function will be called. Using the render attribute doesn’t\nrequire React Router to create an element, so it avoids the unmounting and mounting on each render\nthat using the component attribute does.",
		"rendered with every render.\nRender Props\nAnother option for rendering components when routes match is to specify a function inside the render\nattribute. When the route matches, this function will be called. Using the render attribute doesn’t\nrequire React Router to create an element, so it avoids the unmounting and mounting on each render\nthat using the component attribute does.\nListing 12‑8 shows an example of using the render attribute.\nLISTING 12- 8: Using the render attribute\nimport React from \"react\";\nimport {\nBrowserRouter as Router,\nRoute,\nLink\n} from \"react- router- dom\";\nUsing React Router ❘ 307\nfunction ComponentProp(props) {\nreturn (\n<>\n<Router>\n<Link to=\"/orders/4\">Order #4</Link>\n<Route path=\"/orders/:orderid\" render={props => (\n<h1>Details for order # {props.match.params.orderid}</h1>\n)\n} />\n</Router>\n</>\n);\n}\nexport default ComponentProp;\nUse of Route’s render attribute is an example of an advanced technique in React known as render",
		"Using React Router ❘ 307\nfunction ComponentProp(props) {\nreturn (\n<>\n<Router>\n<Link to=\"/orders/4\">Order #4</Link>\n<Route path=\"/orders/:orderid\" render={props => (\n<h1>Details for order # {props.match.params.orderid}</h1>\n)\n} />\n</Router>\n</>\n);\n}\nexport default ComponentProp;\nUse of Route’s render attribute is an example of an advanced technique in React known as render\nprops. A render prop is a function provided to a component using props that the component calls\ninstead of using its own render method.\nRender props can be used to share functionality between components and to dynamically determine\nwhat the child component will render. Inside of a component that accepts a render prop (such as\nRoute in this case), the component will call the provided function. Listing 12‑9 shows a simplified\nversion of what happens inside the Route component when you use the render prop.\nLISTING 12- 9: Rendering a render prop\nfunction Route(props) {\nreturn (\n<>\n{props.render({})}\n</>\n);\n}",
		"what the child component will render. Inside of a component that accepts a render prop (such as\nRoute in this case), the component will call the provided function. Listing 12‑9 shows a simplified\nversion of what happens inside the Route component when you use the render prop.\nLISTING 12- 9: Rendering a render prop\nfunction Route(props) {\nreturn (\n<>\n{props.render({})}\n</>\n);\n}\nexport default Route;\nSwitching Routes\nThe Switch component causes only the first matching Route to be rendered. This is useful in cases\nwhere you don’t want to render multiple routes when there are multiple matches. To use Switch,\nwrap the routes that you want it to choose the first match from with a <Switch> element, as shown\nin Listing 12‑10.\n308 ❘ CHAPTER 12 Routing\nLISTING 12- 10: Switching between multiple routes\n<Switch>\n<Route path=\"/\">\n<p>home</p>\n</Route>\n<Route path=\"/aboutUs\">\n<p>about us</p>\n</Route>\n<Route path=\"/aboutUs/team\">\n<p>meet the team</p>\n</Route>\n</Switch>",
		"wrap the routes that you want it to choose the first match from with a <Switch> element, as shown\nin Listing 12‑10.\n308 ❘ CHAPTER 12 Routing\nLISTING 12- 10: Switching between multiple routes\n<Switch>\n<Route path=\"/\">\n<p>home</p>\n</Route>\n<Route path=\"/aboutUs\">\n<p>about us</p>\n</Route>\n<Route path=\"/aboutUs/team\">\n<p>meet the team</p>\n</Route>\n</Switch>\nIn this example, if the current URL is /aboutUs/team, only that route will be rendered.\nRendering a Default Route\nSwitch can also be used to render a default route when no other routes match. The default route\nshould be the last one, and a Route with no path can be used so that it matches any location, as\nshown in Listing 12‑11.\nLISTING 12- 11: Rendering a default route\n<Switch>\n<Route path=\"/\">\n<p>home</p>\n</Route>\n<Route path=\"/aboutUs\">\n<p>about us</p>\n</Route>\n<Route path=\"/aboutUs/team\">\n<p>meet the team</p>\n</Route>\n<Route>\n<PageNotFound />\n</Route>\n</Switch>\nRouting with Redirect",
		"should be the last one, and a Route with no path can be used so that it matches any location, as\nshown in Listing 12‑11.\nLISTING 12- 11: Rendering a default route\n<Switch>\n<Route path=\"/\">\n<p>home</p>\n</Route>\n<Route path=\"/aboutUs\">\n<p>about us</p>\n</Route>\n<Route path=\"/aboutUs/team\">\n<p>meet the team</p>\n</Route>\n<Route>\n<PageNotFound />\n</Route>\n</Switch>\nRouting with Redirect\nThe Redirect component can take a parameter named from that will be compared with the current\nURL and automatically redirect to a new location if it matches. Any matched parameters specified by\nthe from attribute can be received by the to attribute by specifying them in both places. A Redirect\nwith a from attribute can only be used inside a Switch component.\nOne use for a Redirect with a from attribute is in cases where more than one location should map\nto the same URL, or where the URL has changed. For example, in Listing 12‑12, the /users route\nwill redirect to /user/list.\nUsing React Router ❘ 309",
		"with a from attribute can only be used inside a Switch component.\nOne use for a Redirect with a from attribute is in cases where more than one location should map\nto the same URL, or where the URL has changed. For example, in Listing 12‑12, the /users route\nwill redirect to /user/list.\nUsing React Router ❘ 309\nLISTING 12- 12: Redirecting from one location to another\nimport { BrowserRouter as Router, Redirect, Route, Switch, Link, useLocation }\nfrom \"react- router- dom\";\nfunction Header(props){\nreturn(<Link to=\"/users\">View a list of users</Link>);\n}\nfunction UsersList(props){\nconst location = useLocation();\nreturn(\n<>\n<h1>User List</h1>\npath: {location.pathname}\n</>);\n}\nfunction NoMatch(props){\nconst location = useLocation();\nreturn(<h1>{location.pathname} is not a matching path</h1>)\n}\nfunction App(props){\nreturn(\n<Router>\n<Header />\n<Switch>\n<Route path=\"/users/list\">\n<UsersList />\n</Route>\n<Redirect from=\"/users\" to=\"/users/list\" />\n<Route>\n<NoMatch />\n</Route>\n</Switch>\n</Router>",
		"return(\n<>\n<h1>User List</h1>\npath: {location.pathname}\n</>);\n}\nfunction NoMatch(props){\nconst location = useLocation();\nreturn(<h1>{location.pathname} is not a matching path</h1>)\n}\nfunction App(props){\nreturn(\n<Router>\n<Header />\n<Switch>\n<Route path=\"/users/list\">\n<UsersList />\n</Route>\n<Redirect from=\"/users\" to=\"/users/list\" />\n<Route>\n<NoMatch />\n</Route>\n</Switch>\n</Router>\n);\n}\nexport default App;\nThe App component in the previous example will render a link to /users. When that’s clicked the\nRedirect component will change the location to /users/list and render the appropriate Route\nchild component.\nBehind the Scenes: location, history, and match\nRouting depends on and uses three related objects: the history object, the location object, and the\nmatch object. By manipulating or reading values from these objects, you can gain greater control over\nhow routing works in your app.\n310 ❘ CHAPTER 12 Routing\nThe history Object",
		"child component.\nBehind the Scenes: location, history, and match\nRouting depends on and uses three related objects: the history object, the location object, and the\nmatch object. By manipulating or reading values from these objects, you can gain greater control over\nhow routing works in your app.\n310 ❘ CHAPTER 12 Routing\nThe history Object\nThe history object refers to the history package, which is separate from React Router, but which\nReact Router depends upon. The history object’s job is to keep a record of the locations navigated\nto in the current session and to make changing the location possible. The concept of session history\nis device‑i ndependent, but is implemented in several different ways for different environments (which\ncorrespond to the router components in React Router):\n➤➤ Browser history.\n➤➤ Hash history.\n➤➤ Memory history.\nYou can gain access to the history object in your React code by using the useHistory hook or by\nusing the withRouter higher‑ order function.",
		"is device‑i ndependent, but is implemented in several different ways for different environments (which\ncorrespond to the router components in React Router):\n➤➤ Browser history.\n➤➤ Hash history.\n➤➤ Memory history.\nYou can gain access to the history object in your React code by using the useHistory hook or by\nusing the withRouter higher‑ order function.\nListing 12‑13 shows how to use withRouter to gain access to the history.push method and use it\nto create a link.\nLISTING 12- 13: Using withRouter\nimport React from \"react\";\nimport {\nwithRouter\n} from \"react- router- dom\";\nfunction NavMenu(props) {\nfunction handleClick() {\nprops.history.push(\"/home\");\n}\nreturn (\n<button type=\"button\" onClick={handleClick}>\nGo home\n</button>\n);\n}\nexport default withRouter(NavMenu);\nThe useHistory hook is the newer, and slightly simpler, way of gaining access to the history object,\nas shown in Listing 12‑14.\nLISTING 12- 14: Using useHistory\nimport React from \"react\";\nimport {\nuseHistory",
		"function handleClick() {\nprops.history.push(\"/home\");\n}\nreturn (\n<button type=\"button\" onClick={handleClick}>\nGo home\n</button>\n);\n}\nexport default withRouter(NavMenu);\nThe useHistory hook is the newer, and slightly simpler, way of gaining access to the history object,\nas shown in Listing 12‑14.\nLISTING 12- 14: Using useHistory\nimport React from \"react\";\nimport {\nuseHistory\n} from \"react- router- dom\";\nUsing React Router ❘ 311\nfunction NavMenu(props) {\nconst history = useHistory();\nfunction handleClick() {\nhistory.push(\"/home\");\n}\nreturn (\n<button type=\"button\" onClick={handleClick}>\nGo home\n</button>\n);\n}\nexport default NavMenu;\nJAVASCRIPT LESSON: HIGHER- ORDER FUNCTIONS\nHigher‑ order functions and higher‑ order components are tools for abstracting and\nreusing code. They can be confusing at first, however, so I’ll explain them with sim‑\nple examples.\nHigher- Order Functions\nA higher‑ order function is a function that operates on another function. Higher‑",
		"Go home\n</button>\n);\n}\nexport default NavMenu;\nJAVASCRIPT LESSON: HIGHER- ORDER FUNCTIONS\nHigher‑ order functions and higher‑ order components are tools for abstracting and\nreusing code. They can be confusing at first, however, so I’ll explain them with sim‑\nple examples.\nHigher- Order Functions\nA higher‑ order function is a function that operates on another function. Higher‑\norder functions aren’t specific to React or to JavaScript. Rather, they’re a common\ntechnique in mathematics and in computer science. Higher‑ order functions may take\na function as a parameter and/or return a function.\nFor example, consider this function, which just adds one to a number and returns\nthe result:\nconst addOne = (a)=>a+1;\nThis function is called a first‑o rder function.\nThe following higher‑ order function takes a function as a parameter and returns the\nresult of that function with some text appended to it:\nconst addText = f => x => f(x) + ' is the result.';",
		"For example, consider this function, which just adds one to a number and returns\nthe result:\nconst addOne = (a)=>a+1;\nThis function is called a first‑o rder function.\nThe following higher‑ order function takes a function as a parameter and returns the\nresult of that function with some text appended to it:\nconst addText = f => x => f(x) + ' is the result.';\nA new function can then be defined using the addText function with addOne sup‑\nplied to it as a parameter:\nconst addWithText = addText(addOne);\nThe addWithText function can then be called, like this:\naddWithText(8);\nThe result will be that the string \"9 is the result\" will be returned. You can test\nthis out by copying each of the previous lines into your browser’s JavaScript console\none at a time.\ncontinues\n312 ❘ CHAPTER 12 Routing\ncontinued\nHigher- Order Components\nIn React, a higher‑ order component is a function that takes a component and returns\na new component. In the process, it enhances the original component in some way.",
		"this out by copying each of the previous lines into your browser’s JavaScript console\none at a time.\ncontinues\n312 ❘ CHAPTER 12 Routing\ncontinued\nHigher- Order Components\nIn React, a higher‑ order component is a function that takes a component and returns\na new component. In the process, it enhances the original component in some way.\nFor example, in React Router, the withRouter function returns a new component\nthat has access to the history object.\nTo use a higher‑ order function, you can define a normal component, and then\nuse the higher‑ order component to enhance that original component, as shown in\nthis example:\nimport React from \"react\";\nimport { withRouter } from \"react-r outer\";\nclass ShowTheLocation extends React.Component {\nrender() {\nconst { match, location, history } = this.props;\nreturn <div>You are now at {location.pathname}</div>;\n}\n}\nconst ShowTheLocationWithRouter = withRouter(ShowTheLocation);\nexport default ShowTheLocationWithRouter;",
		"this example:\nimport React from \"react\";\nimport { withRouter } from \"react-r outer\";\nclass ShowTheLocation extends React.Component {\nrender() {\nconst { match, location, history } = this.props;\nreturn <div>You are now at {location.pathname}</div>;\n}\n}\nconst ShowTheLocationWithRouter = withRouter(ShowTheLocation);\nexport default ShowTheLocationWithRouter;\nIn the preceding example, when you render a ShowTheLocationWithRouter\ncomponent, it will have access to the match, location, and history props from\nReact Router.\nTable 12‑1 shows all the properties and methods of the history object.\nTABLE 12-1 : Properties and Methods of history\nPROPERTIES DESCRIPTION\nAND METHODS\nlength The number of location items in the history stack.\naction The current action (such as PUSH or REPLACE).\nlocation The current location.\npush() Adds a new item to the history stack.\nreplace() Replaces the current location on the history stack.",
		"TABLE 12-1 : Properties and Methods of history\nPROPERTIES DESCRIPTION\nAND METHODS\nlength The number of location items in the history stack.\naction The current action (such as PUSH or REPLACE).\nlocation The current location.\npush() Adds a new item to the history stack.\nreplace() Replaces the current location on the history stack.\ngo() Moves the pointer by the passed- in number of entries in the history stack.\ngoBack() Go back one entry in the history stack.\ngoForward() Go forward one entry in the history stack.\nblock() Prevents navigation. For example, if the user clicks the Back button, block can\nbe used to interrupt the navigation to display a message or confirmation dialog.\nUsing React Router ❘ 313\nThe location Object\nA location object contains information about where the app is or has been or will be. It can contain\na pathname, a querystring, a hash, state data, and a key. Location objects are stored in the history",
		"be used to interrupt the navigation to display a message or confirmation dialog.\nUsing React Router ❘ 313\nThe location Object\nA location object contains information about where the app is or has been or will be. It can contain\na pathname, a querystring, a hash, state data, and a key. Location objects are stored in the history\nstack and can be accessed in a Route component or by using the withRouter higher‑ order function.\nListing 12‑15 shows how to access properties of the Location object using withRouter.\nLISTING 12- 15: Viewing properties of the current location object\nimport React from \"react\";\nimport {\nwithRouter\n} from \"react- router- dom\";\nfunction ViewLocation(props) {\nreturn (\n<>\n<h1>Current Location</h1>\n<ul>\n<li>pathname: {props.location.pathname}</li>\n<li>hash: {props.location.hash}</li>\n<li>search: {props.location.search}</li>\n<li>key: {props.location.key}</li>\n</ul>\n</>\n);\n}\nexport default withRouter(ViewLocation);",
		"import React from \"react\";\nimport {\nwithRouter\n} from \"react- router- dom\";\nfunction ViewLocation(props) {\nreturn (\n<>\n<h1>Current Location</h1>\n<ul>\n<li>pathname: {props.location.pathname}</li>\n<li>hash: {props.location.hash}</li>\n<li>search: {props.location.search}</li>\n<li>key: {props.location.key}</li>\n</ul>\n</>\n);\n}\nexport default withRouter(ViewLocation);\nWith this component rendered, try changing the location by adding a querystring or hash in the\nbrowser’s address bar, as shown in Figure 12‑11.\nThe match Object\nThe match object contains information about how a Route’s path matches the URL. Just as with the\nlocation and history objects, you can access the match object in several different ways:\n➤➤ Inside a Route component.\n➤➤ By using the withRouter higher‑ order component.\n➤➤ By using a hook.\n314 ❘ CHAPTER 12 Routing\nFIGURE 12- 11: Modifying the current location\nThe match object contains the following properties:",
		"location and history objects, you can access the match object in several different ways:\n➤➤ Inside a Route component.\n➤➤ By using the withRouter higher‑ order component.\n➤➤ By using a hook.\n314 ❘ CHAPTER 12 Routing\nFIGURE 12- 11: Modifying the current location\nThe match object contains the following properties:\n➤➤ params: An object containing the key/value pairs passed from the URL, which correspond to\ndynamic parts of the URL. For example, if the route’s path is /user/:id, id will be in the\nparams property.\n➤➤ isExact: A Boolean that’s true if the entire URL matches, with no characters after it.\n➤➤ path: The pattern that was used to make the match.\n➤➤ url: The matched portion of the URL.\nThe match object is useful for dynamically constructing links and routes in nested routes, as shown in\nListing 12‑16.\nLISTING 12- 16: Dynamic links and routes in nested routes\nimport {\nBrowserRouter as Router,\nSwitch,\nRoute,\nLink,\nuseParams,\nuseRouteMatch\n} from \"react- router- dom\";",
		"➤➤ path: The pattern that was used to make the match.\n➤➤ url: The matched portion of the URL.\nThe match object is useful for dynamically constructing links and routes in nested routes, as shown in\nListing 12‑16.\nLISTING 12- 16: Dynamic links and routes in nested routes\nimport {\nBrowserRouter as Router,\nSwitch,\nRoute,\nLink,\nuseParams,\nuseRouteMatch\n} from \"react- router- dom\";\nfunction Reports() {\nlet { path, url } = useRouteMatch();\nUsing React Router ❘ 315\nreturn (\n<div>\n<h2>Reports</h2>\n<ul>\n<li>\n<Link to={`${url}/profitloss`}>Profit and Loss</Link>\n</li>\n<li>\n<Link to={`${url}/balancesheet`}>Balance Sheet</Link>\n</li>\n<li>\n<Link to={`${url}/payroll`}>Payroll</Link>\n</li>\n</ul>\n<Switch>\n<Route exact path={path}>\n<h3>Select a report.</h3>\n</Route>\n<Route path={`${path}/:reportId`}>\n<Report />\n</Route>\n</Switch>\n</div>\n);\n}\nfunction Report() {\nlet { reportId } = useParams();\nreturn (\n<div>\n<h3>{reportId}</h3>\n</div>\n);\n}\nfunction Nav() {\nreturn(\n<div>\n<ul>\n<li>",
		"</li>\n<li>\n<Link to={`${url}/payroll`}>Payroll</Link>\n</li>\n</ul>\n<Switch>\n<Route exact path={path}>\n<h3>Select a report.</h3>\n</Route>\n<Route path={`${path}/:reportId`}>\n<Report />\n</Route>\n</Switch>\n</div>\n);\n}\nfunction Report() {\nlet { reportId } = useParams();\nreturn (\n<div>\n<h3>{reportId}</h3>\n</div>\n);\n}\nfunction Nav() {\nreturn(\n<div>\n<ul>\n<li>\n<Link to={`/reports`}>Reports</Link>\n</li>\n</ul>\n<hr />\n<Switch>\n<Route path={`/reports`}>\n<Reports />\n</Route>\n</Switch>\ncontinues\n316 ❘ CHAPTER 12 Routing\nLISTING 12-16 (continued)\n</div>\n)\n}\nfunction App() {\nreturn (\n<Router>\n<Nav />\n</Router>\n);\n}\nexport default App;\nThis sub‑ navigation menu contains Link elements that use the URL from the match object as the base\nfor the to attribute. To match these new links, Route components use the path from the match object\nas the base for their own path attribute values.\nFigure 12‑12 shows the result of rendering Listing 12‑16 and clicking the Reports link.",
		"return (\n<Router>\n<Nav />\n</Router>\n);\n}\nexport default App;\nThis sub‑ navigation menu contains Link elements that use the URL from the match object as the base\nfor the to attribute. To match these new links, Route components use the path from the match object\nas the base for their own path attribute values.\nFigure 12‑12 shows the result of rendering Listing 12‑16 and clicking the Reports link.\nFIGURE 12- 12: Dynamic link and path attributes with the match object properties\nReact Router Hooks ❘ 317\nREACT ROUTER HOOKS\nAs you’ve seen in the previous examples, React Router includes several hooks that give you access to\nthe state of the Router. These hooks are:\n➤➤ useHistory: Gives you access to the history object.\n➤➤ useLocation: Gives you access to the current location object.\n➤➤ useParams: Returns an object containing the current URL parameters.\n➤➤ useRouteMatch: Attempts to match the current URL. The useRouteMatch hook works",
		"the state of the Router. These hooks are:\n➤➤ useHistory: Gives you access to the history object.\n➤➤ useLocation: Gives you access to the current location object.\n➤➤ useParams: Returns an object containing the current URL parameters.\n➤➤ useRouteMatch: Attempts to match the current URL. The useRouteMatch hook works\nthe same way as the Route component matches URLs, but it can do so without ren‑\ndering a Route.\nuseHistory\nTo use the useHistory hook, assign the return value of the useHistory hook to a new variable. The\nproperties and methods of the history object then become available through the new object:\nconst history = useHistory();\nuseLocation\nThe useLocation hook works the same way as the useHistory hook. Create a new object from the\nreturned value of useLocation to gain access to the properties of the location object:\nconst location = useLocation();\nuseParams\nThe useParams hook returns an object containing key/value pairs for each of the current Route’s",
		"const history = useHistory();\nuseLocation\nThe useLocation hook works the same way as the useHistory hook. Create a new object from the\nreturned value of useLocation to gain access to the properties of the location object:\nconst location = useLocation();\nuseParams\nThe useParams hook returns an object containing key/value pairs for each of the current Route’s\nparams. You can deconstruct the object to use individual params:\nconst {orderNumber,size,color} = useParams();\nuseRouteMatch\nThe useRouteMatch hook attempts to match the current URL in the same way that a Route com‑\nponent would, but without rendering anything. For example, if you have the following Route with a\nrender prop:\n<Route\npath=\"/order/:orderId\"\nrender={({ match }) => {\nreturn <> {match.path}</>;\n}}\n/>\nyou could gain access to the same match object without rendering anything like this:\nlet match = useRouteMatch(\"/order/:orderId\");\n318 ❘ CHAPTER 12 Routing",
		"ponent would, but without rendering anything. For example, if you have the following Route with a\nrender prop:\n<Route\npath=\"/order/:orderId\"\nrender={({ match }) => {\nreturn <> {match.path}</>;\n}}\n/>\nyou could gain access to the same match object without rendering anything like this:\nlet match = useRouteMatch(\"/order/:orderId\");\n318 ❘ CHAPTER 12 Routing\nThe useRouteMatch hook can be used with a single argument, which is the path to match against,\nor it can be used without an argument, in which case it will return the match object of the cur‑\nrent Route.\nSUMMARY\nRouting makes navigation and organization within React apps possible. React Router’s declarative\nand composable API is logical and conforms to standard React best practices. With hooks, gaining\naccess to the inner workings of routing when you need to is also easy.\nIn this chapter, you learned:\n➤➤ What routing is.\n➤➤ How JavaScript and React Router enable routing in SPAs.\n➤➤ About the different routers in React Router.",
		"and composable API is logical and conforms to standard React best practices. With hooks, gaining\naccess to the inner workings of routing when you need to is also easy.\nIn this chapter, you learned:\n➤➤ What routing is.\n➤➤ How JavaScript and React Router enable routing in SPAs.\n➤➤ About the different routers in React Router.\n➤➤ How to link between routes.\n➤➤ How to create routes.\n➤➤ How to use the Redirect component.\n➤➤ How to use React Router’s hooks.\n➤➤ What higher‑ order functions and components are.\nIn the next chapter, you’ll learn how to properly handle errors in React components by using error\nboundaries.\n13\nError Boundaries\nEven if it were possible to write perfect code, the nature of interactive web applications guar‑\nantees that once in a while something is going to break. Error boundaries will help you ensure\nthat when something goes wrong, it won’t result in the user seeing a crashed user interface.\nIn this chapter, you’ll learn:\n➤➤ What error boundaries are.",
		"boundaries.\n13\nError Boundaries\nEven if it were possible to write perfect code, the nature of interactive web applications guar‑\nantees that once in a while something is going to break. Error boundaries will help you ensure\nthat when something goes wrong, it won’t result in the user seeing a crashed user interface.\nIn this chapter, you’ll learn:\n➤➤ What error boundaries are.\n➤➤ What kinds of errors can be caught with error boundaries.\n➤➤ How to log caught errors.\n➤➤ What errors can’t be caught with error boundaries.\n➤➤ How to use JavaScript’s try/catch.\nTHE BEST LAID PLANS\nAny kind of software development involves balancing money, time, and quality. Too often,\nmoney and time are the limiting factors, especially on the web. Add to this the number of\ndependencies involved in a typical JavaScript application and other factors that are completely\nout of your control (such as network availability), and it’s guaranteed that at some point or",
		"THE BEST LAID PLANS\nAny kind of software development involves balancing money, time, and quality. Too often,\nmoney and time are the limiting factors, especially on the web. Add to this the number of\ndependencies involved in a typical JavaScript application and other factors that are completely\nout of your control (such as network availability), and it’s guaranteed that at some point or\nanother a React user interface isn’t going to function as you intended.\nBy default, when React encounters an error inside any of the components in a UI, it will emit an\nerror on the next render that will fill the screen with either a big red message (in development\nmode) or a “white screen of death” (in production) that’s not very helpful to anyone, as shown\nin Figure 13‑1.\nCrashed user interfaces and cryptic error messages are especially not helpful to end users. Usu‑\nally, the only way to recover an app from a crashed UI is to restart it by refreshing the browser",
		"mode) or a “white screen of death” (in production) that’s not very helpful to anyone, as shown\nin Figure 13‑1.\nCrashed user interfaces and cryptic error messages are especially not helpful to end users. Usu‑\nally, the only way to recover an app from a crashed UI is to restart it by refreshing the browser\nwindow, thus resetting the state of the application. In the worst‑ case scenario, an error message\nintended to be used by developers can reveal details of the internal workings of your application\nthat could give someone with malicious intent the information they need to hack your applica‑\ntion in some way.\n320 ❘ CHAPTER 13 Error BoundariEs\nFIGURE 13- 1: A crashed React app\nError boundaries catch many kinds of errors in a user interface and display a user‑ friendly alterna‑\ntive user interface. They also allow the parts of your application that were unaffected by the error to\ncontinue to function.\nWHAT IS AN ERROR BOUNDARY?",
		"tion in some way.\n320 ❘ CHAPTER 13 Error BoundariEs\nFIGURE 13- 1: A crashed React app\nError boundaries catch many kinds of errors in a user interface and display a user‑ friendly alterna‑\ntive user interface. They also allow the parts of your application that were unaffected by the error to\ncontinue to function.\nWHAT IS AN ERROR BOUNDARY?\nAn error boundary is a component that catches errors that happen in its child components. Once an\nerror is caught, the error boundary can provide a fallback UI and log the error, as well as provide\nthe user with a way to recover the use of the UI without refreshing the browser window. Think of\nit as like a firewall that keeps an explosion inside a component’s child tree from blowing up your\nwhole app.\nFor an example of why error boundaries are necessary, take a look at the diagram of a typical React\nuser interface shown in Figure 13‑2.\nWhat Is an Error Boundary? ❘ 321\nFIGURE 13- 2: A diagram of a typical UI",
		"it as like a firewall that keeps an explosion inside a component’s child tree from blowing up your\nwhole app.\nFor an example of why error boundaries are necessary, take a look at the diagram of a typical React\nuser interface shown in Figure 13‑2.\nWhat Is an Error Boundary? ❘ 321\nFIGURE 13- 2: A diagram of a typical UI\nThis app consists of an App component that encloses several sub‑c omponents, including a navigation\nmenu, a footer, and the main part of the user interface. It can be shown as an outline like this:\n<App>\n<NavBar />\n<Main />\n<Footer />\n</App>\nThe main part of the user interface may have many levels of components, and it may depend on out‑\nside sources of data and user input. All of these are factors that contribute to the likelihood of errors.\nStarting with version 16 of React, the default behavior when an error is encountered in rendering\nany component in your app is to unmount the entire component tree and display a blank page, with",
		"The main part of the user interface may have many levels of components, and it may depend on out‑\nside sources of data and user input. All of these are factors that contribute to the likelihood of errors.\nStarting with version 16 of React, the default behavior when an error is encountered in rendering\nany component in your app is to unmount the entire component tree and display a blank page, with\ndetails logged to the console. In development mode, an overlay window with an error message will\nalso appear.\nFigure 13‑3 shows what happens to this user interface when something goes wrong in any of the\napp’s components— in this case, the component was expecting a function to be passed as a prop, but\nit wasn’t.\n322 ❘ CHAPTER 13 Error BoundariEs\nFIGURE 13- 3: An uncaught error\nOnce the UI has been unmounted, there’s no way for the user (or for the developer) to navigate else‑\nwhere in the app. An error boundary around the Main component will ensure that the rest of the user",
		"app’s components— in this case, the component was expecting a function to be passed as a prop, but\nit wasn’t.\n322 ❘ CHAPTER 13 Error BoundariEs\nFIGURE 13- 3: An uncaught error\nOnce the UI has been unmounted, there’s no way for the user (or for the developer) to navigate else‑\nwhere in the app. An error boundary around the Main component will ensure that the rest of the user\ninterface continues to be usable even if something goes wrong inside Main. Here’s what the new app\nlooks like as an outline with an error boundary around Main:\n<App>\n<NavBar />\n<ErrorBoundary>\n<Main />\n</ErrorBoundary>\n<Footer />\n</App>\nWith this change, the ErrorBoundary component can now handle errors any way you want, while\nthe rest of the UI is still functional, as shown in Figure 13‑4.\nIf you want to, you can put an error boundary around the NavBar component and one around the\nFooter component as well. You could even put an ErrorBoundary around each of the subcom‑",
		"<ErrorBoundary>\n<Main />\n</ErrorBoundary>\n<Footer />\n</App>\nWith this change, the ErrorBoundary component can now handle errors any way you want, while\nthe rest of the UI is still functional, as shown in Figure 13‑4.\nIf you want to, you can put an error boundary around the NavBar component and one around the\nFooter component as well. You could even put an ErrorBoundary around each of the subcom‑\nponents of Main, or just have one around the App component that handles events from all of the\nImplementing an Error Boundary ❘ 323\nsub‑ components. More granularity (meaning more components wrapped in the ErrorBoundary) can\ngive you more information about where the error happened as well as keep more of your app func‑\ntional when something goes wrong.\nFIGURE 13- 4: Handling an error with an error boundary\nIMPLEMENTING AN ERROR BOUNDARY\nAn error boundary isn’t a specific function or component in React. Instead, it’s any component that",
		"give you more information about where the error happened as well as keep more of your app func‑\ntional when something goes wrong.\nFIGURE 13- 4: Handling an error with an error boundary\nIMPLEMENTING AN ERROR BOUNDARY\nAn error boundary isn’t a specific function or component in React. Instead, it’s any component that\nyou create that defines a static getDerivedStateFromError or componentDidCatch lifecycle\nmethod (or both). Because error boundaries make use of lifecycle methods, they must be class com‑\nponents. Once you define an ErrorBoundary component, you can reuse it as many times as you need\nit— or even reuse it in multiple React apps. So, if you want, an ErrorBoundary component may be\nthe only class component you need to write.\nBuilding Your Own ErrorBoundary Component\nOne way to get an ErrorBoundary component is to build your own. Listing 13‑1 shows a simple\nexample of an ErrorBoundary, which just uses static getDerivedStateFromError to show a fall‑\nback UI when an error occurs.",
		"it— or even reuse it in multiple React apps. So, if you want, an ErrorBoundary component may be\nthe only class component you need to write.\nBuilding Your Own ErrorBoundary Component\nOne way to get an ErrorBoundary component is to build your own. Listing 13‑1 shows a simple\nexample of an ErrorBoundary, which just uses static getDerivedStateFromError to show a fall‑\nback UI when an error occurs.\n324 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13- 1: An ErrorBoundary component\nimport {Component} from 'react';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { hasError: false };\n}\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}\nrender() {\nif (this.state.hasError) {\nreturn <h1>Oops! There's been an error.</h1>;\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nTo understand what’s happening in this ErrorBoundary component, you need to know a couple of\nthings about the getDerivedStateFromErrors lifecycle method.",
		"}\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}\nrender() {\nif (this.state.hasError) {\nreturn <h1>Oops! There's been an error.</h1>;\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nTo understand what’s happening in this ErrorBoundary component, you need to know a couple of\nthings about the getDerivedStateFromErrors lifecycle method.\ngetDerivedStateFromErrors Is a Static Method\nThe getDerivedStateFromErrors lifecycle method is a static method. Static methods are commonly\nused to define functionality that belongs to the class as a whole, such as utilities. In React, the get-\nDerivedStateFromErrors and getDerivedStateFromProps lifecycle methods are defined as static\nto make it more difficult for them to have side effects.\nIn other words, because these methods are static, they belong to the component but they don’t have access\nto the properties of an instance of a component (like this.props, this.state, and so forth). By limiting",
		"DerivedStateFromErrors and getDerivedStateFromProps lifecycle methods are defined as static\nto make it more difficult for them to have side effects.\nIn other words, because these methods are static, they belong to the component but they don’t have access\nto the properties of an instance of a component (like this.props, this.state, and so forth). By limiting\nwhat the method has access to, React is limiting your ability to write anything but pure functions, which\nmakes sure that this lifecycle method doesn’t cause unpredictable results in the render method.\nJAVASCRIPT LESSON: STATIC METHODS\nStatic methods are methods that are defined on a class and that can’t be called on\ninstances of the class. For example, the following class, Cashier, has a static method\ncalled makeChange. The makeChange method doesn’t need to access the unique data\nin an instance of Cashier. It just takes a total and an amountTendered and returns\nthe change:\nImplementing an Error Boundary ❘ 325\nclass Cashier{",
		"Static methods are methods that are defined on a class and that can’t be called on\ninstances of the class. For example, the following class, Cashier, has a static method\ncalled makeChange. The makeChange method doesn’t need to access the unique data\nin an instance of Cashier. It just takes a total and an amountTendered and returns\nthe change:\nImplementing an Error Boundary ❘ 325\nclass Cashier{\nstatic makeChange(total,amtTendered){\nreturn amtTendered - total;\n}\n}\nThe makeChange method isn’t available in an instance of Cashier, as shown here:\nconst bob = new Cashier();\nbob.makeChange(2,10); // bob.makeChange is not a function\nYou can call makeChange on the class, however, like this:\nCashier.makeChange(2,10); // 8\ngetDerivedStateFromErrors Runs During the Render Phase\nThe render phase of a component’s lifecycle is the time when it’s not permitted to perform operations\nthat have side effects. The correct time to perform side effects is before or after the render phase. If",
		"You can call makeChange on the class, however, like this:\nCashier.makeChange(2,10); // 8\ngetDerivedStateFromErrors Runs During the Render Phase\nThe render phase of a component’s lifecycle is the time when it’s not permitted to perform operations\nthat have side effects. The correct time to perform side effects is before or after the render phase. If\nyou want your ErrorBoundary to perform a side effect—s uch as logging the error— the place to do\nthat is in the ComponentDidCatch lifecycle method (which we’ll discuss in a moment).\ngetDerivedStateFromErrors Receives the Error as a Parameter\nWhen an error happens in a descendant component of a component that uses getDerivedState-\nFromErrors, the method is called and the error message is passed. The error message is a string\ncontaining information about where the error happened and what the error was. As in the example\nin Listing 13‑1, you don’t actually need to do anything with the error. You can just use the fact that",
		"When an error happens in a descendant component of a component that uses getDerivedState-\nFromErrors, the method is called and the error message is passed. The error message is a string\ncontaining information about where the error happened and what the error was. As in the example\nin Listing 13‑1, you don’t actually need to do anything with the error. You can just use the fact that\ngetDerivedStateFromErrors was called to trigger the rendering of the alternate user interface.\ngetDerivedStateFromErrors Should Return an Object for Updating State\nThe return value of getDerivedStateFromErrors will be used to update the state. In the example in\nListing 13‑1, getDerivedStateFromErrors returns a value for changing hasError to true. You’re\nnot limited to updating just one value, of course, and a more complex error boundary might also\nstore the error itself in state, like this:\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true,\nerror\n};\n}",
		"Listing 13‑1, getDerivedStateFromErrors returns a value for changing hasError to true. You’re\nnot limited to updating just one value, of course, and a more complex error boundary might also\nstore the error itself in state, like this:\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true,\nerror\n};\n}\nIf getDerivedStateFromErrors doesn’t run, ErrorBoundary will just render its children, as if it’s\nnot there at all, by returning this.props.children.\nIf getDerivedStateFromErrors does run, the resulting state can be used to display an alternate, or\nfallback, user interface. The conditional statement that checks the value of the hasError state value\nmust go before return this.props.children so that if hasError is true, the component will\n326 ❘ CHAPTER 13 Error BoundariEs\nreturn the fallback UI and not even get to the section of the render method that returns the children\n(since a function can only execute one return statement):\nrender() {\nif (this.state.hasError) {",
		"must go before return this.props.children so that if hasError is true, the component will\n326 ❘ CHAPTER 13 Error BoundariEs\nreturn the fallback UI and not even get to the section of the render method that returns the children\n(since a function can only execute one return statement):\nrender() {\nif (this.state.hasError) {\nreturn <h1>Oops! There's been an error.</h1>;\n}\nreturn this.props.children;\n}\nTesting Your Boundary\nOnce you’ve created your ErrorBoundary component, you can test it out by wrapping it around a\ncomponent that you know will produce an error that can be caught. Listing 13‑2 contains a compo‑\nnent that would normally produce an error, because it tries to return an object in the render method,\nwhich isn’t allowed.\nLISTING 13- 2: A component with an error\nfunction BadComponent(){\nreturn (\n{oops:\"this is not good\"}\n);\n}\nexport default BadComponent;\nAttempting to render this component without an error boundary will result in an error message and/\nor a blank screen.",
		"nent that would normally produce an error, because it tries to return an object in the render method,\nwhich isn’t allowed.\nLISTING 13- 2: A component with an error\nfunction BadComponent(){\nreturn (\n{oops:\"this is not good\"}\n);\n}\nexport default BadComponent;\nAttempting to render this component without an error boundary will result in an error message and/\nor a blank screen.\nTo prevent this kind of error (short of fixing the actual component, of course) you can wrap the Bad-\nComponent component in an error boundary in its parent’s render method, or you can export it with\nthe ErrorBoundary around it, as shown in Listing 13‑3.\nLISTING 13- 3: Exporting with an ErrorBoundary\nimport ErrorBoundary from './ErrorBoundary';\nfunction BadComponentContainer(){\nreturn (\n<ErrorBoundary>\n<BadComponent />\n</ErrorBoundary>\n)\n}\nImplementing an Error Boundary ❘ 327\nfunction BadComponent(){\nreturn (\n{oops:\"this is not good\"}\n);\n}\nexport default BadComponentContainer;",
		"the ErrorBoundary around it, as shown in Listing 13‑3.\nLISTING 13- 3: Exporting with an ErrorBoundary\nimport ErrorBoundary from './ErrorBoundary';\nfunction BadComponentContainer(){\nreturn (\n<ErrorBoundary>\n<BadComponent />\n</ErrorBoundary>\n)\n}\nImplementing an Error Boundary ❘ 327\nfunction BadComponent(){\nreturn (\n{oops:\"this is not good\"}\n);\n}\nexport default BadComponentContainer;\nWith the error boundary around the component with the error, the fallback UI will now render, as\nshown in Figure 13‑5.\nFIGURE 13- 5: Rendering a fallback UI\nLogging Errors with ComponentDidCatch()\nMinimizing the impact on users when errors happen in your React component tree is one thing, but\nactually learning why and where the error occurred can help you prevent the error from happening in\nthe future. This is where the ComponentDidCatch lifecycle method comes in.\nComponentDidCatch runs during React’s commit phase. The commit phase happens after the render",
		"Minimizing the impact on users when errors happen in your React component tree is one thing, but\nactually learning why and where the error occurred can help you prevent the error from happening in\nthe future. This is where the ComponentDidCatch lifecycle method comes in.\nComponentDidCatch runs during React’s commit phase. The commit phase happens after the render\nphase. In addition to ComponentDidCatch, this is also when ComponentDidMount and Component-\nDidUpdate run. During the commit phase, ReactDOM actually applies (or commits) the changes\nfrom the render phase to the browser. The commit phase is when it’s safe for components to do\noperations that have side effects, because the commit phase only happens once per change, whereas\nthe render phase may happen multiple times for any change to the state.\n328 ❘ CHAPTER 13 Error BoundariEs\nComponentDidCatch receives two parameters: the error that was thrown, and an info object con‑",
		"from the render phase to the browser. The commit phase is when it’s safe for components to do\noperations that have side effects, because the commit phase only happens once per change, whereas\nthe render phase may happen multiple times for any change to the state.\n328 ❘ CHAPTER 13 Error BoundariEs\nComponentDidCatch receives two parameters: the error that was thrown, and an info object con‑\ntaining information about which component threw the error. Listing 13‑4 adds the ComponentDid-\nCatch method to the ErrorBoundary we created earlier. In this version, ComponentDidCatch just\nlogs the values of the error and info parameters to the browser console.\nLISTING 13- 4: Logging the error and the info object to the console\nimport {Component} from 'react';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { hasError: false };\n}\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}\ncomponentDidCatch(error,info){\nconsole.log(`error: ${error}`);",
		"LISTING 13- 4: Logging the error and the info object to the console\nimport {Component} from 'react';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { hasError: false };\n}\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}\ncomponentDidCatch(error,info){\nconsole.log(`error: ${error}`);\nconsole.log(`info: ${info}`);\n}\nrender() {\nif (this.state.hasError) {\nreturn <h1>Oops! There's been an error.</h1>;\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nWith this change made to ErrorBoundary, you can now mount the BadComponent component and\nopen the console to see the parameters passed to ComponentDidCatch, as shown in Figure 13‑6.\nUsing a Logging Service\nLogging errors to the console is fine during development, but once your app is out in the wild and\nbeing used by other people, all of those log messages that show up in the console window stay in the\nuser’s console window and don’t do anyone any good.",
		"open the console to see the parameters passed to ComponentDidCatch, as shown in Figure 13‑6.\nUsing a Logging Service\nLogging errors to the console is fine during development, but once your app is out in the wild and\nbeing used by other people, all of those log messages that show up in the console window stay in the\nuser’s console window and don’t do anyone any good.\nTo find out what errors are happening for real users, either they need to tell you about them (which\nis unlikely unless the error is very bad) or you need to implement a system that logs errors outside of\nthe user’s browser automatically.\nImplementing an Error Boundary ❘ 329\nFIGURE 13- 6: Viewing the error and info parameters in the console\nA cloud‑ based logging service can capture events (such as errors) that happen in your application and\nprovide you with reports that you can use to improve your app or to gain information about how\npeople are using it.",
		"the user’s browser automatically.\nImplementing an Error Boundary ❘ 329\nFIGURE 13- 6: Viewing the error and info parameters in the console\nA cloud‑ based logging service can capture events (such as errors) that happen in your application and\nprovide you with reports that you can use to improve your app or to gain information about how\npeople are using it.\nOne such service is Loggly (https://loggly.com). Loggly has a free trial that you can use for testing\nout the following example code.\nAfter you’ve signed up for Loggly’s trial, you’ll need to install the Loggly Software Development Kit\n(SDK). You can do this by entering the following at the root of your app:\nnpm install loggly- jslogger\nOnce the Loggly SDK is installed, create a new component, Logger, that will provide the Loggly\nSDK’s functionality to other components (such as your error boundary). Listing 13‑5 shows what\nyour Logger component should contain.\nLISTING 13- 5: The Logger component",
		"(SDK). You can do this by entering the following at the root of your app:\nnpm install loggly- jslogger\nOnce the Loggly SDK is installed, create a new component, Logger, that will provide the Loggly\nSDK’s functionality to other components (such as your error boundary). Listing 13‑5 shows what\nyour Logger component should contain.\nLISTING 13- 5: The Logger component\nimport { LogglyTracker } from 'loggly-j slogger';\nconst logger = new LogglyTracker();\nlogger.push({ 'logglyKey': 'YOUR CUSTOMER TOKEN HERE' });\nexport default logger;\n330 ❘ CHAPTER 13 Error BoundariEs\nTo get the customer token, log in to your Loggly trial account and go to the Source Browser, as\nshown in Figure 13‑7.\nFIGURE 13- 7: Add a log source\nFind the Customer Tokens link (shown in Figure 13‑8) and click it to view the token you’ll need to\nenter into the Logger component.\nImplementing an Error Boundary ❘ 331\nFIGURE 13- 8: The Customer Token link in Loggly",
		"330 ❘ CHAPTER 13 Error BoundariEs\nTo get the customer token, log in to your Loggly trial account and go to the Source Browser, as\nshown in Figure 13‑7.\nFIGURE 13- 7: Add a log source\nFind the Customer Tokens link (shown in Figure 13‑8) and click it to view the token you’ll need to\nenter into the Logger component.\nImplementing an Error Boundary ❘ 331\nFIGURE 13- 8: The Customer Token link in Loggly\nThe last step in installing Loggly and configuring it to log errors in your React UI is to import it into\nErrorBoundary and pass the parameters of ComponentDidCatch to it, as shown in Listing 13‑6.\nLISTING 13- 6: The updated ErrorBoundary with remote logging\nimport {Component} from 'react';\nimport logger from './logger';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { hasError: false };\n}\ncontinues\n332 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13-6 (continued)\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}",
		"LISTING 13- 6: The updated ErrorBoundary with remote logging\nimport {Component} from 'react';\nimport logger from './logger';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { hasError: false };\n}\ncontinues\n332 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13-6 (continued)\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}\ncomponentDidCatch(error,info){\nlogger.push({ error, info });\n}\nrender() {\nif (this.state.hasError) {\nreturn <h1>Oops! There's been an error.</h1>;\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nNow that the ErrorBoundary is logging caught errors to Loggly, you can go to your Loggly dash‑\nboard and see information about caught errors that happen, as shown in Figure 13‑9.\nFIGURE 13- 9: Viewing caught errors in Loggly\nImplementing an Error Boundary ❘ 333\nResetting the State\nIf the error that triggers an error boundary is a temporary one, such as can happen when a network",
		"Now that the ErrorBoundary is logging caught errors to Loggly, you can go to your Loggly dash‑\nboard and see information about caught errors that happen, as shown in Figure 13‑9.\nFIGURE 13- 9: Viewing caught errors in Loggly\nImplementing an Error Boundary ❘ 333\nResetting the State\nIf the error that triggers an error boundary is a temporary one, such as can happen when a network\nservice is unavailable, providing a way for the user to try again can improve the user experience.\nSince our ErrorBoundary component determines whether to render the fallback UI or its children\nbased on the hasError state value, resetting the value of hasError will cause it to try to render the\nchildren again.\nTo demonstrate resetting the state, let’s first make a component that doesn’t always return an error.\nThe component in Listing 13‑7 will randomly result in an error when you click a button.\nLISTING 13- 7: A component that sometimes errors\nimport ErrorBoundary from './ErrorBoundary';",
		"children again.\nTo demonstrate resetting the state, let’s first make a component that doesn’t always return an error.\nThe component in Listing 13‑7 will randomly result in an error when you click a button.\nLISTING 13- 7: A component that sometimes errors\nimport ErrorBoundary from './ErrorBoundary';\nimport {useState} from 'react';\nfunction SometimesBad(){\nconst [message,setMessage] = useState();\nconst handleClick = () => {\nconst randomNumber = Math.floor(Math.random() * 2);\nif (randomNumber === 1){\nsetMessage({error:\"there has been an error\"});\n} else {\nsetMessage(\"great\");\n}\n}\nreturn (\n<div>\n<button onClick={handleClick}>Mystery Button</button>\n{message}\n</div>\n);\n}\nexport default SometimesBad;\nIf you render this component and click the button, it may result in the value of message being set to\nan object, which will attempt to render. The result will be the unmounting of the React component\ntree and an error message.",
		"} else {\nsetMessage(\"great\");\n}\n}\nreturn (\n<div>\n<button onClick={handleClick}>Mystery Button</button>\n{message}\n</div>\n);\n}\nexport default SometimesBad;\nIf you render this component and click the button, it may result in the value of message being set to\nan object, which will attempt to render. The result will be the unmounting of the React component\ntree and an error message.\nIf you use one of the ErrorBoundary components that you’ve seen so far in this chapter, it will pre‑\nvent the user from seeing a blank screen and will leave the rest of the app intact. However, because\nthis error isn’t necessarily fatal, we can give the user an option to try their luck again. To do so, pro‑\nvide a way for the value of hasError to be reset to false, as shown in Listing 13‑8.\n334 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13- 8: Providing a reset link in the Error Boundary\nimport {Component} from 'react';\nimport logger from './logger';\nclass ErrorBoundary extends Component {\nconstructor(props) {",
		"vide a way for the value of hasError to be reset to false, as shown in Listing 13‑8.\n334 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13- 8: Providing a reset link in the Error Boundary\nimport {Component} from 'react';\nimport logger from './logger';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { hasError: false };\n}\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}\ncomponentDidCatch(error,info){\nlogger.push({ error, info });\n}\nrender() {\nif (this.state.hasError) {\nreturn (<>\n<h1>Oops! There's been an error.</h1>\n<button onClick={()=>this.setState({hasError:false})}>Try\nagain</button>\n<>)\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nWith this ErrorBoundary wrapped around SometimesBad, when it does result in an error, the user\nwill be able to click the button to get back to the user interface with the button and try again, as\nshown in Figure 13‑10.\nInstalling a Pre-Built ErrorBoundary Component",
		"again</button>\n<>)\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nWith this ErrorBoundary wrapped around SometimesBad, when it does result in an error, the user\nwill be able to click the button to get back to the user interface with the button and try again, as\nshown in Figure 13‑10.\nInstalling a Pre-Built ErrorBoundary Component\nThe other way to get an ErrorBoundary component is to install one that someone has already built,\nsuch as the one at https://www.npmjs.com/package/react- error- boundary.\nTo install react- error- boundary, enter the following into your terminal:\nnpm install react- error- boundary\nThe react- error- boundary package provides a configurable ErrorBoundary component that you\ncan use instead of writing your own. To use it, import it into your component and wrap it around\ncomponents that you want to catch errors in. React- error- boundary is highly customizable, but",
		"To install react- error- boundary, enter the following into your terminal:\nnpm install react- error- boundary\nThe react- error- boundary package provides a configurable ErrorBoundary component that you\ncan use instead of writing your own. To use it, import it into your component and wrap it around\ncomponents that you want to catch errors in. React- error- boundary is highly customizable, but\nthe most basic use of it simply requires a fallback component that should be displayed when an error\noccurs, as shown in Listing 13‑9.\nImplementing an Error Boundary ❘ 335\nFIGURE 13- 10: Providing a reset option in the error boundary\nLISTING 13- 9: Specifying a fallback component with react- error- boundary\nimport ErrorBoundary from 'react-e rror- boundary';\nfunction ErrorFallback({error}) {\nreturn (\n<div role=\"alert\">\n<p>Something went wrong:</p>\n<pre>{error.message}</pre>\n</div>\n)\n}\nfunction BadComponentContainer(){\nreturn (\n<ErrorBoundary\nFallbackComponent={ErrorFallback}>\n<BadComponent />",
		"LISTING 13- 9: Specifying a fallback component with react- error- boundary\nimport ErrorBoundary from 'react-e rror- boundary';\nfunction ErrorFallback({error}) {\nreturn (\n<div role=\"alert\">\n<p>Something went wrong:</p>\n<pre>{error.message}</pre>\n</div>\n)\n}\nfunction BadComponentContainer(){\nreturn (\n<ErrorBoundary\nFallbackComponent={ErrorFallback}>\n<BadComponent />\n</ErrorBoundary>\n)\n}\ncontinues\n336 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13-9 (continued)\nfunction BadComponent(){\nreturn (\n{oops:\"this is not good\"}\n);\n}\nexport default BadComponentContainer;\nWHAT CAN’T AN ERROR BOUNDARY CATCH?\nError boundaries are a great tool for capturing most of the errors that you’re likely to encounter in\nyour components, but there are a few types of errors that error boundaries can’t handle. These are:\n➤➤ Errors in the ErrorBoundary.\n➤➤ Errors in event handlers.\n➤➤ Errors in server‑ side rendering.\n➤➤ Errors in asynchronous code.\nCatching Errors in Error Boundaries with try/catch",
		"Error boundaries are a great tool for capturing most of the errors that you’re likely to encounter in\nyour components, but there are a few types of errors that error boundaries can’t handle. These are:\n➤➤ Errors in the ErrorBoundary.\n➤➤ Errors in event handlers.\n➤➤ Errors in server‑ side rendering.\n➤➤ Errors in asynchronous code.\nCatching Errors in Error Boundaries with try/catch\nOne way to catch the errors that error boundaries can’t, is to use JavaScript’s built‑i n try/\ncatch syntax.\nFor example, an error boundary can’t catch an error in itself, only in its child components. Theoreti‑\ncally, you could wrap your ErrorBoundary in an ErrorBoundary, but that’s a never‑ ending task. It’s\nbetter to use try/catch in the ErrorBoundary component, as shown in Listing 13‑10.\nLISTING 13- 10: Using try/catch to catch errors in an ErrorBoundary\nimport {Component} from 'react';\nimport logger from './logger';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);",
		"cally, you could wrap your ErrorBoundary in an ErrorBoundary, but that’s a never‑ ending task. It’s\nbetter to use try/catch in the ErrorBoundary component, as shown in Listing 13‑10.\nLISTING 13- 10: Using try/catch to catch errors in an ErrorBoundary\nimport {Component} from 'react';\nimport logger from './logger';\nclass ErrorBoundary extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { hasError: false };\n}\nstatic getDerivedStateFromError(error) {\nreturn { hasError: true };\n}\ncomponentDidCatch(error,info){\ntry {\nlogger.push({ error, info });\n} catch(error){\nWhat Can’t an Error Boundary Catch? ❘ 337\n// handle the error here\n}\n}\nrender() {\nif (this.state.hasError) {\nreturn <h1>Oops! There's been an error.</h1>;\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nIn this example, if something goes wrong with calling logger.push, that error can be handled by the\ncode in the catch block.\nCatching Errors in Event Handlers with react- error- boundary",
		"// handle the error here\n}\n}\nrender() {\nif (this.state.hasError) {\nreturn <h1>Oops! There's been an error.</h1>;\n}\nreturn this.props.children;\n}\n}\nexport default ErrorBoundary;\nIn this example, if something goes wrong with calling logger.push, that error can be handled by the\ncode in the catch block.\nCatching Errors in Event Handlers with react- error- boundary\nEvent handlers in React don’t happen during the rendering, unlike the lifecycle methods and the\nrender method. Because of this, errors in event handlers don’t have the potential to cause the col‑\nlapse of the entire UI, and so event boundaries aren’t needed or supported in event handlers.\nHowever, rather than writing separate error handling code for your event handlers and your error\nboundary, it would be ideal to be able to handle both the same way.\nIf you use the react- error- boundary package, it includes a hook named useErrorHandler that",
		"lapse of the entire UI, and so event boundaries aren’t needed or supported in event handlers.\nHowever, rather than writing separate error handling code for your event handlers and your error\nboundary, it would be ideal to be able to handle both the same way.\nIf you use the react- error- boundary package, it includes a hook named useErrorHandler that\nyou can use to hand off errors that happen in an event handler to the nearest ErrorBoundary compo‑\nnent, as shown in Listing 13‑11.\nLISTING 13- 11: Using useErrorHandler()\nfunction Greeting() {\nconst [greeting, setGreeting] = React.useState(null)\nconst handleError = useErrorHandler()\nfunction handleSubmit(event) {\nevent.preventDefault()\nconst name = event.target.elements.name.value\nfetchGreeting(name).then(\nnewGreeting => setGreeting(newGreeting),\nerror => handleError(error),\n)\n}\nreturn greeting ? (\n<div>{greeting}</div>\n) : (\ncontinues\n338 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13-11 (continued)\n<form onSubmit={handleSubmit}>",
		"const handleError = useErrorHandler()\nfunction handleSubmit(event) {\nevent.preventDefault()\nconst name = event.target.elements.name.value\nfetchGreeting(name).then(\nnewGreeting => setGreeting(newGreeting),\nerror => handleError(error),\n)\n}\nreturn greeting ? (\n<div>{greeting}</div>\n) : (\ncontinues\n338 ❘ CHAPTER 13 Error BoundariEs\nLISTING 13-11 (continued)\n<form onSubmit={handleSubmit}>\n<label>Name</label>\n<input id=\"name\" />\n<button type=\"submit\">get a greeting</button>\n</form>\n)\n}\nIn this example, when an error happens in the handleSubmit method, it will be handled by the\nErrorBoundary that encloses the Greeting component (or one of its ancestors).\nSUMMARY\nThe goal of error handling (also known as exception handling) in software is to minimize the impact\nthat errors in your application have on the user experience. Once you’ve handled an error, logging it\ncan help you get to the root cause and fix the problem. Both error handling and logging are enabled",
		"ErrorBoundary that encloses the Greeting component (or one of its ancestors).\nSUMMARY\nThe goal of error handling (also known as exception handling) in software is to minimize the impact\nthat errors in your application have on the user experience. Once you’ve handled an error, logging it\ncan help you get to the root cause and fix the problem. Both error handling and logging are enabled\nand simplified in React through the use of error boundaries.\nIn this chapter, you learned:\n➤➤ What an error boundary is.\n➤➤ How to write your own error boundary.\n➤➤ How to use an error boundary to display a fallback UI.\n➤➤ How to use an error boundary to log errors to a logging service.\n➤➤ How to use the react- error- boundary package.\n➤➤ How to catch errors using try/catch.\n➤➤ How to use react- error- boundary’s useErrorHandler hook.\nIn the next chapter, you’ll learn how to put everything you’ve learned so far together and actually\ndeploy your React app to the web.\n14\nDeploying React",
		"➤➤ How to use an error boundary to log errors to a logging service.\n➤➤ How to use the react- error- boundary package.\n➤➤ How to catch errors using try/catch.\n➤➤ How to use react- error- boundary’s useErrorHandler hook.\nIn the next chapter, you’ll learn how to put everything you’ve learned so far together and actually\ndeploy your React app to the web.\n14\nDeploying React\nNow that you know how to build a React UI, implement routing, catch and log errors, and\nseveral methods for fixing performance problems, you’re ready to move beyond the confines of\nyour local development machine and make your app available to its audience. In software and\nweb development, we call this step deployment.\nIn this chapter, you’ll learn:\n➤➤ The differences between the development and production versions of React.\n➤➤ How to build your app for deployment.\n➤➤ Different options for hosting a React UI.\n➤➤ How to enable continuous integration with Git.\nWHAT IS DEPLOYMENT?",
		"web development, we call this step deployment.\nIn this chapter, you’ll learn:\n➤➤ The differences between the development and production versions of React.\n➤➤ How to build your app for deployment.\n➤➤ Different options for hosting a React UI.\n➤➤ How to enable continuous integration with Git.\nWHAT IS DEPLOYMENT?\nSoftware deployment is the process of making software available for use. For web apps, this\nmeans putting an app on the web. For mobile apps, it usually means putting an app in an\napp store.\nDeployment of a web app generally involves running the code through several steps to prepare\nit for the web, followed by actually transferring the processed files to a server where they’ll\nbecome accessible through a non-l ocal URL.\nBUILDING AN APP\nBuilding, or compiling, an app is the process of transforming your development, or source, files\ninto a standalone app. In the case of a React project, this means your app must go through\nseveral steps, including the following:",
		"it for the web, followed by actually transferring the processed files to a server where they’ll\nbecome accessible through a non-l ocal URL.\nBUILDING AN APP\nBuilding, or compiling, an app is the process of transforming your development, or source, files\ninto a standalone app. In the case of a React project, this means your app must go through\nseveral steps, including the following:\n➤➤ Linking to the optimized production version of the React and ReactDOM libraries.\n➤➤ Bundling other linked libraries that are required for your app to run on a server (such\nas React Router).\n340 ❘ CHAPTER 14 Deploying React\n➤➤ Transpiling your source files to a lowest- common- denominator version of JavaScript that will\nrun in all of your target web browsers.\n➤➤ Combining your source files into bundles for efficient transfer over the web.\n➤➤ Minifying your source files to reduce the bandwidth required for the end user to load the app.",
		"as React Router).\n340 ❘ CHAPTER 14 Deploying React\n➤➤ Transpiling your source files to a lowest- common- denominator version of JavaScript that will\nrun in all of your target web browsers.\n➤➤ Combining your source files into bundles for efficient transfer over the web.\n➤➤ Minifying your source files to reduce the bandwidth required for the end user to load the app.\n➤➤ Moving static files (such as HTML, CSS, the compiled JavaScript, and images) into a distribu-\ntion directory.\nBuilding a React app is a complex process involving several tools and scripts working together to\nprocess the hundreds of files that make up your React project. Fortunately, Create React App makes\nbuilding an app simple. When you’re ready to compile your React app that was bootstrapped with\nCreate React App for deployment, you only need to know one simple command: npm run build.\nRunning the build Script\nWhen you’re ready to deploy your app (or any time you want to try it out, really) you can create a",
		"building an app simple. When you’re ready to compile your React app that was bootstrapped with\nCreate React App for deployment, you only need to know one simple command: npm run build.\nRunning the build Script\nWhen you’re ready to deploy your app (or any time you want to try it out, really) you can create a\nproduction version of your app by going into the terminal and typing npm run build.\nWhat happens next will be that Create React App will go through a similar process to what it does\nwhen you run npm start, except that instead of opening the compiled app in a browser, it will save\nthe compiled files in a directory named build.\nExamining the build Directory\nFigure 14-1 shows the files in the resulting build directory after running npm run build in the\nReact Bookstore project from Chapter 5.\nFIGURE 14- 1: The build directory\nBuilding an App ❘ 341\nIf you compare the build directory with the rest of the project, you’ll notice the following:",
		"the compiled files in a directory named build.\nExamining the build Directory\nFigure 14-1 shows the files in the resulting build directory after running npm run build in the\nReact Bookstore project from Chapter 5.\nFIGURE 14- 1: The build directory\nBuilding an App ❘ 341\nIf you compare the build directory with the rest of the project, you’ll notice the following:\n➤➤ The contents of the public directory become the root of the build directory. The images\nand data directories, along with the favicon.ico, index.html, and the manifest.json\nfiles, have all been copied over to build.\n➤➤ A new static directory has been created. This directory contains a css subfolder and a js\nsubfolder.\n➤➤ A new asset- manifest.json file has been created.\nThe Built index.html\nIf you open the index.html from the public directory and the index.html from the build direc-\ntory, you’ll see that the one in the build directory is minified, comments have been removed, template",
		"➤➤ A new static directory has been created. This directory contains a css subfolder and a js\nsubfolder.\n➤➤ A new asset- manifest.json file has been created.\nThe Built index.html\nIf you open the index.html from the public directory and the index.html from the build direc-\ntory, you’ll see that the one in the build directory is minified, comments have been removed, template\ncode (marked by % characters) has been replaced, and links to scripts and CSS have been inserted. If\nyou look hard enough, however, you’ll notice your root node, where the React app will run, is still in\nthere, as shown in Figure 14-2.\nFIGURE 14- 2: The minified and compiled index.html\nThis built index.html is the file that a web browser will load that will kick off the React app and\ndisplay your root component (and its children) in the root node.\nThe index.html file uses absolute paths to load linked files. So, if you open index.html in a web",
		"there, as shown in Figure 14-2.\nFIGURE 14- 2: The minified and compiled index.html\nThis built index.html is the file that a web browser will load that will kick off the React app and\ndisplay your root component (and its children) in the root node.\nThe index.html file uses absolute paths to load linked files. So, if you open index.html in a web\nbrowser now, you’ll see error messages in the console that the JavaScript and CSS files weren’t found.\nIf you change all of the absolute paths in index.html to relative ones (by putting a . before the\npath) you can actually run the built app locally on your computer without a web server, as shown in\nFigure 14-3.\n342 ❘ CHAPTER 14 Deploying React\nFIGURE 14- 3: Running a built app from the filesystem\nIn the case of the React Bookstore, however, loading the app locally produces two errors in the con-\nsole due to browser requirements for loading the app’s data. Namely, for the fetch command to be",
		"path) you can actually run the built app locally on your computer without a web server, as shown in\nFigure 14-3.\n342 ❘ CHAPTER 14 Deploying React\nFIGURE 14- 3: Running a built app from the filesystem\nIn the case of the React Bookstore, however, loading the app locally produces two errors in the con-\nsole due to browser requirements for loading the app’s data. Namely, for the fetch command to be\nable to load data.json, the app must be viewed using HTTP or HTTPS.\nThe static Directory\nThe static directory inside build holds the compiled JavaScript and CSS files and sourcemap\nfiles. The compiled JavaScript files are built from the React and ReactDOM libraries, other packages\nfrom the node_modules folder, and the source code that you wrote. All of these are combined, tran-\nspiled to be compatible with your target browsers, minified, and output as static files. The same thing\nhappens with the CSS files.",
		"files. The compiled JavaScript files are built from the React and ReactDOM libraries, other packages\nfrom the node_modules folder, and the source code that you wrote. All of these are combined, tran-\nspiled to be compatible with your target browsers, minified, and output as static files. The same thing\nhappens with the CSS files.\nThe sourcemap files (which end in .map) provide mappings between the minified static files and the\noriginal formatted code. Sourcemap files can be read by web browsers to allow you to view and\ndebug readable code in the browser developer tools.\nasset- manifest.json\nAs part of the build process, a file named asset- manifest.json will be created. This file functions\nmuch like the .map files, but for filenames. It lists the files that were generated in the compilation\nDevelopment Mode vs. Production ❘ 343\nof your app along with their original filenames. This file doesn’t affect the rendering of your app,",
		"asset- manifest.json\nAs part of the build process, a file named asset- manifest.json will be created. This file functions\nmuch like the .map files, but for filenames. It lists the files that were generated in the compilation\nDevelopment Mode vs. Production ❘ 343\nof your app along with their original filenames. This file doesn’t affect the rendering of your app,\nbut rather, it can be used by tools to find out what assets your app uses without having to parse the\nindex.html file.\nWhat’s in a Name?\nThe filenames generated by Create React App include unique strings between the original name of the\nfile and the file extension, as you can see here:\n/static/js/main.ee531687.chunk.js\nThis string of seeming random letters and numbers is actually a hash string. A hash string is a string\nof text calculated based on the contents of the file. As a result of the build process inserting hash\nstrings into the filenames, whenever you change your React components and rebuild your app, the",
		"file and the file extension, as you can see here:\n/static/js/main.ee531687.chunk.js\nThis string of seeming random letters and numbers is actually a hash string. A hash string is a string\nof text calculated based on the contents of the file. As a result of the build process inserting hash\nstrings into the filenames, whenever you change your React components and rebuild your app, the\nbuilt filenames will change. This enables your application’s files to be cached by servers and browsers\nand automatically updated when you modify the app.\nFiles may also be split into multiple “chunks” to optimize downloading and loading of the files. This\nis done automatically during the build process.\nHOW IS A DEPLOYED APP DIFFERENT?\nWhen you use Create React App’s start command, it creates the build directory in memory and\nserves it using a development server. When you use the build command, it creates the build direc-",
		"Files may also be split into multiple “chunks” to optimize downloading and loading of the files. This\nis done automatically during the build process.\nHOW IS A DEPLOYED APP DIFFERENT?\nWhen you use Create React App’s start command, it creates the build directory in memory and\nserves it using a development server. When you use the build command, it creates the build direc-\ntory on disk so that it can be served using a static file server. Other than where it’s created and served,\nthe biggest difference between the version of your app that you’ve been working on and testing using\nnpm start and the version that’s created when you use build is that the version created in the build\ndirectory uses the production version of React.\nDEVELOPMENT MODE VS. PRODUCTION\nThe production version of React is a minified version of the library with all the helpful warning\nmessages and other tools for debugging your components stripped out. Minification and removal of",
		"npm start and the version that’s created when you use build is that the version created in the build\ndirectory uses the production version of React.\nDEVELOPMENT MODE VS. PRODUCTION\nThe production version of React is a minified version of the library with all the helpful warning\nmessages and other tools for debugging your components stripped out. Minification and removal of\nunnecessary code makes a big difference in the file sizes of React and ReactDOM. The total file size\nfor the React and ReactDOM libraries in the development version is currently 1045Kb, while the\nproduction version is just 132Kb.\nYou can tell whether a React app is running in development or production by clicking the React icon\nin the Chrome extensions menu. The icon will be red for an app running in development mode and\nblue for an app running in production mode, as shown in Figure 14-4.\n344 ❘ CHAPTER 14 Deploying React\nFIGURE 14- 4: Development vs. production in the Developer Tools\nPUTTING IT ON THE WEB",
		"You can tell whether a React app is running in development or production by clicking the React icon\nin the Chrome extensions menu. The icon will be red for an app running in development mode and\nblue for an app running in production mode, as shown in Figure 14-4.\n344 ❘ CHAPTER 14 Deploying React\nFIGURE 14- 4: Development vs. production in the Developer Tools\nPUTTING IT ON THE WEB\nReact web apps can be published to the web in a variety of different ways. Which way you choose\nwill depend on the amount of traffic you expect the app to get, whether you want to integrate deploy-\nment with your version control system, and your budget for hosting.\nWeb Server Hosting\nThe easiest way to publish a React app on the web is to upload the contents of the build directory to\nany HTTP server, such as Apache or NGINX. Publishing a React app in this way is not much differ-\nent from publishing any static website built using HTML, CSS, and JavaScript.",
		"ment with your version control system, and your budget for hosting.\nWeb Server Hosting\nThe easiest way to publish a React app on the web is to upload the contents of the build directory to\nany HTTP server, such as Apache or NGINX. Publishing a React app in this way is not much differ-\nent from publishing any static website built using HTML, CSS, and JavaScript.\nIf you sign up with any standard web host that allows FTP upload or upload of files using a browser-\nbased file browser, the steps for publishing your app to the web will be similar to the following:\n1. Create or find out your FTP login credentials, or find out if your web host has a web- based\nfile uploader.\n2. Use FTP (or the web- based file uploader) to connect to your site and upload everything\ninside the build directory to your web directory (which should be named something like\nwww or htdocs).\n3. Test that your app works and that you uploaded it correctly by navigating to the root of your",
		"file uploader.\n2. Use FTP (or the web- based file uploader) to connect to your site and upload everything\ninside the build directory to your web directory (which should be named something like\nwww or htdocs).\n3. Test that your app works and that you uploaded it correctly by navigating to the root of your\nwebsite (for example, www.example.com) in a web browser.\nPutting It on the Web ❘ 345\nFor a simple app that doesn’t use routing, the preceding process will work. If your app does use rout-\ning, you’ll need to do an additional configuration to redirect any requests for subdirectories of the site\nback to index.html so they can be properly handled by React Router.\nFor an Apache server, create a file named .htaccess containing the following code:\nOptions - MultiViews\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.html [QSA,L]\nAdd this file to your public directory, and then upload it from the build directory with the rest\nof your app.\nNode Hosting",
		"back to index.html so they can be properly handled by React Router.\nFor an Apache server, create a file named .htaccess containing the following code:\nOptions - MultiViews\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.html [QSA,L]\nAdd this file to your public directory, and then upload it from the build directory with the rest\nof your app.\nNode Hosting\nIf your web server has Node.js installed, you can deploy your React app by installing the serve pack-\nage and running it.\nRun the following command to install serve globally:\nnpm install - g serve\nTo start up serve and use it to serve a particular React app, run the following command in the root\nof your project:\nserve - s build\nThe server will start up and your site will become available at your web server’s domain name at port\n5000. If you wish to modify the port, you can do so by using - listen (or - l for short) in the serve\nbuild command, like so:\nserve - s build - l 5050\nDeploying with Netlify",
		"of your project:\nserve - s build\nThe server will start up and your site will become available at your web server’s domain name at port\n5000. If you wish to modify the port, you can do so by using - listen (or - l for short) in the serve\nbuild command, like so:\nserve - s build - l 5050\nDeploying with Netlify\nModern web apps are increasingly being hosted on cloud and backend as a service (BaaS) platforms\nthat offer one- step deployment and continuous integration and continuous deployment (CI/CD). CI/\nCD means that when you commit changes to a version control system, those changes can be pushed\nto your live production environment automatically.\nOne popular target for deploying React applications is Netlify.\nTo get started with hosting your React app on Netlify, first go to https://netlify.com and sign up\nfor a free account. Because Netlify publishes directly from a Git server, you should first sign up with a",
		"to your live production environment automatically.\nOne popular target for deploying React applications is Netlify.\nTo get started with hosting your React app on Netlify, first go to https://netlify.com and sign up\nfor a free account. Because Netlify publishes directly from a Git server, you should first sign up with a\nGit repository host such as GitHub, GitLab, or Bitbucket and push your code to one of these services,\nif you haven’t already.\nThe first step in setting up hosting at Netlify is to click the New site from Git button on the Overview\npage, as shown in Figure 14-5.\nThe next screen will ask you to choose your Git provider. Click the one that you use, as shown in\nFigure 14-6.\n346 ❘ CHAPTER 14 Deploying React\nFIGURE 14- 5: Click the New site from Git button\nFIGURE 14- 6: Choose your Git provider\nPutting It on the Web ❘ 347\nOnce you authorize Netlify to access your Git provider, you can select a repository to import from, as\nshown in Figure 14-7.",
		"The next screen will ask you to choose your Git provider. Click the one that you use, as shown in\nFigure 14-6.\n346 ❘ CHAPTER 14 Deploying React\nFIGURE 14- 5: Click the New site from Git button\nFIGURE 14- 6: Choose your Git provider\nPutting It on the Web ❘ 347\nOnce you authorize Netlify to access your Git provider, you can select a repository to import from, as\nshown in Figure 14-7.\nFIGURE 14- 7: Choose a repository\nOn the next screen, you’ll be asked to provide a branch of your repository that should be deployed to\nNetlify, and to enter the build command and publish directory. For Create React App, the build com-\nmand is npm run build, and the publish directory is build.\nEnabling Routing with Netlify\nIf your app uses routing, create a directory inside your public directory named _redirects and enter\nthe following into it to correctly redirect any requests for files in the site to index.html:\n/* /index.html 200",
		"mand is npm run build, and the publish directory is build.\nEnabling Routing with Netlify\nIf your app uses routing, create a directory inside your public directory named _redirects and enter\nthe following into it to correctly redirect any requests for files in the site to index.html:\n/* /index.html 200\nAfter you’ve selected the repository that contains your app and entered the build command and the\npublish directory, Netlify will start the process of cloning and building your project and deploying it\n348 ❘ CHAPTER 14 Deploying React\nto a custom domain. If there are errors during the deployment, Netlify will let you know that deploy-\nment was unsuccessful and display an error log.\nIf your site is deployed successfully, it will become accessible using a netlify.app subdomain, as\nshown in Figure 14-8.\nFIGURE 14- 8: A deployed React app\nEnabling Custom Domains and HTTPS\nFor most public web apps, you’ll want to have a custom domain name (such as example.com) and",
		"ment was unsuccessful and display an error log.\nIf your site is deployed successfully, it will become accessible using a netlify.app subdomain, as\nshown in Figure 14-8.\nFIGURE 14- 8: A deployed React app\nEnabling Custom Domains and HTTPS\nFor most public web apps, you’ll want to have a custom domain name (such as example.com) and\nto enable encrypted serving of your app using HTTPS. Both of these can be configured in Netlify’s\nDomain management area, which is shown in Figure 14-9.\nSummary ❘ 349\nFIGURE 14- 9: Domain management in Netlify\nSUMMARY\nBuilding and deployment of a React application can be done in many different ways. Tools and tech-\nniques that have become common for automating the process have made making your application\navailable to the world reliable, repeatable, and simple.\nIn this chapter, you learned:\n➤➤ How to use Create React App to build your application.\n➤➤ How the build directory created by Create React App is structured.\n350 ❘ CHAPTER 14 Deploying React",
		"niques that have become common for automating the process have made making your application\navailable to the world reliable, repeatable, and simple.\nIn this chapter, you learned:\n➤➤ How to use Create React App to build your application.\n➤➤ How the build directory created by Create React App is structured.\n350 ❘ CHAPTER 14 Deploying React\n➤➤ How to publish a React app to a web server.\n➤➤ How to publish a React app to a node server.\n➤➤ How to publish a React app to Netlify.\nIn the next chapter, the first of the advanced part of the book, you’ll learn how to install and config-\nure some of the tools used by Create React App to make your own automated build environment or\nmodify an existing one.\n15\nInitialize a React Project\nfrom Scratch\nUsing a pre- built build toolchain, such as Create React App, is convenient and allows React\nprogrammers to focus on the most important job at hand— programming with React. However,",
		"ure some of the tools used by Create React App to make your own automated build environment or\nmodify an existing one.\n15\nInitialize a React Project\nfrom Scratch\nUsing a pre- built build toolchain, such as Create React App, is convenient and allows React\nprogrammers to focus on the most important job at hand— programming with React. However,\nthere are times when you’ll need to customize your toolchain or adjust settings in one of the\ntools that make up Create React App. Knowing what tools make up your toolchain and learn-\ning how to install and configure each of them and wire them together will give you a head start.\nIn this chapter, you’ll learn:\n➤➤ How to install and configure a module bundler.\n➤➤ How to install and configure ESLint.\n➤➤ How to use Babel.\n➤➤ How to automate tasks with npm scripts.\n➤➤ How to create a production build of your React app.\n➤➤ Options for organizing a React project.\nBUILDING YOUR OWN TOOLCHAIN",
		"In this chapter, you’ll learn:\n➤➤ How to install and configure a module bundler.\n➤➤ How to install and configure ESLint.\n➤➤ How to use Babel.\n➤➤ How to automate tasks with npm scripts.\n➤➤ How to create a production build of your React app.\n➤➤ Options for organizing a React project.\nBUILDING YOUR OWN TOOLCHAIN\nCreate React App is an invaluable tool for automating and simplifying many of the tasks\ninvolved in starting, testing, deploying, and maintaining React apps. Under the hood of Cre-\nate React App, many different Node.js packages are working together, mostly seamlessly. As a\nReact developer, having such a powerful set of tools that is continually being maintained and\nimproved is liberating.\nCreate React App is not the only build toolchain for React, however. There are alternatives to\neach of the components of Create React App and there are other toolchains available that have\nstrengths and features that Create React App lacks.",
		"React developer, having such a powerful set of tools that is continually being maintained and\nimproved is liberating.\nCreate React App is not the only build toolchain for React, however. There are alternatives to\neach of the components of Create React App and there are other toolchains available that have\nstrengths and features that Create React App lacks.\n352 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nPrior to the creation of Create React App, it was common for React developers to link together\nthe individual tools needed for a toolchain themselves. Rolling your own is seldom a requirement\ntoday, and you’ll actually be better off in most cases by using a toolchain built and maintained by\nsomeone else.\nBut just as a homeowner should have some basic skills in home repair, the experience of learning to\ninstall, configure, and link together different tools is something that every JavaScript and React devel-\noper should have.\nInitializing Your Project",
		"today, and you’ll actually be better off in most cases by using a toolchain built and maintained by\nsomeone else.\nBut just as a homeowner should have some basic skills in home repair, the experience of learning to\ninstall, configure, and link together different tools is something that every JavaScript and React devel-\noper should have.\nInitializing Your Project\nThe build toolchain and the files that make up your React application are two separate things. Even\na project that’s bootstrapped using Create React App can easily be taken out of Create React App\nand used with another toolchain. To show you how simple it can be to start a React project without a\ntoolchain, in this chapter we’ll start with just three files and build a complete app and toolchain\nfrom scratch:\n1. Select File ➪ New Window in VS Code.\n2. Click Open Folder from the Welcome Screen and select an empty directory on your computer\nwhere you want to put your new project.",
		"and used with another toolchain. To show you how simple it can be to start a React project without a\ntoolchain, in this chapter we’ll start with just three files and build a complete app and toolchain\nfrom scratch:\n1. Select File ➪ New Window in VS Code.\n2. Click Open Folder from the Welcome Screen and select an empty directory on your computer\nwhere you want to put your new project.\n3. Open a new terminal window in VS Code by selecting Terminal ➪ New Terminal from\nthe top menu.\n4. Initialize a new Node.js package and skip over answering questions about your project by\nentering npm init - y into the terminal. A package.json file will be created.\n5. Open package.json in VS Code so you can watch the changes that are made to it as you\ninstall and configure required packages.\n6. Install React and ReactDOM into the new project with this command:\nnpm install react react- dom\nThe HTML Document\nThe first file to set up is the single HTML document that will load when a browser visits the app.",
		"5. Open package.json in VS Code so you can watch the changes that are made to it as you\ninstall and configure required packages.\n6. Install React and ReactDOM into the new project with this command:\nnpm install react react- dom\nThe HTML Document\nThe first file to set up is the single HTML document that will load when a browser visits the app.\nThis can be extremely simple:\n1. Make a new folder named src. This is where we’ll keep our source files for the project.\n2. Make a new file named index.html inside the src directory.\n3. In index.html, type the ! character and then press the Tab key. This is a shortcut that will\nautomatically enter the bones of an HTML document.\n4. Create an empty div element between <body> and </body> and give it an id attribute with a\nvalue of root:\n<div id=\"root\"></div>\nListing 15-1 shows the finished index.html.\nBuilding Your Own Toolchain ❘ 353\nLISTING 15- 1: The finished index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">",
		"automatically enter the bones of an HTML document.\n4. Create an empty div element between <body> and </body> and give it an id attribute with a\nvalue of root:\n<div id=\"root\"></div>\nListing 15-1 shows the finished index.html.\nBuilding Your Own Toolchain ❘ 353\nLISTING 15- 1: The finished index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>My App</title>\n</head>\n<body>\n<div id=\"root\"></div>\n</body>\n</html>\nThe Main JavaScript File\nThe main JavaScript file is the one that calls ReactDOM.render to render the root component in\nthe browser:\n1. Create a new file named index.js inside src and open it for editing.\n2. Import React and ReactDOM:\nimport React from 'react';\nimport ReactDOM from 'react- dom';\n3. Import your root component (which we’ll create shortly):\nimport App from './App.js';\n4. Call ReactDOM.render, passing in the root component and the target DOM node:",
		"the browser:\n1. Create a new file named index.js inside src and open it for editing.\n2. Import React and ReactDOM:\nimport React from 'react';\nimport ReactDOM from 'react- dom';\n3. Import your root component (which we’ll create shortly):\nimport App from './App.js';\n4. Call ReactDOM.render, passing in the root component and the target DOM node:\nReactDOM.render(<App />, document.getElementById('root'));\nListing 15-2 shows the finished index.js.\nLISTING 15- 2: The finished index.js\nimport React from 'react';\nimport ReactDOM from 'react- dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));\nThe Root Component\nThe root component is the one that’s the parent of every other component in your app:\n1. Create a new file named App.js inside src.\n2. Inside App.js, create a simple function component to use as your root. For our purposes\nhere, this component can be anything. Listing 15-3 shows a component that will track your\nmouse position.",
		"The Root Component\nThe root component is the one that’s the parent of every other component in your app:\n1. Create a new file named App.js inside src.\n2. Inside App.js, create a simple function component to use as your root. For our purposes\nhere, this component can be anything. Listing 15-3 shows a component that will track your\nmouse position.\n354 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nLISTING 15- 3: A component to track mouse position\nimport React from 'react';\nconst App = () => {\nconst [position,setPosition] = React.useState({x:0,y:0});\nconst onMouseMove = (e) => {\nsetPosition({x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY })\n}\nconst { x, y } = position;\nreturn (\n<div style={{width:\"500px\",height:\"500px\"}}\nonMouseMove = {onMouseMove}>\n<h1>x: { x } y: { y }</h1>\n</div>\n)\n}\nexport default App;\nRunning in the Browser\nIn a perfect world, it should be possible to just import index.js into your index.html document\nand everything would work. Let’s try that out:",
		"}\nconst { x, y } = position;\nreturn (\n<div style={{width:\"500px\",height:\"500px\"}}\nonMouseMove = {onMouseMove}>\n<h1>x: { x } y: { y }</h1>\n</div>\n)\n}\nexport default App;\nRunning in the Browser\nIn a perfect world, it should be possible to just import index.js into your index.html document\nand everything would work. Let’s try that out:\n1. Use a script element to import index.js into index.html, as shown in Listing 15-4.\nLISTING 15- 4: Importing index.js into index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>My App</title>\n</head>\n<body>\n<div id=\"root\"></div>\n<script src=\"index.js\"></script>\n</body>\n</html>\n2. Install and run a basic local web server and serve your app by entering the following into\nyour terminal:\nnpx http- server src\nBuilding Your Own Toolchain ❘ 355\n3. Open the URL that the web server gives you when it starts. The result will be a blank screen",
		"<title>My App</title>\n</head>\n<body>\n<div id=\"root\"></div>\n<script src=\"index.js\"></script>\n</body>\n</html>\n2. Install and run a basic local web server and serve your app by entering the following into\nyour terminal:\nnpx http- server src\nBuilding Your Own Toolchain ❘ 355\n3. Open the URL that the web server gives you when it starts. The result will be a blank screen\nwith an error in the JavaScript console, as shown in Figure 15-1.\nFIGURE 15- 1: Attempting to load index.js without compiling\nFor our JavaScript imports and React code containing JSX to work in a browser, they need to\nbe compiled first. We’ll use the Webpack module bundler to do this.\n4. Install Webpack, the Webpack Development Server, and the Webpack command-l ine\ninterface:\nnpm install webpack webpack- dev- server webpack- cli - - save- dev\nNotice that with this install, we’re using - - save- dev to indicate that these tools are\ndevelopment dependencies that won’t be deployed to production. The result of using",
		"4. Install Webpack, the Webpack Development Server, and the Webpack command-l ine\ninterface:\nnpm install webpack webpack- dev- server webpack- cli - - save- dev\nNotice that with this install, we’re using - - save- dev to indicate that these tools are\ndevelopment dependencies that won’t be deployed to production. The result of using\n- - save- dev is that these packages will be listed in a separate section of package.json called\ndevDependencies.\n356 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\n5. Try to compile the app now, using the following command:\nnpx webpack\nYou’ll get an error saying that you need a loader, as shown in Figure 15-2. The problem is\nthat Webpack doesn’t know how to compile JSX code on its own.\nFIGURE 15- 2: JSX requires a loader\n6. Install Babel, the Babel loader for Webpack, and the Babel presets for modern JavaScript and\nfor React:\nnpm install @babel/core babel- loader @babel/preset- env @babel/preset- react - - save- dev",
		"npx webpack\nYou’ll get an error saying that you need a loader, as shown in Figure 15-2. The problem is\nthat Webpack doesn’t know how to compile JSX code on its own.\nFIGURE 15- 2: JSX requires a loader\n6. Install Babel, the Babel loader for Webpack, and the Babel presets for modern JavaScript and\nfor React:\nnpm install @babel/core babel- loader @babel/preset- env @babel/preset- react - - save- dev\n7. Create a new file named babel.config.json and enter the following code into it:\n{\n\"presets\": [\"@babel/preset- env\", \"@babel/preset- react\"]\n}\n8. Make a Webpack config file named webpack.config.js, and link to the Babel loader:\nmodule.exports = {\nmode: 'development',\nmodule: {\nrules: [\n{\ntest: /\\.js$/,\nexclude: /node_modules/,\nuse: [\"babel- loader\"]\n}\n]\n}\n};\nHow Webpack Works ❘ 357\n9. Run npx webpack. A new directory named dist will be created, containing the bundled\nmain.js file.\n10. Make a copy of index.html (from the src directory) and put it in the new dist directory.",
		"module.exports = {\nmode: 'development',\nmodule: {\nrules: [\n{\ntest: /\\.js$/,\nexclude: /node_modules/,\nuse: [\"babel- loader\"]\n}\n]\n}\n};\nHow Webpack Works ❘ 357\n9. Run npx webpack. A new directory named dist will be created, containing the bundled\nmain.js file.\n10. Make a copy of index.html (from the src directory) and put it in the new dist directory.\n11. Change the script element in index.html to import main.js:\n<script src=\"main.js\"></script>\n12. Serve the new dist directory using http- server by entering the following into the terminal:\nnpx http- server dist\n13. Open the localhost URL in your browser. It should work now, and as you move your mouse\nover the rectangle created in App.js, the x and y values should display the current position\nof your mouse, as shown in Figure 15-3.\nFIGURE 15- 3: The working React app\nHOW WEBPACK WORKS\nWebpack’s primary function is to combine the modules used in modern JavaScript development into",
		"npx http- server dist\n13. Open the localhost URL in your browser. It should work now, and as you move your mouse\nover the rectangle created in App.js, the x and y values should display the current position\nof your mouse, as shown in Figure 15-3.\nFIGURE 15- 3: The working React app\nHOW WEBPACK WORKS\nWebpack’s primary function is to combine the modules used in modern JavaScript development into\noptimized output files for use in a browser. Webpack does its magic by starting with an entry point\n(which is src/index.js by default) and building a dependency graph. A dependency graph is a list of\nevery module linked from the entry point and what the dependencies of each module are. By using the\ndependency graph, Webpack can bundle all of these files together.\n358 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nWebpack can bundle together files that use any of several different module formats, including",
		"every module linked from the entry point and what the dependencies of each module are. By using the\ndependency graph, Webpack can bundle all of these files together.\n358 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nWebpack can bundle together files that use any of several different module formats, including\nJavaScript’s import statement, CommonJS, AMD Modules, @import statements in CSS, and HTML\n<img> elements.\nLoaders\nLoaders tell Webpack how to process and bundle file types that it doesn’t natively support. Many\nloaders have been written, including CSS loaders, HTML loaders, file loaders, and more.\nLoaders can be configured in webpack.config.js by specifying a test property and a use property.\nThe test property is a regular expression that tells which files should be affected by a loader, and the\nuse property tells which loader to use for the files matching the test. You can also use an optional",
		"loaders have been written, including CSS loaders, HTML loaders, file loaders, and more.\nLoaders can be configured in webpack.config.js by specifying a test property and a use property.\nThe test property is a regular expression that tells which files should be affected by a loader, and the\nuse property tells which loader to use for the files matching the test. You can also use an optional\nproperty named exclude, which tells what files shouldn’t be affected by the loader.\nFor example, in our project, we configured a loader with the following settings:\nrules: [\n{\ntest: /\\.js$/,\nexclude: /node_modules/,\nuse: [\"babel- loader\"]\n}\n]\nThis rule says to use the babel- loader to transform any file that ends with .js, but to ignore files\ninside node_modules.\nPlugins\nPlugins extend the capabilities of Webpack. Examples of plugins include:\n➤➤ HtmlWebpackPlugin: Creates HTML files to serve the bundle.\n➤➤ NpmInstallWebpackPlugin: Automatically installs missing dependencies during bundling.",
		"use: [\"babel- loader\"]\n}\n]\nThis rule says to use the babel- loader to transform any file that ends with .js, but to ignore files\ninside node_modules.\nPlugins\nPlugins extend the capabilities of Webpack. Examples of plugins include:\n➤➤ HtmlWebpackPlugin: Creates HTML files to serve the bundle.\n➤➤ NpmInstallWebpackPlugin: Automatically installs missing dependencies during bundling.\n➤➤ ImageminWebpackPlugin: Minifies images in your project during bundling.\nPlugins can be configured in the plugins array in webpack.config.js.\nAUTOMATING YOUR BUILD PROCESS\nNow that you’ve gone from writing React code, to compiling it, to deploying it— in a very basic\nway— let’s automate the process and make our development and build toolchain a bit more\nfunctional.\nAutomating Your Build Process ❘ 359\nMaking an HTML Template\nCopying the HTML document from src to dist and inserting the correct path to the main script",
		"AUTOMATING YOUR BUILD PROCESS\nNow that you’ve gone from writing React code, to compiling it, to deploying it— in a very basic\nway— let’s automate the process and make our development and build toolchain a bit more\nfunctional.\nAutomating Your Build Process ❘ 359\nMaking an HTML Template\nCopying the HTML document from src to dist and inserting the correct path to the main script\nisn’t difficult, but it’s a step that you shouldn’t have to remember to do in an automated build. Here’s\nhow to use a Webpack plugin called HtmlWebpackPlugin to automate this process:\n1. Install HtmlWebpackPlugin:\nnpm install html- webpack- plugin - - save- dev\n2. Open webpack.config.js in VS Code and insert the following at the beginning of the file to\nimport HtmlWebpackPlugin:\nconst HtmlWebpackPlugin = require('html-w ebpack- plugin');\n3. Create a new property in webpack.config.js named plugins, as shown in Listing 15-5.\nLISTING 15- 5: Creating the plugins object\nmodule.exports = {\nmode: 'development',",
		"npm install html- webpack- plugin - - save- dev\n2. Open webpack.config.js in VS Code and insert the following at the beginning of the file to\nimport HtmlWebpackPlugin:\nconst HtmlWebpackPlugin = require('html-w ebpack- plugin');\n3. Create a new property in webpack.config.js named plugins, as shown in Listing 15-5.\nLISTING 15- 5: Creating the plugins object\nmodule.exports = {\nmode: 'development',\nmodule: {\nrules: [\n{\ntest: /\\.js$/,\nexclude: /node_modules/,\nuse: [\"babel- loader\"]\n}\n],\n},\nplugins: []\n};\nThe plugins property should contain an array of configuration objects for the plugins you\nwant to use with Webpack.\n4. Configure HtmlWebPackPlugin. You can read more about the features and capabilities of\nHtmlWebPackPlugin at https://webpack.js.org/plugins/html- webpack- plugin/.\nWe’re going to use it to copy index.html from the src directory to the dist and to inject\nthe main.js script into it. Use the following configuration object inside the plugins array:\nnew HtmlWebpackPlugin({",
		"want to use with Webpack.\n4. Configure HtmlWebPackPlugin. You can read more about the features and capabilities of\nHtmlWebPackPlugin at https://webpack.js.org/plugins/html- webpack- plugin/.\nWe’re going to use it to copy index.html from the src directory to the dist and to inject\nthe main.js script into it. Use the following configuration object inside the plugins array:\nnew HtmlWebpackPlugin({\ntemplate: __dirname + '/src/index.html',\nfilename: 'index.html',\ninject: 'body'\n})\n5. Open src/index.html and remove the <script> element from it.\n6. Delete the dist directory.\n360 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\n7. Run npx webpack to test out your Webpack configuration. If you entered everything cor-\nrectly, the index.html file should be copied from src to dist, and the compiled version in\ndist will have a script tag that imports main.js.\n8. Start up your development server and open your app in your browser to confirm that every-\nthing still works.",
		"360 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\n7. Run npx webpack to test out your Webpack configuration. If you entered everything cor-\nrectly, the index.html file should be copied from src to dist, and the compiled version in\ndist will have a script tag that imports main.js.\n8. Start up your development server and open your app in your browser to confirm that every-\nthing still works.\nDevelopment Server and Hot Reloading\nHot reloading, in a development environment, is the ability to make changes to an app and then see\nthose changes reflected automatically without needing to enter a compile command. To enable hot\nreloading with Webpack, you can use the Webpack Dev Server.\nYou already installed Webpack Dev Server in an earlier step. To use it, enter npx webpack serve\ninto the terminal. Instead of compiling to the dist directory, Webpack will serve your app at\nlocalhost:8080 (by default).",
		"those changes reflected automatically without needing to enter a compile command. To enable hot\nreloading with Webpack, you can use the Webpack Dev Server.\nYou already installed Webpack Dev Server in an earlier step. To use it, enter npx webpack serve\ninto the terminal. Instead of compiling to the dist directory, Webpack will serve your app at\nlocalhost:8080 (by default).\nWith your app being served by Webpack, try making and saving a change to App.js. Your changes\nwill be reflected immediately in the browser window. When you’re finished and want to stop the dev\nserver, press Ctrl+C in the terminal window.\nTesting Tools\nWe’ll talk more about testing in Chapter 20. Although a detailed explanation of how to test React\napps is beyond the scope of this chapter, automated testing is a critical part of any professional devel-\nopment environment. A good toolchain will include at least two testing- related components:\n➤➤ A static code analysis tool (also known as a linter).",
		"Testing Tools\nWe’ll talk more about testing in Chapter 20. Although a detailed explanation of how to test React\napps is beyond the scope of this chapter, automated testing is a critical part of any professional devel-\nopment environment. A good toolchain will include at least two testing- related components:\n➤➤ A static code analysis tool (also known as a linter).\n➤➤ An automated unit testing tool.\nInstalling and Configuring ESLint\nThe job of a static code analysis tool is to check the code you write for syntax errors and code style.\nThis process is called linting. The tool that’s currently most often used for linting JavaScript code\nis ESLint.\nESLint is highly configurable. It can be used just for checking your code for syntax errors, or it can\ncheck syntax, best practices, and code style. It can even fix some kinds of problems for you.\nTo get started with ESLint, install it into your project:\nnpm install eslint - - save- dev",
		"is ESLint.\nESLint is highly configurable. It can be used just for checking your code for syntax errors, or it can\ncheck syntax, best practices, and code style. It can even fix some kinds of problems for you.\nTo get started with ESLint, install it into your project:\nnpm install eslint - - save- dev\nOnce installed, ESLint includes an initialization script that will ask you questions about how you\nwant to use it and create a configuration file based on your answers. Follow these steps to config-\nure ESLint:\n1. Type the following command to run the initialization script:\nnpx eslint - - init\nThe configuration wizard will start and ask you an initial question about how you want to\nuse ESLint, as shown in Figure 15-4.\nAutomating Your Build Process ❘ 361\nFIGURE 15- 4: Starting the configuration wizard\n2. Use the arrow keys on your keyboard to choose any of the options. If you make a mistake\nor change your mind later, you can always run the configuration wizard again, or edit the",
		"The configuration wizard will start and ask you an initial question about how you want to\nuse ESLint, as shown in Figure 15-4.\nAutomating Your Build Process ❘ 361\nFIGURE 15- 4: Starting the configuration wizard\n2. Use the arrow keys on your keyboard to choose any of the options. If you make a mistake\nor change your mind later, you can always run the configuration wizard again, or edit the\nconfiguration file manually.\n3. Go through all of the questions in the configurator. When in doubt, choose the default\noption. At the end of the questions, the ESLint React plugin should be installed and a con-\nfiguration file for ESLint will be created and named .eslintrc.js.\n4. Open .eslintrc.js in VS Code to see what the configuration wizard generated.\n5. Check your code in the src directory by running the following command:\nnpx eslint src\nIf your code doesn’t have any errors or problems or style issues, as defined by the configura-\ntion file, ESLint shouldn’t produce any output.",
		"figuration file for ESLint will be created and named .eslintrc.js.\n4. Open .eslintrc.js in VS Code to see what the configuration wizard generated.\n5. Check your code in the src directory by running the following command:\nnpx eslint src\nIf your code doesn’t have any errors or problems or style issues, as defined by the configura-\ntion file, ESLint shouldn’t produce any output.\n6. Introduce an error into App.js. For example, delete an ending tag in the return statement.\n7. Run ESLint again to confirm that it produces an error.\nESLint Configuration\nThe easiest way to configure ESLint is to run the initialization script. But, ESLint has far more options\nthan the ones that the initialization script asks you about. The primary way to configure ESLint is\nthrough rules in the configuration file.\nIf your configuration file has a property named extends, it’s bringing in the rules from the configura-",
		"ESLint Configuration\nThe easiest way to configure ESLint is to run the initialization script. But, ESLint has far more options\nthan the ones that the initialization script asks you about. The primary way to configure ESLint is\nthrough rules in the configuration file.\nIf your configuration file has a property named extends, it’s bringing in the rules from the configura-\ntions or plugins listed there. You can override them or add additional rules in the rules property.\nESLint rules determine what will produce output when you run ESLint, and the severity (called “error\nlevel”) of the output. For example, if your style is to use single quotes around strings in JavaScript,\nyou can tell ESLint to show a warning when it finds double quotes with the following rule:\n\"quotes\": [\"warn\", \"single\"]\nThe error level can be one of three values:\n➤➤ 0 or \"off\": Disables the rule.\n➤➤ 1 or \"warn\": Displays a warning message.",
		"level”) of the output. For example, if your style is to use single quotes around strings in JavaScript,\nyou can tell ESLint to show a warning when it finds double quotes with the following rule:\n\"quotes\": [\"warn\", \"single\"]\nThe error level can be one of three values:\n➤➤ 0 or \"off\": Disables the rule.\n➤➤ 1 or \"warn\": Displays a warning message.\n➤➤ 2 or \"error\": Displays an error and sets the exit code to 1, which will cause your automated\nbuild script to fail, as you’ll see later in this chapter.\nYou can find a complete list of ESLint’s rules at https://eslint.org/docs/rules/.\n362 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nHow to Fix Errors\nWhen ESLint reports errors, you have at least two ways to resolve the problem. The first way is by\nmodifying your source code to eliminate the error or fix the bug. The second way, which is quite\ncommon when you’re first starting to configure ESLint, is to change ESLint’s configuration so that it",
		"362 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nHow to Fix Errors\nWhen ESLint reports errors, you have at least two ways to resolve the problem. The first way is by\nmodifying your source code to eliminate the error or fix the bug. The second way, which is quite\ncommon when you’re first starting to configure ESLint, is to change ESLint’s configuration so that it\ndoesn’t count the source of the error as an error.\nFor example, if your ESLint configuration reports use of double quotes as an error, this may cause\nproblems and errors that you don’t care about when ESLint checks configuration files, such as\nwebpack.config.js.\nSome of the ways you can tell ESLint not to report a certain error are:\n1. Add files that you don’t want checked to a file called .eslintignore in the root of\nyour project.\n2. Change the rule in question to a lower-l evel error or disable it.\n3. Disable a single rule for that file by adding a block comment with an eslint- disable",
		"webpack.config.js.\nSome of the ways you can tell ESLint not to report a certain error are:\n1. Add files that you don’t want checked to a file called .eslintignore in the root of\nyour project.\n2. Change the rule in question to a lower-l evel error or disable it.\n3. Disable a single rule for that file by adding a block comment with an eslint- disable\ninstruction to the file. For example, to disable the no- console rule for a file, add the follow-\ning to the top of the file:\n/* eslint- disable no- console */\nDepending on the error, you may also have a third way to fix errors: let ESLint do it. After it finishes\nrunning, ESLint may report that some of the errors are potentially fixable by ESLint, as shown in\nFigure 15-5.\nFIGURE 15- 5: Automatically fixable errors or warnings\nWhen this happens, you can have ESLint try to fix the errors by adding - - fix to your ESLint com-\nmand and running it again. If ESLint is able to fix the problems, it will just do so when it finds them.",
		"running, ESLint may report that some of the errors are potentially fixable by ESLint, as shown in\nFigure 15-5.\nFIGURE 15- 5: Automatically fixable errors or warnings\nWhen this happens, you can have ESLint try to fix the errors by adding - - fix to your ESLint com-\nmand and running it again. If ESLint is able to fix the problems, it will just do so when it finds them.\nAutomating Your Build Process ❘ 363\nTesting with Jest\nJest is an automated unit testing framework. Unit testing is the process of testing the components\nof an application in isolation. By writing tests for each component and function of your app as you\nwrite it (or before you write it, in the case of test- driven development), you’ll detect problems in your\napp earlier and improve the quality of your code.\nListing 15-6 shows an example of a basic test for the mouse tracker app from earlier in this chapter.\nLISTING 15- 6: Testing the mouse tracker\nimport React from 'react';",
		"write it (or before you write it, in the case of test- driven development), you’ll detect problems in your\napp earlier and improve the quality of your code.\nListing 15-6 shows an example of a basic test for the mouse tracker app from earlier in this chapter.\nLISTING 15- 6: Testing the mouse tracker\nimport React from 'react';\nimport {render, screen} from '@testing-l ibrary/react';\nimport App from './App';\ntest('initial position displays as 0,0', () => {\nrender(\n<App />,\n);\nexpect (screen.getByText(/x:/i).textContent).toBe('x: 0 y: 0')\n});\nFollow these steps to install and configure Jest:\n1. Install the Jest package, React Testing Library, the Babel plugin for Jest, and the React\nTest Renderer:\nnpm install jest @testing- library/react babel- jest react- test- renderer - - save- dev\n2. Run Jest:\nnpx jest - - env=jsdom\nBy default, Jest will look for tests in directories named __tests__, or files that end with",
		"});\nFollow these steps to install and configure Jest:\n1. Install the Jest package, React Testing Library, the Babel plugin for Jest, and the React\nTest Renderer:\nnpm install jest @testing- library/react babel- jest react- test- renderer - - save- dev\n2. Run Jest:\nnpx jest - - env=jsdom\nBy default, Jest will look for tests in directories named __tests__, or files that end with\n.spec.js, or files that end with .test.js. Because you don’t currently have any files or\ndirectories that match these patterns, Jest will return a message that no tests were found, as\nshown in Figure 15-6.\nFIGURE 15- 6: No tests found\n364 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nIf you save the test from Listing 15-6 into a file named App.test.js in the src directory and run Jest\nagain, it will run the test and report that it passed, as shown in Figure 15-7.\nFIGURE 15- 7: Test passed\nIf you run ESLint now, it will likely fail. The reason is that you’ve added new globals to your code",
		"FIGURE 15- 6: No tests found\n364 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nIf you save the test from Listing 15-6 into a file named App.test.js in the src directory and run Jest\nagain, it will run the test and report that it passed, as shown in Figure 15-7.\nFIGURE 15- 7: Test passed\nIf you run ESLint now, it will likely fail. The reason is that you’ve added new globals to your code\nthat ESLint doesn’t know about. To fix that, add Jest as an environment in .eslintrc.js by modify-\ning the env property, like this:\n\"env\": {\n\"browser\": true,\n\"es2021\": true,\n\"jest\": true\n},\nCreating NPM Scripts\nNow that you’ve installed and configured several tools for developing, testing, and deploying React\napps, the next step is to link them together with npm scripts.\nNpm scripts are specified in the scripts object in package.json and can be run using the npm run\ncommand. You can create as many npm scripts as you need, but generally any toolchain will have at\nleast the following scripts:",
		"Now that you’ve installed and configured several tools for developing, testing, and deploying React\napps, the next step is to link them together with npm scripts.\nNpm scripts are specified in the scripts object in package.json and can be run using the npm run\ncommand. You can create as many npm scripts as you need, but generally any toolchain will have at\nleast the following scripts:\n➤➤ npm run start: Starts the development server.\n➤➤ npm run test: Runs the automated tests.\n➤➤ npm run build: Compiles the production version of the app.\nNOTE The first two scripts (start and test) are so commonly used in Node.js\nprojects that the word “run” can be omitted when you want to run them.\nFollow these steps to write these three npm scripts, plus a couple of others that are required in our\ntoolchain:\n1. Open package.json in VS Code.\n2. Find the scripts object. By default, it will have a single script, named test, which will",
		"NOTE The first two scripts (start and test) are so commonly used in Node.js\nprojects that the word “run” can be omitted when you want to run them.\nFollow these steps to write these three npm scripts, plus a couple of others that are required in our\ntoolchain:\n1. Open package.json in VS Code.\n2. Find the scripts object. By default, it will have a single script, named test, which will\nsimply return a message that no tests are specified and will exit with an error.\nStructuring Your Source Directory ❘ 365\n3. Modify the test script to match the following:\n\"test\": \"jest - - env=jsdom\"\n4. Save package.json and enter npm test in the terminal. It should run Jest, just as if you had\nentered npx jest - - env=jsdom into the terminal.\n5. Make another property in the scripts object, named lint. The value will be eslint src,\nwhich will run the linter on your src directory:\n\"lint\": \"eslint src\"\n6. Add another script, named start, which will bundle your code and start the develop-\nment server:",
		"entered npx jest - - env=jsdom into the terminal.\n5. Make another property in the scripts object, named lint. The value will be eslint src,\nwhich will run the linter on your src directory:\n\"lint\": \"eslint src\"\n6. Add another script, named start, which will bundle your code and start the develop-\nment server:\n\"start\": \"webpack serve\"\n7. Add a bundle script:\n\"bundle\": \"webpack\"\nAt this point, the scripts object in package.json should look like Listing 15-7.\nLISTING 15- 7: Adding npm scripts\n\"scripts\": {\n\"test\": \"jest\",\n\"lint\": \"eslint src\",\n\"start\": \"webpack serve\",\n\"bundle\": \"webpack\"\n},\nThe powerful thing about npm scripts is that you can link them together and run them in sequence\nto automate complex processes. To see this in action, create a build script that runs the lint script,\nfollowed by the test script, followed by the bundle script:\n\"build\": \"npm run lint && npm run test && npm run bundle\"",
		"\"lint\": \"eslint src\",\n\"start\": \"webpack serve\",\n\"bundle\": \"webpack\"\n},\nThe powerful thing about npm scripts is that you can link them together and run them in sequence\nto automate complex processes. To see this in action, create a build script that runs the lint script,\nfollowed by the test script, followed by the bundle script:\n\"build\": \"npm run lint && npm run test && npm run bundle\"\nWhen you run the build script, it will go through each of the component scripts in order. If one of\nthem encounters an error, the build script will fail.\nSTRUCTURING YOUR SOURCE DIRECTORY\nOnce you have a basic toolchain in place, you can save it by itself, for example in a Git repository,\nand then clone it any time you need to start a new React project. Or, you can use Create React App,\nbut with a new confidence that you know how to fix or customize your toolchain when you need to.\nEither way, the toolchain is just a necessary step before you can get to the real work of writing an",
		"Once you have a basic toolchain in place, you can save it by itself, for example in a Git repository,\nand then clone it any time you need to start a new React project. Or, you can use Create React App,\nbut with a new confidence that you know how to fix or customize your toolchain when you need to.\nEither way, the toolchain is just a necessary step before you can get to the real work of writing an\napp. The next step in the process is to give some thought to how to efficiently organize your source\nfiles. In the end, of course, your entire project will get rolled up into bundles by Webpack and\norganization of your source code doesn’t have a direct effect on the final dist or build directory.\nBut, organization of your source files helps you and other developers to visualize the structure of the\n366 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nproject without having to read through the code, and it also gives you a framework for improving\nand expanding your app.",
		"organization of your source code doesn’t have a direct effect on the final dist or build directory.\nBut, organization of your source files helps you and other developers to visualize the structure of the\n366 ❘ CHAPTER 15 InItIalIze a React PRoject fRom ScRatch\nproject without having to read through the code, and it also gives you a framework for improving\nand expanding your app.\nReact intentionally doesn’t put limits on how you write code or name your functions, files, and fold-\ners. As a result, you’ll see many different opinions on the “correct” way to do things. You’ll also see\nplenty of experienced React developers who recommend taking a flexible approach to structuring\nyour project— just get started and evolve as the need arises.\nSeveral approaches have become common, however, and adopting parts of someone else’s evolved\nbest practice can save you the time and frustration of reinventing the wheel for yourself.\nGrouping by File Type",
		"plenty of experienced React developers who recommend taking a flexible approach to structuring\nyour project— just get started and evolve as the need arises.\nSeveral approaches have become common, however, and adopting parts of someone else’s evolved\nbest practice can save you the time and frustration of reinventing the wheel for yourself.\nGrouping by File Type\nGrouping React source files by type typically means that you start with a single directory named com-\nponents, and then expand outward from there as the need arises. For small projects, the components\ndirectory may be all you need. For larger projects, however, it can be helpful to create subdirectories\ninside of components and to move certain kinds of files into their own directories.\nExamples of directories you might create in this strategy include:\n➤➤ css\n➤➤ hooks\n➤➤ utilities (often abbreviated as utils or named helpers)\n➤➤ api\n➤➤ routes\n➤➤ images",
		"directory may be all you need. For larger projects, however, it can be helpful to create subdirectories\ninside of components and to move certain kinds of files into their own directories.\nExamples of directories you might create in this strategy include:\n➤➤ css\n➤➤ hooks\n➤➤ utilities (often abbreviated as utils or named helpers)\n➤➤ api\n➤➤ routes\n➤➤ images\nFigure 15-8 shows an example of a project that was structured using groups of file types.\nFIGURE 15- 8: Grouping by file type\nSummary ❘ 367\nGrouping by Features\nGrouping by features means that you create a directory structure that mirrors the main functional\nareas or routes in your app. For example, an app for accounting might have a route named income\nand one named expenses. Inside these directories, you may continue to group components and other\nsource files by purpose, or you may decide to switch to grouping by file type inside of the func-\ntional areas.",
		"areas or routes in your app. For example, an app for accounting might have a route named income\nand one named expenses. Inside these directories, you may continue to group components and other\nsource files by purpose, or you may decide to switch to grouping by file type inside of the func-\ntional areas.\nFigure 15-9 shows an example of a project that was structured by grouping files by features.\nFIGURE 15- 9: Grouping by features\nSUMMARY\nEven if you decide to use a pre- built toolchain such as Create React App (which is actually a very\ngood idea for most people), knowing how to configure your own toolchain is an essential skill for\nmodern JavaScript and web developers.\nIn this chapter, you learned:\n➤➤ How to start a project from scratch.\n➤➤ Why a module bundler is necessary.\n➤➤ How Webpack works.\n➤➤ How to automate your build.\n➤➤ How to install ESLint and Jest.\n➤➤ Popular ways to structure React source files.",
		"good idea for most people), knowing how to configure your own toolchain is an essential skill for\nmodern JavaScript and web developers.\nIn this chapter, you learned:\n➤➤ How to start a project from scratch.\n➤➤ Why a module bundler is necessary.\n➤➤ How Webpack works.\n➤➤ How to automate your build.\n➤➤ How to install ESLint and Jest.\n➤➤ Popular ways to structure React source files.\nIn the next chapter, you’ll learn how to reach beyond your app and fetch data from remote sources\nand how to store data between sessions.",
		"16\nFetching and Caching Data\nIt’s possible to build great user interfaces that are self- contained and don’t need to interact with\nthe outside world (such as many games, calculators, and utilities). But, most web apps have a\nneed to receive and store data.\nIn this chapter, you’ll learn:\n➤➤ When to fetch and store data in React.\n➤➤ How to use window.fetch.\n➤➤ What promises are.\n➤➤ How async/await works.\n➤➤ How to simplify network requests with Axios.\n➤➤ How to store data in localStorage.\n➤➤ How to read data from localStorage.\nASYNCHRONOUS CODE: IT’S ALL ABOUT TIMING\nWhenever you update state, do a side effect, or store data in the user’s browser, these tasks take\ntime. One of the trickiest, but also most important, skills that a React developer needs to have is\nlearning how to properly handle asynchronous tasks.\nWith state updates, ReactDOM handles everything for you. You simply call setState (in a",
		"ASYNCHRONOUS CODE: IT’S ALL ABOUT TIMING\nWhenever you update state, do a side effect, or store data in the user’s browser, these tasks take\ntime. One of the trickiest, but also most important, skills that a React developer needs to have is\nlearning how to properly handle asynchronous tasks.\nWith state updates, ReactDOM handles everything for you. You simply call setState (in a\nclass component) or pass data to a function returned by the useState hook (in a function\ncomponent). Most of the time, the asynchronous nature of setting React state is seamless and\ninvisible to the developer and the user.\nWith network and cache requests, on the other hand, every request has the potential to\nadversely impact the user experience. In the worst case, a remote resource won’t be available.\nMore often, the amount of time a request takes will be wildly variable, depending on the user’s\ninternet connection, network congestion, and the remote server’s current workload.",
		"With network and cache requests, on the other hand, every request has the potential to\nadversely impact the user experience. In the worst case, a remote resource won’t be available.\nMore often, the amount of time a request takes will be wildly variable, depending on the user’s\ninternet connection, network congestion, and the remote server’s current workload.\n370 ❘ CHAPTER 16 Fetching and caching data\nJavaScript itself is rarely the issue—J avaScript is fast and usually only gets bogged down if the devel-\noper made a mistake (such as creating an infinite loop or a memory leak). One reason why JavaScript\nis so fast and the reason that handling asynchronous code correctly is so important is that JavaScript\ndoesn’t wait for anything.\nJAVASCRIPT NEVER SLEEPS\nJavaScript doesn’t have a sleep or wait command. Instead, a JavaScript engine (such as the V8 Engine\nbuilt into the Chrome web browser and Node.js) starts at the beginning of your script and runs the",
		"is so fast and the reason that handling asynchronous code correctly is so important is that JavaScript\ndoesn’t wait for anything.\nJAVASCRIPT NEVER SLEEPS\nJavaScript doesn’t have a sleep or wait command. Instead, a JavaScript engine (such as the V8 Engine\nbuilt into the Chrome web browser and Node.js) starts at the beginning of your script and runs the\ncode as fast as it can, using a single thread. Because JavaScript is single- threaded, it must complete the\nprevious statement before moving on to the next.\nThe call stack in a JavaScript engine is where commands waiting to be executed sit until they can be\nexecuted in a First In Last Out (FILO) order.\nYou might be asking yourself at this point how it’s possible to do asynchronous tasks (like network\nrequests and caching data) in JavaScript with only one thread. The answer is that although JavaScript\nitself is single- threaded, the environment in which it runs (your browser or Node.js) is multithreaded.",
		"executed in a First In Last Out (FILO) order.\nYou might be asking yourself at this point how it’s possible to do asynchronous tasks (like network\nrequests and caching data) in JavaScript with only one thread. The answer is that although JavaScript\nitself is single- threaded, the environment in which it runs (your browser or Node.js) is multithreaded.\nAsynchronous tasks (like network requests) are handled by parts of the browser that are outside of\nthe JavaScript engine, such as the Web APIs, in conjunction with two other parts of the runtime envi-\nronment outside of JavaScript: the event loop and the callback queue.\nConsider the following code:\nconsole.log(\"get ready...\");\nsetTimeout(() => {\nconsole.log(\"here it is!\");\n}, 1000);\nconsole.log(\"end of the code.\");\nThe result of running this code in a browser console is shown in Figure 16-1.\nWhat’s going on here is that when this program starts up, three function calls are added to the call",
		"ronment outside of JavaScript: the event loop and the callback queue.\nConsider the following code:\nconsole.log(\"get ready...\");\nsetTimeout(() => {\nconsole.log(\"here it is!\");\n}, 1000);\nconsole.log(\"end of the code.\");\nThe result of running this code in a browser console is shown in Figure 16-1.\nWhat’s going on here is that when this program starts up, three function calls are added to the call\nstack to be executed in order. After the first statement is executed and removed from the call stack,\nJavaScript sees the setTimeout() function, which creates an event that is only indirectly managed\nby JavaScript. It hands it off to the browser to execute, and then removes it from the call stack.\nJava Script can then move on to the third statement.\nThe Web API, in the meantime, waits for one second (because of the 1,000-millisecond timeout\nlength you passed to it) and then adds your callback function to the browser’s callback queue. The",
		"by JavaScript. It hands it off to the browser to execute, and then removes it from the call stack.\nJava Script can then move on to the third statement.\nThe Web API, in the meantime, waits for one second (because of the 1,000-millisecond timeout\nlength you passed to it) and then adds your callback function to the browser’s callback queue. The\nevent loop (which is in charge of listening for events and registering event listeners in the JavaScript\nenvironment) picks up the function from the callback queue and adds it to JavaScript’s call stack to\nbe executed.\nFigure 16-2 shows a diagram of the whole process.\nCallback functions, which get executed upon completion of an asynchronous task, are how\nJava Script programmers can write code that depends on the result of that asynchronous task. If you\nwant to have multiple asynchronous tasks that happen in a particular order, you can put them inside\nthe callback functions from other asynchronous tasks, as shown in Listing 16-1.",
		"Callback functions, which get executed upon completion of an asynchronous task, are how\nJava Script programmers can write code that depends on the result of that asynchronous task. If you\nwant to have multiple asynchronous tasks that happen in a particular order, you can put them inside\nthe callback functions from other asynchronous tasks, as shown in Listing 16-1.\nJavaScript Never Sleeps ❘ 371\nFIGURE 16- 1: Executing asynchronous JavaScript\nJavaScript\nWeb APIs\nCall\nStack DOM\nFetch\nsetTimeout\nCallback Queue\nEvent Loop\nFIGURE 16- 2: How asynchronous tasks are handled\n372 ❘ CHAPTER 16 Fetching and caching data\nLISTING 16- 1: Callbacks within callbacks\nfunction userCheck(username, password, callback){\ndb.verifyUser(username, password, (error, userInfo) => {\nif (error) {\ncallback(error)\n}else{\ndb.getRoles(username, (error, roles) => {\nif (error){\ncallback(error)\n}else {\ndb.logAccess(username, (error) => {\nif (error){\ncallback(error);\n}else{\ncallback(null, userInfo, roles);\n}\n})\n}\n})\n}\n})",
		"LISTING 16- 1: Callbacks within callbacks\nfunction userCheck(username, password, callback){\ndb.verifyUser(username, password, (error, userInfo) => {\nif (error) {\ncallback(error)\n}else{\ndb.getRoles(username, (error, roles) => {\nif (error){\ncallback(error)\n}else {\ndb.logAccess(username, (error) => {\nif (error){\ncallback(error);\n}else{\ncallback(null, userInfo, roles);\n}\n})\n}\n})\n}\n})\n};\nIn the preceding example, what should happen when the userCheck() function is called (absent any\nerrors) is the following:\n1. Verify the user’s credentials.\n2. Get the user’s access permissions.\n3. Create a log entry.\nNested callbacks can be difficult to read, however, so more intuitive ways to perform tasks in\nresponse to asynchronous tasks have been created— namely promises and async/await.\nJAVASCRIPT LESSON: PROMISES AND ASYNC/AWAIT\nThis JavaScript lesson examines promises, async, and await.\nPromises\nA promise is a placeholder for the result of an asynchronous action. It lets you write",
		"Nested callbacks can be difficult to read, however, so more intuitive ways to perform tasks in\nresponse to asynchronous tasks have been created— namely promises and async/await.\nJAVASCRIPT LESSON: PROMISES AND ASYNC/AWAIT\nThis JavaScript lesson examines promises, async, and await.\nPromises\nA promise is a placeholder for the result of an asynchronous action. It lets you write\nasynchronous code in a synchronous way, but instead of returning the final value, it\nreturns a “promise” to return the final value at some point.\nPromises can be in one of three states:\n➤➤ Pending: This is the initial state of a promise.\n➤➤ Fulfilled: The operation was completed successfully.\n➤➤ Rejected: The operation failed.\nJavaScript Never Sleeps ❘ 373\nWhen a promise becomes fulfilled, it can be chained to additional promises using the\nthen method, as in the following example:\nreceiveHamburger\n.then(eatHamburger)\n.then(payForHamburger)",
		"Promises can be in one of three states:\n➤➤ Pending: This is the initial state of a promise.\n➤➤ Fulfilled: The operation was completed successfully.\n➤➤ Rejected: The operation failed.\nJavaScript Never Sleeps ❘ 373\nWhen a promise becomes fulfilled, it can be chained to additional promises using the\nthen method, as in the following example:\nreceiveHamburger\n.then(eatHamburger)\n.then(payForHamburger)\nIn order for the preceding code to work, each of the functions must return a Promise\nobject. For example, here’s what the receiveHamburger function might look like:\nconst receiveHamburger = function(){\nreturn new Promise((resolve,reject) => {\ngetHamburger((result) => {\nresolve(result);\n})\n))\n};\nIf something goes wrong and the promise is rejected, the catch method can be used\nto handle the error:\nreceiveHamburger\n.then(eatHamburger)\n.then(payForHamburger)\n.catch((err)=>{ //handle the error here }\nasync/await\nPromises are great, but they still require the use of callbacks. A couple of the best",
		"return new Promise((resolve,reject) => {\ngetHamburger((result) => {\nresolve(result);\n})\n))\n};\nIf something goes wrong and the promise is rejected, the catch method can be used\nto handle the error:\nreceiveHamburger\n.then(eatHamburger)\n.then(payForHamburger)\n.catch((err)=>{ //handle the error here }\nasync/await\nPromises are great, but they still require the use of callbacks. A couple of the best\nimprovements to how asynchronous code is written are the async and await state-\nments. With async and await, you can write code that really does look synchronous.\nFor example, here’s our hamburger example written with async and await:\nconst tradeForHamburger = async function() {\ntry {\nawait receiveHamburger();\nawait eatHamburger();\nawait payForHamburger();\n} catch(e) {\n// handle errors\n}\n}\nAlthough async/await is an abstraction of promises, it’s easier to write and read than\neither callbacks or promises. Behind the scenes, an async function always returns a",
		"const tradeForHamburger = async function() {\ntry {\nawait receiveHamburger();\nawait eatHamburger();\nawait payForHamburger();\n} catch(e) {\n// handle errors\n}\n}\nAlthough async/await is an abstraction of promises, it’s easier to write and read than\neither callbacks or promises. Behind the scenes, an async function always returns a\nPromise. If the return value of an async function isn’t explicitly a Promise, it will\nbe implicitly wrapped in one.\nFor example, the following function:\nasync function eatHamburger(){\nreturn 1;\n} continues\n374 ❘ CHAPTER 16 Fetching and caching data\ncontinued\nis essentially the same as this one:\nfunction eatHamburger(){\nreturn Promise.resolve(1);\n}\nOnce you make an async function, you can use the await keyword inside of it to\nwait for any promise inside of it without having to make any changes to other func-\ntions. Inside an async function, the await keyword will cause the function to wait",
		"374 ❘ CHAPTER 16 Fetching and caching data\ncontinued\nis essentially the same as this one:\nfunction eatHamburger(){\nreturn Promise.resolve(1);\n}\nOnce you make an async function, you can use the await keyword inside of it to\nwait for any promise inside of it without having to make any changes to other func-\ntions. Inside an async function, the await keyword will cause the function to wait\nuntil the statement following it returns before moving on to the next statement.\nWHERE TO RUN ASYNC CODE IN REACT\nAsynchronous code, such as data fetching, can be done at several points in the life of a component,\nincluding:\n➤➤ When the component first mounts.\n➤➤ In response to a user action (such as clicking a button).\n➤➤ In response to changes in the component (such as receiving new props).\n➤➤ In response to timers (such as apps that refresh periodically).\nIn a class component, initial data can be loaded using the componentDidMount lifecycle method,",
		"including:\n➤➤ When the component first mounts.\n➤➤ In response to a user action (such as clicking a button).\n➤➤ In response to changes in the component (such as receiving new props).\n➤➤ In response to timers (such as apps that refresh periodically).\nIn a class component, initial data can be loaded using the componentDidMount lifecycle method,\nand updates to data in response to component changes can be done using the componentDidUpdate\nmethod, as shown in Listing 16-2.\nNOTE To try out Listing 16‑2 and Listing 16‑3, you’ll need a free API key from\nhttps://newsapi.org/.\nLISTING 16- 2: Loading initial data in a class component\nimport {Component} from 'react';\nclass NewsFeed extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\nnews:[]\n}\n}\ncomponentDidMount(){\nfetch('https://newsapi.org/v2/top-h eadlines?country=us&apiKey=[YOUR KEY]')\nWhere to Run Async Code in React ❘ 375\n.then(response => response.json())\n.then(data => {\nthis.setState({news:data.articles})})",
		"import {Component} from 'react';\nclass NewsFeed extends Component {\nconstructor(props){\nsuper(props);\nthis.state={\nnews:[]\n}\n}\ncomponentDidMount(){\nfetch('https://newsapi.org/v2/top-h eadlines?country=us&apiKey=[YOUR KEY]')\nWhere to Run Async Code in React ❘ 375\n.then(response => response.json())\n.then(data => {\nthis.setState({news:data.articles})})\n.catch(error => console.error(error))\n}\nrender(){\nconst todaysNews = this.state.news.map((article)=>{\nreturn (<p>{article.title}</p>);\n})\nreturn(\n<>\n<h1>Today's News</h1>\n{todaysNews}\n</>\n)\n}\n}\nexport default NewsFeed;\nIn a function component, the useEffect hook can be used for fetching a component’s initial data as\nwell as in response to the component receiving new data, as shown in Listing 16-3.\nLISTING 16- 3: Loading initial data in a function component\nimport {useState,useEffect} from 'react';\nconst NewsFeedFunction = () => {\nconst [news,setNews] = useState([]);\nuseEffect(()=> {",
		"}\n}\nexport default NewsFeed;\nIn a function component, the useEffect hook can be used for fetching a component’s initial data as\nwell as in response to the component receiving new data, as shown in Listing 16-3.\nLISTING 16- 3: Loading initial data in a function component\nimport {useState,useEffect} from 'react';\nconst NewsFeedFunction = () => {\nconst [news,setNews] = useState([]);\nuseEffect(()=> {\nfetch('https://newsapi.org/v2/top-h eadlines?country=us&apiKey=[YOUR KEY]')\n.then(response => response.json())\n.then(data => {\nsetNews(data.articles)\n})\n.catch(error => console.error(error))\n},[])\nconst todaysNews = news.map((article)=>{\nreturn (<p>{article.title}</p>);\n})\nreturn(\n<>\n<h1>Today's News</h1>\n{todaysNews}\n</>\n)\n}\nexport default NewsFeedFunction;\n376 ❘ CHAPTER 16 Fetching and caching data\nWAYS TO FETCH\nOnce you know how and where to run asynchronous code in React components, the rest is just a",
		".then(data => {\nsetNews(data.articles)\n})\n.catch(error => console.error(error))\n},[])\nconst todaysNews = news.map((article)=>{\nreturn (<p>{article.title}</p>);\n})\nreturn(\n<>\n<h1>Today's News</h1>\n{todaysNews}\n</>\n)\n}\nexport default NewsFeedFunction;\n376 ❘ CHAPTER 16 Fetching and caching data\nWAYS TO FETCH\nOnce you know how and where to run asynchronous code in React components, the rest is just a\nmatter of knowing the properties and methods of the tool you want to use and knowing the structure\nof the data source.\nMost single page web applications access data sources using web APIs based on the REST archi-\ntecture style. Data sent and received between a user interface and a RESTful API is usually in the\nJSON format.\nJAVASCRIPT LESSON: REST\nRepresentational State Transfer, or REST, is an architectural style for application\nprogramming interfaces (APIs). RESTful APIs use HTTP requests to get, add, update,\nand delete data using unique URLs. RESTful APIs rely on the fact that HTTP has",
		"tecture style. Data sent and received between a user interface and a RESTful API is usually in the\nJSON format.\nJAVASCRIPT LESSON: REST\nRepresentational State Transfer, or REST, is an architectural style for application\nprogramming interfaces (APIs). RESTful APIs use HTTP requests to get, add, update,\nand delete data using unique URLs. RESTful APIs rely on the fact that HTTP has\nbuilt into it different methods for accessing resources. REST maps these methods to\noperations that can be performed using the API:\n➤➤ To fetch data, use the HTTP GET method.\n➤➤ To add data, use the HTTP POST method.\n➤➤ To update data, use the HTTP PUT method.\n➤➤ To delete data, use the HTTP DELETE method.\nFor example, to get data about a user with an ID of 23 using a RESTful API, you\nmight make an HTTP GET request to the following URL:\nhttps://www.example.com/user/23/\nTo delete the user with the ID of 23, you would use the HTTP DELETE method to\naccess that same URL.",
		"➤➤ To add data, use the HTTP POST method.\n➤➤ To update data, use the HTTP PUT method.\n➤➤ To delete data, use the HTTP DELETE method.\nFor example, to get data about a user with an ID of 23 using a RESTful API, you\nmight make an HTTP GET request to the following URL:\nhttps://www.example.com/user/23/\nTo delete the user with the ID of 23, you would use the HTTP DELETE method to\naccess that same URL.\nTo try out a RESTful API, open a browser window and enter the following URL into\nthe address bar:\nhttps://api.github.com/users/facebook/repos\nThis will do an HTTP GET to retrieve a list of Facebook’s repositories on GitHub\nand display the returned JSON in the browser window.\nTo fetch and return the data from this same URL in a JavaScript program, you can\nuse the Fetch API along with Promises:\nfetch('https://api.github.com/users/facebook/repos', {\nmethod: 'GET',\nheaders: {\n'Content- Type': 'application/json'\n}\n})\n.then(response => response.json())\n.then(data => {\nconsole.log('Success:', data);",
		"and display the returned JSON in the browser window.\nTo fetch and return the data from this same URL in a JavaScript program, you can\nuse the Fetch API along with Promises:\nfetch('https://api.github.com/users/facebook/repos', {\nmethod: 'GET',\nheaders: {\n'Content- Type': 'application/json'\n}\n})\n.then(response => response.json())\n.then(data => {\nconsole.log('Success:', data);\n})\nGetting Data with Axios ❘ 377\nGETTING DATA WITH FETCH\nwindow.fetch is a method built into all modern browsers that allows you to perform HTTP requests\nfrom JavaScript without loading a separate library. Listing 16-4 shows an example of using the Fetch\nAPI to fetch data and log it to the console in a React component.\nLISTING 16- 4: Using Fetch in response to events\nimport {useState} from 'react';\nfunction Restful(){\nconst [repos,setRepos] = useState([]);\nconst [status,setStatus] = useState();\nconst getRepos = function(){\nfetch('https://api.github.com/users/facebook/repos')\n.then(response => response.json())",
		"API to fetch data and log it to the console in a React component.\nLISTING 16- 4: Using Fetch in response to events\nimport {useState} from 'react';\nfunction Restful(){\nconst [repos,setRepos] = useState([]);\nconst [status,setStatus] = useState();\nconst getRepos = function(){\nfetch('https://api.github.com/users/facebook/repos')\n.then(response => response.json())\n.then(data => {\nsetRepos(data);})\n.then(setStatus(\"fetched\"))\n.catch(error => console.error(error))\n}\nconst logRepos = function(){\nconsole.log(repos);\n}\nreturn(\n<>\n<button onClick={getRepos}>{status?\"Fetched\":\"Fetch Repos\"}</button>\n<button onClick={logRepos}>Log Repos</button>\n</>\n)\n}\nexport default Restful;\nGETTING DATA WITH AXIOS\nAxios is a popular AJAX library that you can use instead of the browser’s native Fetch API. Axios has\nadvantages over window.fetch in terms of ease of use and capabilities, but using it does require you\nto load a separate library.\nTo install Axios, use the following command:\nnpm install axios",
		"<button onClick={logRepos}>Log Repos</button>\n</>\n)\n}\nexport default Restful;\nGETTING DATA WITH AXIOS\nAxios is a popular AJAX library that you can use instead of the browser’s native Fetch API. Axios has\nadvantages over window.fetch in terms of ease of use and capabilities, but using it does require you\nto load a separate library.\nTo install Axios, use the following command:\nnpm install axios\n378 ❘ CHAPTER 16 Fetching and caching data\nAxios has a method named axios that takes a configuration object as its parameter. The configu-\nration object can contain many different properties, but the only ones required to perform a basic\nHTTP GET request are method and url:\naxios({\nmethod: 'GET',\nurl:'https://api.github.com/users/facebook/repos'\n});\nLike the window.fetch method, the axios method returns a Promise, which you can then chain to\nadditional methods to work with the returned data.\nUnlike window.fetch, axios automatically decodes the returned JSON data. What this means is that",
		"HTTP GET request are method and url:\naxios({\nmethod: 'GET',\nurl:'https://api.github.com/users/facebook/repos'\n});\nLike the window.fetch method, the axios method returns a Promise, which you can then chain to\nadditional methods to work with the returned data.\nUnlike window.fetch, axios automatically decodes the returned JSON data. What this means is that\nwhen you use Axios, you don’t need to convert the response to JSON data before you can make use\nof it as you do with window.fetch.\nListing 16-5 shows an example of using Axios to perform a GET request in a component.\nLISTING 16- 5: Performing a GET request with Axios\nimport {useState} from 'react';\nimport axios from 'axios';\nfunction Restful(){\nconst [repos,setRepos] = useState([]);\nconst [status,setStatus] = useState();\nconst getRepos = function(){\naxios({\nmethod:'get',\nurl:'https://api.github.com/users/facebook/repos'\n}).then(resp => {setRepos(resp.data);})\n.then(setStatus(\"fetched\"))\n.catch(error => console.error(error))\n}",
		"import {useState} from 'react';\nimport axios from 'axios';\nfunction Restful(){\nconst [repos,setRepos] = useState([]);\nconst [status,setStatus] = useState();\nconst getRepos = function(){\naxios({\nmethod:'get',\nurl:'https://api.github.com/users/facebook/repos'\n}).then(resp => {setRepos(resp.data);})\n.then(setStatus(\"fetched\"))\n.catch(error => console.error(error))\n}\nconst logRepos = function(){\nconsole.log(repos);\n}\nreturn(\n<>\n<button onClick={getRepos}>{status?\"Fetched\":\"Fetch Repos\"}</button>\n<button onClick={logRepos}>Log Repos</button>\n</>\n)\n}\nexport default Restful;\nIn addition to the axios method, Axios also provides convenience functions for each HTTP\nmethod. The convenience functions are aliases to full axios calls that you can use without passing a\nUsing Web Storage ❘ 379\nconfiguration object. The convenience methods include:\n➤➤ axios.get\n➤➤ axios.post\n➤➤ axios.delete\n➤➤ axios.put\nUsing one of these methods can be as easy as passing it the URL for the request, like this:",
		"method. The convenience functions are aliases to full axios calls that you can use without passing a\nUsing Web Storage ❘ 379\nconfiguration object. The convenience methods include:\n➤➤ axios.get\n➤➤ axios.post\n➤➤ axios.delete\n➤➤ axios.put\nUsing one of these methods can be as easy as passing it the URL for the request, like this:\naxios.get('/user/1');\nBoth GET and DELETE calls are frequently made without passing any additional data, since all of the\ndata required to perform their actions on the server are contained in the URL. The POST and PUT\nmethods require a payload. That can be specified using the data property in the config object.\nFor example, to post data from a signup form using Axios, you might use the following:\naxios.post('/user/',{\nfirstName:'Frank',\nlastName:'Columbo',\nemail:'f.columbo@lapdonline.org'\n});\nUSING WEB STORAGE\nWeb applications, by default, don’t persist data between sessions. What this means for React user",
		"methods require a payload. That can be specified using the data property in the config object.\nFor example, to post data from a signup form using Axios, you might use the following:\naxios.post('/user/',{\nfirstName:'Frank',\nlastName:'Columbo',\nemail:'f.columbo@lapdonline.org'\n});\nUSING WEB STORAGE\nWeb applications, by default, don’t persist data between sessions. What this means for React user\ninterfaces is that if a user leaves your application and returns later, or refreshes the browser window,\nthe state data returns to the initial state.\nOne solution to persisting data between sessions is to save data on the server and associate it with the\nuser’s login info or a unique key stored in a browser cookie. When the user visits the app again, they\ncan log in or the cookie can be read and the data can be downloaded from the server.\nDownloading from the server is slow and inefficient, however, and if you can store data locally, you’ll",
		"One solution to persisting data between sessions is to save data on the server and associate it with the\nuser’s login info or a unique key stored in a browser cookie. When the user visits the app again, they\ncan log in or the cookie can be read and the data can be downloaded from the server.\nDownloading from the server is slow and inefficient, however, and if you can store data locally, you’ll\nimprove the performance of a user interface. The Web Storage API, which is supported by all modern\nbrowsers, is an easy way to store key/value pairs of string data in a user’s browser.\nTwo Types of Web Storage\nWeb Storage includes two objects, window.sessionStorage and window.localStorage. Both\nproperties work the same: they access a Storage object that stores data associated with the current\napplication, as identified by its origin. A web application’s origin is made up of the protocol (HTTP\nor HTTPS), host domain, and port. Web Storage provides at least 5MB of storage per origin.",
		"Web Storage includes two objects, window.sessionStorage and window.localStorage. Both\nproperties work the same: they access a Storage object that stores data associated with the current\napplication, as identified by its origin. A web application’s origin is made up of the protocol (HTTP\nor HTTPS), host domain, and port. Web Storage provides at least 5MB of storage per origin.\nThe difference between sessionStorage and localStorage is that sessionStorage only lasts as\nlong as the current browser tab is open, while localStorage persists between tabs and sessions.\nBecause localStorage gives you all the benefits of sessionStorage plus persistence between\nsessions, it’s more commonly used.\n380 ❘ CHAPTER 16 Fetching and caching data\nWhen to Use Web Storage\nWeb Storage can be used to remember where the user was in an application the last time they visited.\nFor example, if your application includes a lengthy form, the user’s input into that form can be saved",
		"Because localStorage gives you all the benefits of sessionStorage plus persistence between\nsessions, it’s more commonly used.\n380 ❘ CHAPTER 16 Fetching and caching data\nWhen to Use Web Storage\nWeb Storage can be used to remember where the user was in an application the last time they visited.\nFor example, if your application includes a lengthy form, the user’s input into that form can be saved\nto Web Storage so that if something happens (such as a browser crash) while they’re filling it out,\nthey can return to the form and continue where they left off. One simple and common use for Web\nStorage is to remember a user’s login name between sessions, such as in the user interface shown in\nFigure 16-3.\nFIGURE 16- 3: Remembering a user with Web Storage\nWhen Not to Use Web Storage\nWeb Storage can’t save data between browsers, different computers, or different origins and it will be\nerased if a user clears their browser’s cache. For these reasons, it’s not a replacement for storing data",
		"Storage is to remember a user’s login name between sessions, such as in the user interface shown in\nFigure 16-3.\nFIGURE 16- 3: Remembering a user with Web Storage\nWhen Not to Use Web Storage\nWeb Storage can’t save data between browsers, different computers, or different origins and it will be\nerased if a user clears their browser’s cache. For these reasons, it’s not a replacement for storing data\non a server that can be downloaded to any device with internet access. Instead, Web Storage should\nbe used like a temporary cache of data entered by the user or downloaded from the server.\nWeb Storage should also never be used for storing sensitive data, such as credit card info or pass-\nwords. Although the same-o rigin policy provides some security from other sites being able to read\ndata stored in an application’s Web Storage, it’s not much protection. If one of the hundreds of mod-\nules that make up a JavaScript application were to be compromised, code could be inserted into it to",
		"words. Although the same-o rigin policy provides some security from other sites being able to read\ndata stored in an application’s Web Storage, it’s not much protection. If one of the hundreds of mod-\nules that make up a JavaScript application were to be compromised, code could be inserted into it to\naccess and transmit stolen Web Storage data to a remote server.\nWeb Storage Is Synchronous\nAlthough Web Storage is useful for improving the performance of your application, it can also cause\nperformance problems if overused. Unlike APIs for retrieving data from servers (such as Fetch) and\neven other local storage APIs (such as indexedDB), Web Storage is synchronous. Each call to read or\nwrite from Web Storage blocks the execution of your app until the operation is complete.\nThat said, Web Storage is very fast. In most cases, using Web Storage to avoid making an HTTP\nrequest will improve the performance of your user interface. But, be careful not to overuse it.\nUsing Web Storage ❘ 381",
		"write from Web Storage blocks the execution of your app until the operation is complete.\nThat said, Web Storage is very fast. In most cases, using Web Storage to avoid making an HTTP\nrequest will improve the performance of your user interface. But, be careful not to overuse it.\nUsing Web Storage ❘ 381\nWorking with localStorage\nTo demonstrate how to use localStorage, we’ll start with a simple app that doesn’t use\nlocalStorage. Listing 16-6 shows a simple counter web application that could be used on a mobile\ndevice by someone at a retail store, for example. Every time the button is clicked, it increments\na counter.\nLISTING 16- 6: A Clicker app\nimport {useState} from 'react';\nimport './style.css';\nfunction Clicker(){\nconst [count,setCount] = useState(0);\nconst incrementCount = ()=>{\nsetCount((prev)=>prev+1);\n}\nreturn(\n<div className=\"container\">\n<h1 className=\"current-c ount\">{count}</h1>\n<button className=\"increment-b utton\"\nonClick={incrementCount}>+</button>\n</div>\n)\n}",
		"a counter.\nLISTING 16- 6: A Clicker app\nimport {useState} from 'react';\nimport './style.css';\nfunction Clicker(){\nconst [count,setCount] = useState(0);\nconst incrementCount = ()=>{\nsetCount((prev)=>prev+1);\n}\nreturn(\n<div className=\"container\">\n<h1 className=\"current-c ount\">{count}</h1>\n<button className=\"increment-b utton\"\nonClick={incrementCount}>+</button>\n</div>\n)\n}\nexport default Clicker;\nThe idea of the Clicker app is that the staff can use it to keep track of how many people visit the store\nduring a day. But, as it’s written now, the data is erased each time you leave the page and return. To\nfix it, we can cache its value locally.\nStoring Data with localStorage\nTo store a key/value pair in localStorage, use the setItem method. This method takes two\narguments— the key and the value:\nlocalStorage.setItem('zipcode', '97103');\nKeep in mind that Web Storage can only store string data. If you want to store another data type in",
		"fix it, we can cache its value locally.\nStoring Data with localStorage\nTo store a key/value pair in localStorage, use the setItem method. This method takes two\narguments— the key and the value:\nlocalStorage.setItem('zipcode', '97103');\nKeep in mind that Web Storage can only store string data. If you want to store another data type in\nWeb Storage, you’ll need to convert it to a string and then back again when you read it.\nBecause storing data in localStorage is a side effect, the best place to put a call to setItem is inside\nthe useEffect hook (in a function component) or in a lifecycle method (in a class component). You\ncan use the second parameter of useEffect to specify that the effect should run each time the state\nvalue you want to store changes, as shown in Listing 16-7.\n382 ❘ CHAPTER 16 Fetching and caching data\nLISTING 16- 7: Writing to localStorage when the state changes\nimport {useState,useEffect} from 'react';\nimport './style.css';\nfunction Clicker(){",
		"can use the second parameter of useEffect to specify that the effect should run each time the state\nvalue you want to store changes, as shown in Listing 16-7.\n382 ❘ CHAPTER 16 Fetching and caching data\nLISTING 16- 7: Writing to localStorage when the state changes\nimport {useState,useEffect} from 'react';\nimport './style.css';\nfunction Clicker(){\nconst [count,setCount] = useState(0);\nconst incrementCount = ()=>{\nsetCount((prev)=>prev+1);\n}\nuseEffect(()=>{\nlocalStorage.setItem('counter',count);\n},[count]);\nreturn(\n<div className=\"container\">\n<h1 className=\"current-c ount\">{count}</h1>\n<button className=\"increment-b utton\"\nonClick={incrementCount}>+</button>\n</div>\n)\n}\nexport default Clicker;\nTo verify that the value is being written to localStorage, you can open Chrome’s developer console\nand go to the Application tab. You’ll find an entry in the left pane of the Application tab for Local\nStorage, as shown in Figure 16-4.\nReading Data from localStorage",
		"<button className=\"increment-b utton\"\nonClick={incrementCount}>+</button>\n</div>\n)\n}\nexport default Clicker;\nTo verify that the value is being written to localStorage, you can open Chrome’s developer console\nand go to the Application tab. You’ll find an entry in the left pane of the Application tab for Local\nStorage, as shown in Figure 16-4.\nReading Data from localStorage\nNow that the Clicker app is storing data in localStorage, the next thing to do is to load that data\nwhen the page loads. To get data out of localStorage, use the getItem method, which takes a key\nyou want to get from localStorage and returns the value:\nlocalStorage.getItem('zipcode');\nThe easiest place to retrieve cached data in a function component is in the initial state parameter of\nuseState. By using a conditional operator, you can update the initial state to be set to the value from\nlocalStorage if it exists, and to a default value if it doesn’t.",
		"you want to get from localStorage and returns the value:\nlocalStorage.getItem('zipcode');\nThe easiest place to retrieve cached data in a function component is in the initial state parameter of\nuseState. By using a conditional operator, you can update the initial state to be set to the value from\nlocalStorage if it exists, and to a default value if it doesn’t.\nListing 16-8 shows the Clicker app with the value of count being set to the cached value when\nit exists.\nUsing Web Storage ❘ 383\nFIGURE 16- 4: Viewing Local Storage in Chrome Developer Tools\nLISTING 16- 8: Reading localStorage data in Clicker\nimport {useState,useEffect} from 'react';\nimport './style.css';\nfunction Clicker(){\nconst [count,setCount] = useState(Number(localStorage.getItem('counter')) || 0);\nconst incrementCount = ()=>{\nsetCount((prev)=>prev+1);\n}\nuseEffect(()=>{\nlocalStorage.setItem('counter',count);\n},[count]);\ncontinues\n384 ❘ CHAPTER 16 Fetching and caching data\nLISTING 16-8 (continued)\nreturn(",
		"import {useState,useEffect} from 'react';\nimport './style.css';\nfunction Clicker(){\nconst [count,setCount] = useState(Number(localStorage.getItem('counter')) || 0);\nconst incrementCount = ()=>{\nsetCount((prev)=>prev+1);\n}\nuseEffect(()=>{\nlocalStorage.setItem('counter',count);\n},[count]);\ncontinues\n384 ❘ CHAPTER 16 Fetching and caching data\nLISTING 16-8 (continued)\nreturn(\n<div className=\"container\">\n<h1 className=\"current-c ount\">{count}</h1>\n<button className=\"increment-b utton\"\nonClick={incrementCount}>+</button>\n</div>\n)\n}\nexport default Clicker;\nNow the Clicker will increment and remember data every time it’s accessed. The next step is to\nimplement a way for the counter to be reset.\nRemoving Data from localStorage\nTo remove data from localStorage, you can use one of two methods:\n➤➤ removeItem takes a key as its argument, and removes that key from localStorage.\n➤➤ clear clears all of the keys for the current origin.",
		"Now the Clicker will increment and remember data every time it’s accessed. The next step is to\nimplement a way for the counter to be reset.\nRemoving Data from localStorage\nTo remove data from localStorage, you can use one of two methods:\n➤➤ removeItem takes a key as its argument, and removes that key from localStorage.\n➤➤ clear clears all of the keys for the current origin.\nSince the Clicker app only has one key, we can use either method to reset localStorage. But,\nbecause we’re using an effect to update localStorage when the counter changes, we could also just\nimplement a reset button that changes the counter to 0. One thing to watch out for when resetting\nlocalStorage or removing keys is that resetting the localStorage value by itself won’t change the\ncurrent state of the application.\nIn Listing 16-9, the Clicker has been updated with a Reset button that both clears the localStorage\nand sets the value of the counter to 0.\nLISTING 16- 9: Clearing localStorage in the Clicker",
		"localStorage or removing keys is that resetting the localStorage value by itself won’t change the\ncurrent state of the application.\nIn Listing 16-9, the Clicker has been updated with a Reset button that both clears the localStorage\nand sets the value of the counter to 0.\nLISTING 16- 9: Clearing localStorage in the Clicker\nimport {useState,useEffect} from 'react';\nimport './style.css';\nfunction Clicker(){\nconst [count,setCount] = useState(Number(localStorage.getItem('counter')) || 0);\nconst incrementCount = ()=>{\nsetCount((prev)=>prev+1);\n}\nconst resetCount = ()=>{\nlocalStorage.clear();\nsetCount(0);\n}\nSummary ❘ 385\nuseEffect(()=>{\nlocalStorage.setItem('counter',count);\n},[count]);\nreturn(\n<div className=\"container\">\n<h1 className=\"current-c ount\">{count}</h1>\n<button className=\"increment-b utton\"\nonClick={incrementCount}>+</button><br />\n<button className=\"reset- button\"\nonClick={resetCount}>reset</button>\n</div>\n)\n}\nexport default Clicker;\nSUMMARY",
		"localStorage.clear();\nsetCount(0);\n}\nSummary ❘ 385\nuseEffect(()=>{\nlocalStorage.setItem('counter',count);\n},[count]);\nreturn(\n<div className=\"container\">\n<h1 className=\"current-c ount\">{count}</h1>\n<button className=\"increment-b utton\"\nonClick={incrementCount}>+</button><br />\n<button className=\"reset- button\"\nonClick={resetCount}>reset</button>\n</div>\n)\n}\nexport default Clicker;\nSUMMARY\nAlthough React doesn’t have its own AJAX and browser storage capabilities, integrating the\nnative browser APIs or third- party APIs for these common tasks is easily done from within React\ncomponents.\nIn this chapter, you learned:\n➤➤ How JavaScript runs asynchronous code.\n➤➤ How to use promises.\n➤➤ How to use async/await.\n➤➤ How to make HTTP requests using window.fetch.\n➤➤ How to make HTTP requests using Axios.\n➤➤ How to store, retrieve, and delete data using Web Storage.\nIn the next chapter, you’ll learn how to use React’s Context API to share global data in a component\ntree.",
		"17\nContext API\nThe primary way to pass data from parent components to child components in React is through\nprops. However, in some cases props can be tedious to use and can lead to code that’s more dif‑\nficult to read and maintain. The Context API was created for these cases.\nIn this chapter, you’ll learn:\n➤➤ What prop drilling is.\n➤➤ When the right time is to use Context.\n➤➤ How to make a Provider.\n➤➤ How to use Context in class components.\n➤➤ How to use Context in function components.\n➤➤ Best practices and conventions for Context.\nWHAT IS PROP DRILLING?\nReact props make passing data from parent components to child components simple and intui‑\ntive. If you have a piece of data in a component and you want to make it available to subcom‑\nponents, just add an attribute to the child component’s element and the value will be available\nin the child. If you have data in a component that you want to use in a grandchild component,",
		"WHAT IS PROP DRILLING?\nReact props make passing data from parent components to child components simple and intui‑\ntive. If you have a piece of data in a component and you want to make it available to subcom‑\nponents, just add an attribute to the child component’s element and the value will be available\nin the child. If you have data in a component that you want to use in a grandchild component,\nyou can pass the data through the child component and then into the grandchild.\nThis process of passing data through multiple levels of the component tree is called prop\ndrilling. In a tree of components, you may have multiple levels of components that don’t use\na particular piece of data but just pass it along to their descendants using props, as shown in\nListing 17‑1.\n388 ❘ CHAPTER 17 Context API\nLISTING 17- 1: Using prop drilling\nconst Grandpa = (props) => {\nreturn (<Dad story = {props.story} />);\n}\nconst Dad = (props) => {\nreturn (<Son story = {props.story} />);\n}\nconst Son = (props) => {",
		"a particular piece of data but just pass it along to their descendants using props, as shown in\nListing 17‑1.\n388 ❘ CHAPTER 17 Context API\nLISTING 17- 1: Using prop drilling\nconst Grandpa = (props) => {\nreturn (<Dad story = {props.story} />);\n}\nconst Dad = (props) => {\nreturn (<Son story = {props.story} />);\n}\nconst Son = (props) => {\nreturn (<Grandson story = {props.story} />);\n}\nconst Grandson = (props) => {\nreturn (<p>Here's the story that was passed down to the Grandson component:\n{props.story}</p>);\n}\nexport default Grandpa;\nHOW CONTEXT API SOLVES THE PROBLEM\nProp drilling isn’t necessarily a problem. In most cases, it’s exactly what you should do. However, if\nyou have data or functions in your app that could be considered “global” (or global to a particular\ntree of components), Context lets you avoid prop drilling.\nHere’s how Context works:\n1. You create a Context object, which includes the Provider and Consumer components and\nproperties.",
		"Prop drilling isn’t necessarily a problem. In most cases, it’s exactly what you should do. However, if\nyou have data or functions in your app that could be considered “global” (or global to a particular\ntree of components), Context lets you avoid prop drilling.\nHere’s how Context works:\n1. You create a Context object, which includes the Provider and Consumer components and\nproperties.\n2. You create a Provider for the Context, which will publish a value to its descendants.\n3. Any of the Provider’s descendants can subscribe to the Provider.\n4. Components that subscribe to a Provider will update when the Provider’s data changes.\nCreating a Context\nTo create a Context, use React.createContext:\nconst MyContext = React.createContext(defaultValue);\nThe createContext method returns a Context object. The defaultValue argument that you pass\ninto createContext is the data that will be available to its descendants if there isn’t a matching Pro‑",
		"Creating a Context\nTo create a Context, use React.createContext:\nconst MyContext = React.createContext(defaultValue);\nThe createContext method returns a Context object. The defaultValue argument that you pass\ninto createContext is the data that will be available to its descendants if there isn’t a matching Pro‑\nvider. Since the default value most likely won’t ever get used, many developers leave the default value\nas undefined or set it to some sample object.\nFor example, in Listing 17‑2, I’ve created a Context for user preferences, which passes default values\nfor the lang and timezone properties.\nHow Context API Solves the Problem ❘ 389\nLISTING 17- 2: A Context for user preferences\nconst PrefsContext = React.createContext({lang:'English',timezone:'Pacific\nTime'});\nYou’ll need to import the Context (PrefsContext in this case) into components where you want to\nuse it, so it’s common to put the call to createContext in its own module, or in a module containing\na Provider.",
		"How Context API Solves the Problem ❘ 389\nLISTING 17- 2: A Context for user preferences\nconst PrefsContext = React.createContext({lang:'English',timezone:'Pacific\nTime'});\nYou’ll need to import the Context (PrefsContext in this case) into components where you want to\nuse it, so it’s common to put the call to createContext in its own module, or in a module containing\na Provider.\nCreating a Provider\nA Context’s Provider is a component that publishes changes to context data to its descendant com‑\nponents. The Provider component takes an attribute named value, which overrides the default value\nyou set in React.createContext:\n<MyContext.Provider value={/*some value here*/}>\nThe process for using a Provider is the same in function components and class components. To use\na Provider, wrap it around the component or components that need access to its value. To simplify\nyour code and make reuse of a Provider easier, it’s common to create a higher‑ order component that",
		"you set in React.createContext:\n<MyContext.Provider value={/*some value here*/}>\nThe process for using a Provider is the same in function components and class components. To use\na Provider, wrap it around the component or components that need access to its value. To simplify\nyour code and make reuse of a Provider easier, it’s common to create a higher‑ order component that\nrenders a Provider component and its children, as shown in Listing 17‑3.\nLISTING 17- 3: Using a Provider component\nimport React, {useState} from 'react';\nimport {PrefsContext} from './contexts/UserPrefs';\nconst UserPrefsProvider = ({ children }) => {\nconst [lang, setLang] = useState(\"English\");\nconst [timezone, setTimezone] = useState(\"UTC\");\nreturn (\n<PrefsContext.Provider value={{ lang, timezone }}>\n{children}\n</PrefsContext.Provider>\n);\n};\nfunction App(){\nreturn (\n<UserPrefsProvider>\n<Header />\n<Main />\n<Footer />\n</UserPrefsProvider>\n)\n}\nexport default App;\n390 ❘ CHAPTER 17 Context API",
		"const UserPrefsProvider = ({ children }) => {\nconst [lang, setLang] = useState(\"English\");\nconst [timezone, setTimezone] = useState(\"UTC\");\nreturn (\n<PrefsContext.Provider value={{ lang, timezone }}>\n{children}\n</PrefsContext.Provider>\n);\n};\nfunction App(){\nreturn (\n<UserPrefsProvider>\n<Header />\n<Main />\n<Footer />\n</UserPrefsProvider>\n)\n}\nexport default App;\n390 ❘ CHAPTER 17 Context API\nThe Provider component can be used as many times as you need, and it can be nested. Components\nthat use a Context will access the closest Provider ancestor or will use the Context’s default value if\nthere isn’t a Provider ancestor.\nConsuming a Context\nOnce you have a Context and a Provider, descendant components can become Consumers of the Con‑\ntext. Context Consumers will be re‑r endered when the Provider’s value changes.\nUsing Context in a Class Component\nThere are two ways to consume Context in a class component:\n➤➤ Set the contextType property on the class.\n➤➤ Use the Context.Consumer component.",
		"Consuming a Context\nOnce you have a Context and a Provider, descendant components can become Consumers of the Con‑\ntext. Context Consumers will be re‑r endered when the Provider’s value changes.\nUsing Context in a Class Component\nThere are two ways to consume Context in a class component:\n➤➤ Set the contextType property on the class.\n➤➤ Use the Context.Consumer component.\nIf you only need to use one Context in a class, setting the contextType class property is the easiest\nmethod. Because contextType is a class property, you can set it using public class fields syntax, as\nshown in Listing 17‑4.\nLISTING 17- 4: Consuming a Context in a class component\nimport React from 'react';\nimport {PrefsContext} from './contexts/UserPrefs';\nclass TimeDisplay extends React.Component {\nstatic contextType = PrefsContext;\nrender() {\nreturn (\n<>\nYour language preference is {this.context.lang}.<br />\nYour timezone is {this.context.timezone}.\n</>\n)\n}\n}\nexport default TimeDisplay;",
		"shown in Listing 17‑4.\nLISTING 17- 4: Consuming a Context in a class component\nimport React from 'react';\nimport {PrefsContext} from './contexts/UserPrefs';\nclass TimeDisplay extends React.Component {\nstatic contextType = PrefsContext;\nrender() {\nreturn (\n<>\nYour language preference is {this.context.lang}.<br />\nYour timezone is {this.context.timezone}.\n</>\n)\n}\n}\nexport default TimeDisplay;\nIf your component needs to use multiple Context objects, you can use the Context.Consumer com‑\nponent. Context.Consumer requires a function as its child, and the value of the Context is passed as\nan argument to that function, as shown in Listing 17‑5.\nLISTING 17- 5: Using the Context.Consumer component\nimport React from 'react';\nimport {PrefsContext} from './contexts/UserPrefs';\nCommon Use Cases for Context ❘ 391\nclass TimeDisplay extends React.Component {\nrender() {\nreturn (\n<PrefsContext.Consumer>\n{userPrefs => {\n<>\nYour language preference is {userPrefs.lang}.<br />",
		"an argument to that function, as shown in Listing 17‑5.\nLISTING 17- 5: Using the Context.Consumer component\nimport React from 'react';\nimport {PrefsContext} from './contexts/UserPrefs';\nCommon Use Cases for Context ❘ 391\nclass TimeDisplay extends React.Component {\nrender() {\nreturn (\n<PrefsContext.Consumer>\n{userPrefs => {\n<>\nYour language preference is {userPrefs.lang}.<br />\nYour timezone is {userPrefs.timezone}.\n</>\n}};\n</ PrefsContext.Consumer >\n)\n}\n}\nexport default TimeDisplay;\nUsing Context in a Function Component\nYou can consume a Context in a function component by using the Context.Consumer component or\nby using the useContext hook.\nTo use useContext, import the Context and pass it to useContext, which will return the value from\nthe Provider. Listing 17‑6 shows a function component that uses useContext to get user preferences.\nLISTING 17- 6: Consuming a Context in a function component\nimport {useContext} from 'react';\nimport {PrefsContext} from './contexts/UserPrefs';",
		"by using the useContext hook.\nTo use useContext, import the Context and pass it to useContext, which will return the value from\nthe Provider. Listing 17‑6 shows a function component that uses useContext to get user preferences.\nLISTING 17- 6: Consuming a Context in a function component\nimport {useContext} from 'react';\nimport {PrefsContext} from './contexts/UserPrefs';\nfunction TimeDisplay(props){\nconst userPrefs = useContext(PrefsContext);\nreturn (\n<>\nYour language preference is {userPrefs.timezone}.<br />\nYour timezone is {userPrefs.timezone}.\n</>\n);\n}\nexport default TimeDisplay;\nCOMMON USE CASES FOR CONTEXT\nContext is most useful for managing global data. What fits the description of global data is a judg‑\nment call, but if some piece of data needs to be accessed by multiple components at different nesting\nlevels, it may be a candidate for using Context.\n392 ❘ CHAPTER 17 Context API\nExamples of when Context is helpful include:",
		"</>\n);\n}\nexport default TimeDisplay;\nCOMMON USE CASES FOR CONTEXT\nContext is most useful for managing global data. What fits the description of global data is a judg‑\nment call, but if some piece of data needs to be accessed by multiple components at different nesting\nlevels, it may be a candidate for using Context.\n392 ❘ CHAPTER 17 Context API\nExamples of when Context is helpful include:\n➤➤ Theming an app (light mode or dark mode, for example).\n➤➤ User preferences.\n➤➤ Language preference.\n➤➤ User authorization and roles.\nWHEN NOT TO USE CONTEXT\nWhen a component uses React Context, it becomes dependent on the global state, which makes the\ncomponent less reusable.\nIf it’s likely that a component will be reused, it’s best to avoid coupling it with the global state using\nContext. In many cases, there are alternatives to prop drilling and Context that accomplish the same\nthing but maintain the standard explicit React way of passing data from parents to children. One",
		"component less reusable.\nIf it’s likely that a component will be reused, it’s best to avoid coupling it with the global state using\nContext. In many cases, there are alternatives to prop drilling and Context that accomplish the same\nthing but maintain the standard explicit React way of passing data from parents to children. One\nsuch alternative is the composition pattern.\nCOMPOSITION AS AN ALTERNATIVE TO CONTEXT\nA good alternative to Context and to prop drilling is composition. In React composition, you create a\ncomponent that renders its child components and adds something to them in the process.\nTo understand how composition can be a better alternative to prop drilling than Context, consider\nthe example app in Listing 17‑7. This app has a login button that, when clicked, passes the username\nvariable and the setUsername function into the Dashboard component. The username and its setter",
		"component that renders its child components and adds something to them in the process.\nTo understand how composition can be a better alternative to prop drilling than Context, consider\nthe example app in Listing 17‑7. This app has a login button that, when clicked, passes the username\nvariable and the setUsername function into the Dashboard component. The username and its setter\nfunction are then passed through two levels of components that don’t use them before they’re used by\nthe WelcomeMessage and Logout components.\nLISTING 17- 7: Getting data to a deeply nested component with prop drilling\nimport {useState} from 'react';\nconst App = () => {\nconst [username,setUsername] = useState();\nif (username) {\nreturn <Dashboard setUsername={setUsername} username={username} />\n} else {\nreturn <button onClick={()=>setUsername('Chris')}>Login</button>\n}\n}\nconst Dashboard = (props) => {\nreturn <Header setUsername={props.setUsername} username={props.username} />\n}",
		"import {useState} from 'react';\nconst App = () => {\nconst [username,setUsername] = useState();\nif (username) {\nreturn <Dashboard setUsername={setUsername} username={username} />\n} else {\nreturn <button onClick={()=>setUsername('Chris')}>Login</button>\n}\n}\nconst Dashboard = (props) => {\nreturn <Header setUsername={props.setUsername} username={props.username} />\n}\nComposition as an Alternative to Context ❘ 393\nconst Header = (props) => {\nreturn <UserControls setUsername={props.setUsername} username={props.user-\nname} />\n}\nconst UserControls = (props) => {\nreturn (<>\n<WelcomeMessage username={props.username} />\n<Logout setUsername={props.setUsername} />\n</>)\n}\nconst WelcomeMessage = (props) => {\nreturn <> Welcome {props.username}!</>\n}\nconst Logout = (props) => {\nreturn <button onClick = {()=>{props.setUsername('')}}>Logout</button>\n}\nexport default App;\nListing 17‑8 shows how you might eliminate the prop drilling in this application by using\nReact Context.",
		"<WelcomeMessage username={props.username} />\n<Logout setUsername={props.setUsername} />\n</>)\n}\nconst WelcomeMessage = (props) => {\nreturn <> Welcome {props.username}!</>\n}\nconst Logout = (props) => {\nreturn <button onClick = {()=>{props.setUsername('')}}>Logout</button>\n}\nexport default App;\nListing 17‑8 shows how you might eliminate the prop drilling in this application by using\nReact Context.\nLISTING 17- 8: Eliminating prop drilling with Context\nimport React,{useState,useContext} from 'react';\nconst UserContext = React.createContext();\nconst App = () => {\nconst [username,setUsername] = useState();\nif (username) {\nreturn (\n<UserContext.Provider value={{username,setUsername}}>\n<Dashboard/>\n</UserContext.Provider>\n)\n} else {\nreturn <button onClick={()=>setUsername('Chris')}>Login</button>\n}\n}\nconst Dashboard = (props) => {\nreturn <Header />\n}\nconst Header = (props) => {\nreturn <UserControls />\n}\ncontinues\n394 ❘ CHAPTER 17 Context API\nLISTING 17-8 (continued)",
		"if (username) {\nreturn (\n<UserContext.Provider value={{username,setUsername}}>\n<Dashboard/>\n</UserContext.Provider>\n)\n} else {\nreturn <button onClick={()=>setUsername('Chris')}>Login</button>\n}\n}\nconst Dashboard = (props) => {\nreturn <Header />\n}\nconst Header = (props) => {\nreturn <UserControls />\n}\ncontinues\n394 ❘ CHAPTER 17 Context API\nLISTING 17-8 (continued)\nconst UserControls = (props) => {\nreturn (<>\n<WelcomeMessage />\n<Logout />\n)</>\n}\nconst WelcomeMessage = () => {\nconst {username} = useContext(UserContext);\nreturn <> Welcome {username}!</>\n}\nconst Logout = (props) => {\nconst {setUsername} = useContext(UserContext);\nreturn <button onClick = {()=>{setUsername('')}}>Logout</button>\n}\nexport default App;\nAlthough Context has eliminated the need for prop drilling in the preceding example, it also makes\nthe WelcomeMessage and Logout components dependent on UserContext. To illustrate why this is a",
		"return <> Welcome {username}!</>\n}\nconst Logout = (props) => {\nconst {setUsername} = useContext(UserContext);\nreturn <button onClick = {()=>{setUsername('')}}>Logout</button>\n}\nexport default App;\nAlthough Context has eliminated the need for prop drilling in the preceding example, it also makes\nthe WelcomeMessage and Logout components dependent on UserContext. To illustrate why this is a\nbad thing, in Listing 17‑9, I’ve attempted to reuse the Logout component outside of the Context.\nLISTING 17- 9: Using a component outside of a required Context\nconst App = () => {\nconst [username,setUsername] = useState();\nconst UserContext = React.createContext();\nif (username) {\nreturn (\n<>\n<UserContext.Provider value={{username,setUsername}}>\n<Dashboard/>\n</UserContext.Provider>\n<Logout />\n</>\n)\n} else {\nreturn <button onClick={()=>setUsername('Chris')}>Login</button>\n}\n}\nThe result of this code will be an error, as shown in Figure 17‑1.",
		"const App = () => {\nconst [username,setUsername] = useState();\nconst UserContext = React.createContext();\nif (username) {\nreturn (\n<>\n<UserContext.Provider value={{username,setUsername}}>\n<Dashboard/>\n</UserContext.Provider>\n<Logout />\n</>\n)\n} else {\nreturn <button onClick={()=>setUsername('Chris')}>Login</button>\n}\n}\nThe result of this code will be an error, as shown in Figure 17‑1.\nComposition can be used to eliminate prop drilling while also maintaining the reusability of the\nWelcomeMessage and Logout components. To use composition, render the children property inside\nthe Dashboard, Header, and UserControl components, and then compose your user interface\ninside the App component, as shown in Listing 17‑10.\nComposition as an Alternative to Context ❘ 395\nFIGURE 17- 1: Using a component outside of its Context\nLISTING 17- 10: Using composition instead of Context\nimport React,{useState} from 'react';\nconst App = () => {\nconst [username,setUsername] = useState();\nif (username) {\nreturn (",
		"inside the App component, as shown in Listing 17‑10.\nComposition as an Alternative to Context ❘ 395\nFIGURE 17- 1: Using a component outside of its Context\nLISTING 17- 10: Using composition instead of Context\nimport React,{useState} from 'react';\nconst App = () => {\nconst [username,setUsername] = useState();\nif (username) {\nreturn (\n<Dashboard>\n<Header>\n<UserControls>\n<WelcomeMessage username={username} />\n<Logout setUsername={setUsername} />\n</UserControls>\n</Header>\n</Dashboard>\n)\n} else {\nreturn <button onClick={()=>setUsername('Chris')}>Login</button>\n}\n}\nconst Dashboard = (props) => {\nreturn (<>{props.children}</>);\n}\nconst Header = (props) => {\nreturn (<>{props.children}</>);\n}\nconst UserControls = (props) => {\nreturn (<>{props.children}</>);\n}\ncontinues\n396 ❘ CHAPTER 17 Context API\nLISTING 17-10 (continued)\nconst WelcomeMessage = (props) => {\nreturn <>Welcome {props.username}!</>\n}\nconst Logout = (props) => {\nreturn <button onClick = {()=>{props.setUsername('')}}>Logout</button>",
		"}\nconst Header = (props) => {\nreturn (<>{props.children}</>);\n}\nconst UserControls = (props) => {\nreturn (<>{props.children}</>);\n}\ncontinues\n396 ❘ CHAPTER 17 Context API\nLISTING 17-10 (continued)\nconst WelcomeMessage = (props) => {\nreturn <>Welcome {props.username}!</>\n}\nconst Logout = (props) => {\nreturn <button onClick = {()=>{props.setUsername('')}}>Logout</button>\n}\nexport default App;\nEXAMPLE APP: USER PREFERENCES\nIn this example app, we’ll create a user interface for setting global preferences for units of tempera‑\nture and units of length for an app. The larger app that this component belongs to is unimportant— it\ncould be reused in many different types of apps.\nFigure 17‑2 shows the finished user interface. The user can change the dropdown menu between\nmetric and imperial units, which changes the corresponding state changes and updates the value of\nthe Provider.\nFIGURE 17- 2: A user preferences component with Context",
		"could be reused in many different types of apps.\nFigure 17‑2 shows the finished user interface. The user can change the dropdown menu between\nmetric and imperial units, which changes the corresponding state changes and updates the value of\nthe Provider.\nFIGURE 17- 2: A user preferences component with Context\nThe first step in creating this user interface is to create the Context and a Provider, as shown in\nListing 17‑11.\nLISTING 17- 11: Making a Provider\nimport React, {createContext, useState} from 'react';\nexport const UnitsContext = createContext();\nexport const UnitsProvider = ({ children }) => {\nconst [lengthUnit, setLengthUnit] = useState(\"cm\");\nconst [tempUnit, setTempUnit] = useState(\"c\");\nreturn (\n<UnitsContext.Provider value={{ lengthUnit, setLengthUnit, tempUnit,\nsetTempUnit }}>\n{children}\n</UnitsContext.Provider>\n);\n};\nExample App: User Preferences ❘ 397\nIn a smaller app, it’s common to put the call to createContext and the Provider higher‑ order",
		"const [lengthUnit, setLengthUnit] = useState(\"cm\");\nconst [tempUnit, setTempUnit] = useState(\"c\");\nreturn (\n<UnitsContext.Provider value={{ lengthUnit, setLengthUnit, tempUnit,\nsetTempUnit }}>\n{children}\n</UnitsContext.Provider>\n);\n};\nExample App: User Preferences ❘ 397\nIn a smaller app, it’s common to put the call to createContext and the Provider higher‑ order\ncomponent (if you create one) in the same file as the top‑ level component in the tree that uses the\nContext. If your app makes use of multiple Contexts or uses the same Context or Provider more than\nonce, it’s common to put them in a separate file, often in a directory named context.\nThe next step is to wrap the tree of components that will consume the Context with the Provider\ncomponent, as shown in Listing 17‑12.\nLISTING 17- 12: Providing a Context to a tree\nimport { UnitsProvider } from './contexts/UnitsContext';\nimport Header from './Header';\nconst App = (props) => {\nreturn (\n<UnitsProvider>\n<Header />\n</UnitsProvider>\n)",
		"The next step is to wrap the tree of components that will consume the Context with the Provider\ncomponent, as shown in Listing 17‑12.\nLISTING 17- 12: Providing a Context to a tree\nimport { UnitsProvider } from './contexts/UnitsContext';\nimport Header from './Header';\nconst App = (props) => {\nreturn (\n<UnitsProvider>\n<Header />\n</UnitsProvider>\n)\n}\nexport default App;\nWith the Provider in place, you can consume the Context from anywhere inside the Header com‑\nponent and its descendants. Listing 17‑13 shows a component that’s a descendant of Header that\nuses the Context to display the current values of lengthUnit and tempUnit and allows the user to\nchange them.\nLISTING 17- 13: Consuming a Context\nimport {useContext} from 'react';\nimport {UnitsContext} from './contexts/UnitsContext';\nconst UserPrefs = (props) => {\nconst unitPrefs = useContext(UnitsContext);\nconst changeLengthUnit = () => {\nunitPrefs.setLengthUnit((unitPrefs.lengthUnit === 'cm')?\"inch\":\"cm\");\n}",
		"change them.\nLISTING 17- 13: Consuming a Context\nimport {useContext} from 'react';\nimport {UnitsContext} from './contexts/UnitsContext';\nconst UserPrefs = (props) => {\nconst unitPrefs = useContext(UnitsContext);\nconst changeLengthUnit = () => {\nunitPrefs.setLengthUnit((unitPrefs.lengthUnit === 'cm')?\"inch\":\"cm\");\n}\nconst changeTempUnit = () => {\nunitPrefs.setTempUnit((unitPrefs.tempUnit === 'c')?\"f\":\"c\");\n}\nreturn (\n<>\nYour preferred length unit: {unitPrefs.lengthUnit}&nbsp;\n<button onClick={changeLengthUnit}>Switch to {(unitPrefs.lengthUnit\n=== 'cm')?\"inch\":\"cm\"}</button><br />\ncontinues\n398 ❘ CHAPTER 17 Context API\nLISTING 17-13 (continued)\nYour preferred temperature unit: {unitPrefs.tempUnit}&nbsp;\n<button onClick={changeTempUnit}>Switch to {(unitPrefs.tempUnit ===\n'c')?\"f\":\"c\"}</button><br />\n<br />\n</>\n)\n}\nexport default UserPrefs;\nSUMMARY\nThe ability to consume Context from function components with the useContext Hook makes React",
		"continues\n398 ❘ CHAPTER 17 Context API\nLISTING 17-13 (continued)\nYour preferred temperature unit: {unitPrefs.tempUnit}&nbsp;\n<button onClick={changeTempUnit}>Switch to {(unitPrefs.tempUnit ===\n'c')?\"f\":\"c\"}</button><br />\n<br />\n</>\n)\n}\nexport default UserPrefs;\nSUMMARY\nThe ability to consume Context from function components with the useContext Hook makes React\nContext easy and convenient. But, React Context is a tool that should be used sparingly or not at\nall in most apps. When you need it, however, it’s invaluable as a way to manage small pieces of\nglobal data.\nIn this chapter, you learned:\n➤➤ What prop drilling is and how React Context can eliminate it.\n➤➤ When to use React Context.\n➤➤ When not to use React Context.\n➤➤ How to use composition as an alternative to Context.\nIn the next chapter, you’ll learn about using React Portals to break out of the confines of a React\napp’s root DOM node.\n18\nReact Portals",
		"global data.\nIn this chapter, you learned:\n➤➤ What prop drilling is and how React Context can eliminate it.\n➤➤ When to use React Context.\n➤➤ When not to use React Context.\n➤➤ How to use composition as an alternative to Context.\nIn the next chapter, you’ll learn about using React Portals to break out of the confines of a React\napp’s root DOM node.\n18\nReact Portals\nReactDOM.render renders a React application in a single DOM node in a web page. But it\nmay be a big document outside that node, and there are times when your application may need\naccess to that larger world. React Portals provide you with a way to access and control DOM\nnodes beyond the root in which it’s rendered.\nIn this chapter, you’ll learn:\n➤➤ How to create a Portal.\n➤➤ Common use cases for Portals.\n➤➤ How to make a modal dialog with Portals.\n➤➤ How to listen for and handle events within Portals.\n➤➤ How to properly handle keyboard focus with Portals.\nWHAT IS A PORTAL?",
		"nodes beyond the root in which it’s rendered.\nIn this chapter, you’ll learn:\n➤➤ How to create a Portal.\n➤➤ Common use cases for Portals.\n➤➤ How to make a modal dialog with Portals.\n➤➤ How to listen for and handle events within Portals.\n➤➤ How to properly handle keyboard focus with Portals.\nWHAT IS A PORTAL?\nA Portal is a way to render child components into different DOM nodes than the root of your\nReact application. For example, if you have a modal dialog box that appears when the user\nclicks a help link, a Portal lets you render that dialog box in a separate element in the HTML\nthat’s styled to appear on top of the React application, as shown in Figure 18‑1.\nHow to Make a Portal\nBecause Portals interact with the DOM, they’re a part of the ReactDOM library. To create\na Portal, use the ReactDOM.createPortal method within a React component. ReactDOM.\ncreatePortal works the same way as ReactDOM.render, except that it works inside a React",
		"that’s styled to appear on top of the React application, as shown in Figure 18‑1.\nHow to Make a Portal\nBecause Portals interact with the DOM, they’re a part of the ReactDOM library. To create\na Portal, use the ReactDOM.createPortal method within a React component. ReactDOM.\ncreatePortal works the same way as ReactDOM.render, except that it works inside a React\ncomponent’s render method. Like ReactDOM.render, it takes two arguments: the component\nto render and the DOM node in which to render it.\n400 ❘ CHAPTER 18 React PoRtals\nFIGURE 18- 1: Portals enable modal dialogs\nMaking a React Portal starts with knowing the structure of the HTML document in which your app\nis rendered. Unlike every example you’ve seen so far, Portals depend on having more than just a root\nnode inside the HTML body element. Listing 18‑1 shows an HTML document with two elements\ninside the body.\nLISTING 18- 1: An HTML document with multiple nodes in the body\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>",
		"is rendered. Unlike every example you’ve seen so far, Portals depend on having more than just a root\nnode inside the HTML body element. Listing 18‑1 shows an HTML document with two elements\ninside the body.\nLISTING 18- 1: An HTML document with multiple nodes in the body\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>Portal Demo</title>\n</head>\n<body>\n<div style=\"display:flex;\">\n<div id=\"root\" style=\"width:50%\"></div>\n<div id=\"sidebar\" style=\"width:50%\"></div>\n</div>\n</body>\n</html>\nWhat Is a Portal? ❘ 401\nThe div element with the id of root is where we want to render the React app with ReactDOM\n.render. The div element with the id of sidebar is where we want to render a Portal.\nAny component in your React app can call ReactDOM.createPortal. In Listing 18‑2, a component\nnamed SidebarHelp renders a paragraph of text as a Portal.\nLISTING 18- 2: Creating a Portal",
		"</html>\nWhat Is a Portal? ❘ 401\nThe div element with the id of root is where we want to render the React app with ReactDOM\n.render. The div element with the id of sidebar is where we want to render a Portal.\nAny component in your React app can call ReactDOM.createPortal. In Listing 18‑2, a component\nnamed SidebarHelp renders a paragraph of text as a Portal.\nLISTING 18- 2: Creating a Portal\nimport {createPortal} from 'react-d om';\nfunction SidebarHelp(props){\nreturn createPortal(\n<p>{props.helpText}</p>,\ndocument.getElementById('sidebar')\n);\n}\nexport default SidebarHelp;\nListing 18‑3 shows an example of a component that renders the SidebarHelp component. Notice\nthat from the perspective of this component, rendering a component containing a Portal is no differ‑\nent from rendering any other component.\nLISTING 18- 3: Using the SidebarHelp component\nimport Chart from './Chart';\nimport SidebarHelp from './SidebarHelp';\nfunction SalesChart(props){\nreturn (\n<>\n<Chart type=\"sales\" />",
		"that from the perspective of this component, rendering a component containing a Portal is no differ‑\nent from rendering any other component.\nLISTING 18- 3: Using the SidebarHelp component\nimport Chart from './Chart';\nimport SidebarHelp from './SidebarHelp';\nfunction SalesChart(props){\nreturn (\n<>\n<Chart type=\"sales\" />\n<SidebarHelp helpText=\"This chart shows your sales over time.\" />\n</>\n)\n}\nexport default SalesChart;\nFigure 18‑2 shows the result of rendering the SalesChart component.\nIf you inspect the resulting HTML in the Chrome Developer Tools, you’ll see the HTML generated by\nthe SidebarHelp component rendered outside of the root component, as shown in Figure 18‑3.\nIf you inspect the app using the React Developer Tools, you’ll see the SidebarHelp component ren‑\ndered as a normal child component, as shown in Figure 18‑4.\n402 ❘ CHAPTER 18 React PoRtals\nFIGURE 18- 2: Rendering the SalesChart component\nFIGURE 18- 3: Inspecting an app with a Portal in Chrome Developer Tools",
		"If you inspect the app using the React Developer Tools, you’ll see the SidebarHelp component ren‑\ndered as a normal child component, as shown in Figure 18‑4.\n402 ❘ CHAPTER 18 React PoRtals\nFIGURE 18- 2: Rendering the SalesChart component\nFIGURE 18- 3: Inspecting an app with a Portal in Chrome Developer Tools\nCommon Use Cases ❘ 403\nFIGURE 18- 4: Inspecting an app with a Portal in React Developer Tools\nWhy Not Just Render Multiple Component Trees?\nAnother way to render React components into multiple DOM nodes is to use multiple calls to\nReactDOM.render. If the components in the two DOM nodes don’t need to interact and they use\nseparate data, this works fine.\nThe benefit of using React Portals is that a Portal behaves like any other child in a React applica‑\ntion. This means that Portals are both inside and outside of the React user interface. They mount and\nunmount outside of the root DOM node, but they behave the same as they would if they were normal",
		"separate data, this works fine.\nThe benefit of using React Portals is that a Portal behaves like any other child in a React applica‑\ntion. This means that Portals are both inside and outside of the React user interface. They mount and\nunmount outside of the root DOM node, but they behave the same as they would if they were normal\nReact children— they accept props, can listen for and handle events, and so forth.\nCOMMON USE CASES\nPortals are useful for any situation in which you need to display and interact with DOM nodes out‑\nside of the root node of your application. Common uses for Portals include:\n➤➤ Rendering child elements elsewhere in the browser window.\n➤➤ Modal dialogs.\n➤➤ Tooltips.\n➤➤ Hovercards.\n404 ❘ CHAPTER 18 React PoRtals\nIt is possible to create modal dialogs and other sorts of temporary pop‑ up windows without using\nPortals. However, any element rendered without using a Portal inherits the height and width from its",
		"➤➤ Rendering child elements elsewhere in the browser window.\n➤➤ Modal dialogs.\n➤➤ Tooltips.\n➤➤ Hovercards.\n404 ❘ CHAPTER 18 React PoRtals\nIt is possible to create modal dialogs and other sorts of temporary pop‑ up windows without using\nPortals. However, any element rendered without using a Portal inherits the height and width from its\nparent element. This can lead to problems in which a dialog box is cropped by its parent element, as\nshown in Figure 18‑5.\nFIGURE 18- 5: Rendering a modal without using React Portals can have unexpected results\nRendering and Interacting with a Modal Dialog\nDepending on how and why they open and close, temporary windows that overlay the main content\nof an HTML document go by different names, including modal dialogs, popup windows, tooltips,\nand hovercards. Most of the time, their opening and closing is triggered by an event happening within\nthe application, such as a click on a help link or the mouse hovering over a line on a chart.",
		"Depending on how and why they open and close, temporary windows that overlay the main content\nof an HTML document go by different names, including modal dialogs, popup windows, tooltips,\nand hovercards. Most of the time, their opening and closing is triggered by an event happening within\nthe application, such as a click on a help link or the mouse hovering over a line on a chart.\nFollow these steps to create a modal dialog with Portals:\n1. Create a node for the modal in the DOM tree. This can be any element outside of the root\nnode. It should have an id attribute to make it easy to select:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>Modal Dialog with React</title>\n</head>\nCommon Use Cases ❘ 405\n<body>\n<div id=\"main\"></div>\n<div id=\"modal\"></div>\n</body>\n</html>\n2. Create a modal component. Our example component will display a header and the children",
		"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF- 8\">\n<meta name=\"viewport\" content=\"width=device-w idth, initial- scale=1.0\">\n<title>Modal Dialog with React</title>\n</head>\nCommon Use Cases ❘ 405\n<body>\n<div id=\"main\"></div>\n<div id=\"modal\"></div>\n</body>\n</html>\n2. Create a modal component. Our example component will display a header and the children\nprop. By rendering the children prop, we make the modal dialog a flexible container that\ncan be reused throughout the user interface:\nimport \"./styles.css\";\nfunction Modal(props){\nreturn (\n<div className=\"modalOverlay\">\n<div className=\"modalContainer\">\n<h1 className=\"modalTitle\">{props.title}</h1>\n<div className=\"modalContent\">\n{props.children}\n</div>\n</div>\n</div>\n)\n}\nexport default Modal;\n3. Create a CSS document, which we’ll call styles.css, that will position and style the modal.\nYou can style your modal any way you like. My sample styles are shown in Listing 18‑4.\nLISTING 18- 4: One way to style a modal\n.modalOverlay {",
		"<h1 className=\"modalTitle\">{props.title}</h1>\n<div className=\"modalContent\">\n{props.children}\n</div>\n</div>\n</div>\n)\n}\nexport default Modal;\n3. Create a CSS document, which we’ll call styles.css, that will position and style the modal.\nYou can style your modal any way you like. My sample styles are shown in Listing 18‑4.\nLISTING 18- 4: One way to style a modal\n.modalOverlay {\nposition: absolute;\ntop: 0;\nleft: 0;\nheight: 100%;\nwidth: 100%;\npadding- top: 60px;\nbackground- color: rgba(50,50,50,0.6);\n}\n.modalContainer {\nborder:1px solid black;\nbackground: white;\nwidth: 50%;\nmargin: 0 auto;\npadding: 25px;\n}\n.modalTitle {\ntext- align:center;\nbackground- color: black;\ncolor: white;\ncontinues\n406 ❘ CHAPTER 18 React PoRtals\nLISTING 18-4 (continued)\n}\n.modalContent {\nbackground: white;\ntext- align: center;\n}\n4. Create an App component that renders the modal:\nimport Modal from './Modal';\nimport './styles.css';\nfunction App() {\nreturn (\n<div>\n<Modal title=\"Warning\" isOpen={isModalOpen}>",
		"padding: 25px;\n}\n.modalTitle {\ntext- align:center;\nbackground- color: black;\ncolor: white;\ncontinues\n406 ❘ CHAPTER 18 React PoRtals\nLISTING 18-4 (continued)\n}\n.modalContent {\nbackground: white;\ntext- align: center;\n}\n4. Create an App component that renders the modal:\nimport Modal from './Modal';\nimport './styles.css';\nfunction App() {\nreturn (\n<div>\n<Modal title=\"Warning\" isOpen={isModalOpen}>\n<p>This Modal is awesome.</p>\n</Modal>\n</div>\n);\n}\nexport default App;\n5. Add a stateful variable to App to set whether the modal is open, and create a function, but‑\ntons, and event listener to toggle the open state. Notice that passing an event listener to a\nPortal and handling the events that happen in a Portal works the same as if the Portal were\nany other child element. Everything you learned in Chapter 7 about event listeners and event\nhandlers applies to Portals.\nimport {useState} from 'react';\nimport Modal from './Modal';\nimport './styles.css';\nfunction App() {",
		"Portal and handling the events that happen in a Portal works the same as if the Portal were\nany other child element. Everything you learned in Chapter 7 about event listeners and event\nhandlers applies to Portals.\nimport {useState} from 'react';\nimport Modal from './Modal';\nimport './styles.css';\nfunction App() {\nconst[isModalOpen,setModalOpen] = useState(false);\nconst toggleModal = () => setModalOpen(!isModalOpen);\nreturn (\n<div>\n<button onClick={toggleModal}>Open the Modal</button>\n<Modal title=\"Warning\" isOpen={isModalOpen}>\n<p>This Modal is awesome.</p>\n<button onClick={toggleModal}>close modal</button>\n</Modal>\n</div>\n);\n}\nexport default App;\nCommon Use Cases ❘ 407\nThe current App component is shown in Listing 18‑5. At this point, we’re just passing a Boolean\nprop named isOpen to the Modal component. In the next steps, we’ll use this value to determine\nwhether to display the Portal.\nLISTING 18- 5: The App component\nimport {useState} from 'react';\nimport Modal from './Modal';",
		"</Modal>\n</div>\n);\n}\nexport default App;\nCommon Use Cases ❘ 407\nThe current App component is shown in Listing 18‑5. At this point, we’re just passing a Boolean\nprop named isOpen to the Modal component. In the next steps, we’ll use this value to determine\nwhether to display the Portal.\nLISTING 18- 5: The App component\nimport {useState} from 'react';\nimport Modal from './Modal';\nimport './styles.css';\nfunction App() {\nconst[isModalOpen,setModalOpen] = useState(false);\nconst toggleModal = () => setModalOpen(!isModalOpen);\nreturn (\n<div>\n<button onClick={toggleModal}>Open the Modal</button>\n<Modal title=\"Warning\" isOpen={isModalOpen}>\n<p>This Modal is awesome.</p>\n<button onClick={toggleModal}>close modal</button>\n</Modal>\n</div>\n);\n}\nexport default App;\n6. Import ReactDOM and wrap the child element in the Modal component with ReactDOM\n.createPortal and pass a pointer to the DOM node where it should be rendered:\nimport ReactDOM from 'react- dom';\nimport \"./styles.css\";",
		"<Modal title=\"Warning\" isOpen={isModalOpen}>\n<p>This Modal is awesome.</p>\n<button onClick={toggleModal}>close modal</button>\n</Modal>\n</div>\n);\n}\nexport default App;\n6. Import ReactDOM and wrap the child element in the Modal component with ReactDOM\n.createPortal and pass a pointer to the DOM node where it should be rendered:\nimport ReactDOM from 'react- dom';\nimport \"./styles.css\";\nfunction Modal(props){\nreturn (\nReactDOM.createPortal((\n<div className=\"modalOverlay\">\n<div className=\"modalContainer\">\n<h1 className=\"modalTitle\">{props.title}</h1>\n<div className=\"modalContent\">\n{props.children}\n</div>\n</div>\n</div>)\n,document.getElementById('modal'))\n)\n}\nexport default Modal;\n408 ❘ CHAPTER 18 React PoRtals\n7. Use the Boolean prop passed from the App component to conditionally render the Portal:\nimport ReactDOM from 'react- dom';\nimport \"./styles.css\";\nfunction Modal(props){\nreturn (\n<>\n{props.isOpen &&\nReactDOM.createPortal((\n<div className=\"modalOverlay\">",
		"{props.children}\n</div>\n</div>\n</div>)\n,document.getElementById('modal'))\n)\n}\nexport default Modal;\n408 ❘ CHAPTER 18 React PoRtals\n7. Use the Boolean prop passed from the App component to conditionally render the Portal:\nimport ReactDOM from 'react- dom';\nimport \"./styles.css\";\nfunction Modal(props){\nreturn (\n<>\n{props.isOpen &&\nReactDOM.createPortal((\n<div className=\"modalOverlay\">\n<div className=\"modalContainer\">\n<h1 className=\"modalTitle\">{props.title}</h1>\n<div className=\"modalContent\">\n{props.children}\n</div>\n</div>\n</div>)\n,document.getElementById('modal'))}\n</>\n)\n}\nexport default Modal;\nThe finished Modal component is shown in Listing 18‑6.\nListing 18- 6: The finished Modal component\nimport ReactDOM from 'react- dom';\nimport \"./styles.css\";\nfunction Modal(props){\nreturn (\n<>\n{props.isOpen &&\nReactDOM.createPortal((\n<div className=\"modalOverlay\">\n<div className=\"modalContainer\">\n<h1 className=\"modalTitle\">{props.title}</h1>\n<div className=\"modalContent\">\n{props.children}\n</div>",
		"The finished Modal component is shown in Listing 18‑6.\nListing 18- 6: The finished Modal component\nimport ReactDOM from 'react- dom';\nimport \"./styles.css\";\nfunction Modal(props){\nreturn (\n<>\n{props.isOpen &&\nReactDOM.createPortal((\n<div className=\"modalOverlay\">\n<div className=\"modalContainer\">\n<h1 className=\"modalTitle\">{props.title}</h1>\n<div className=\"modalContent\">\n{props.children}\n</div>\n</div>\n</div>)\n,document.getElementById('modal'))}\n</>\n)\n}\nexport default Modal;\nFigure 18‑6 shows the UI with the isOpen variable set to true.\nCommon Use Cases ❘ 409\nFIGURE 18- 6: The opened modal\nManaging Keyboard Focus with Modals\nModal dialogs, such as tooltips, help dialogs, and modal forms, can make a user interface more\nusable. They also have the potential to confuse users if they aren’t implemented correctly. One par‑\nticularly important consideration with modal dialogs is to properly manage keyboard focus when\nclosing a modal.",
		"Common Use Cases ❘ 409\nFIGURE 18- 6: The opened modal\nManaging Keyboard Focus with Modals\nModal dialogs, such as tooltips, help dialogs, and modal forms, can make a user interface more\nusable. They also have the potential to confuse users if they aren’t implemented correctly. One par‑\nticularly important consideration with modal dialogs is to properly manage keyboard focus when\nclosing a modal.\nFor example, a long signup or application form may make use of modal windows for entering\ndetailed information and viewing help content, as shown in Figure 18‑7.\nWhen a user clicks a link to open a modal and interacts with the content of that modal (even just to\nclick a “close” button), focus leaves the main content of the form. When the modal closes, the user\nwill be forced to click in or tab to the next form field again to fill it out. At the least, this is inconven‑\nient. At worst, it’s an accessibility issue for users who rely on screen readers.",
		"When a user clicks a link to open a modal and interacts with the content of that modal (even just to\nclick a “close” button), focus leaves the main content of the form. When the modal closes, the user\nwill be forced to click in or tab to the next form field again to fill it out. At the least, this is inconven‑\nient. At worst, it’s an accessibility issue for users who rely on screen readers.\nTo properly set focus when returning from a modal, use the useEffect hook along with a ref to\ncheck whether the value of isModalOpen has changed to false and set the focus, as shown in\nListing 18‑7.\n410 ❘ CHAPTER 18 React PoRtals\nFIGURE 18- 7: A checkout form with help links\nListing 18- 7: Using a ref to set keyboard focus\nimport {useState,useRef,useEffect} from 'react';\nimport Modal from './Modal';\nimport './styles.css';\nfunction App() {\nconst CSCRef = useRef()\nconst[isModalOpen,setModalOpen] = useState(false);\nconst toggleModal = () => {\nsetModalOpen(()=>!isModalOpen);\n}\nuseEffect(() => {",
		"410 ❘ CHAPTER 18 React PoRtals\nFIGURE 18- 7: A checkout form with help links\nListing 18- 7: Using a ref to set keyboard focus\nimport {useState,useRef,useEffect} from 'react';\nimport Modal from './Modal';\nimport './styles.css';\nfunction App() {\nconst CSCRef = useRef()\nconst[isModalOpen,setModalOpen] = useState(false);\nconst toggleModal = () => {\nsetModalOpen(()=>!isModalOpen);\n}\nuseEffect(() => {\nsetTimeout(()=>{!isModalOpen && CSCRef.current.focus()},1000)\n}, [isModalOpen]);\nreturn (\n<>\n<div style={{padding:\"60px\"}}>\n<label>Card Security Code:<input ref={CSCRef} /></label>\n<button onClick={toggleModal}>What's This?</button>\nSummary ❘ 411\n<Modal title=\"What is the CSC Code?\" isOpen={isModalOpen}>\n<p>A credit card security code is the 3-4 digit number that\nis printed, not embossed, on all credit cards. The length\nand location of a credit card's security code depend on\nwhat network the card is on. </p>\n<button onClick={toggleModal}>close modal</button>\n</Modal>\n</div>\n</>\n);\n}",
		"Summary ❘ 411\n<Modal title=\"What is the CSC Code?\" isOpen={isModalOpen}>\n<p>A credit card security code is the 3-4 digit number that\nis printed, not embossed, on all credit cards. The length\nand location of a credit card's security code depend on\nwhat network the card is on. </p>\n<button onClick={toggleModal}>close modal</button>\n</Modal>\n</div>\n</>\n);\n}\nexport default App;\nIn Listing 18‑7, I used a setTimeout function to make the setting of the focus take 1,000 milli‑\nseconds (1 second) so that it will be obvious when you test it out. In an actual application you can\neliminate the setTimeout function so that the focus gets set as quickly as possible when the modal\ndialog is closed.\nSUMMARY\nOccasionally, it’s helpful to be able to break out of the root node and render React components in\na different DOM node. React Portals, which is enabled by ReactDOM.createPortal, is the way\nto do this.\nIn this chapter, you learned:\n➤➤ What a React Portal is.\n➤➤ When Portals are useful.",
		"dialog is closed.\nSUMMARY\nOccasionally, it’s helpful to be able to break out of the root node and render React components in\na different DOM node. React Portals, which is enabled by ReactDOM.createPortal, is the way\nto do this.\nIn this chapter, you learned:\n➤➤ What a React Portal is.\n➤➤ When Portals are useful.\n➤➤ How to create a Portal.\n➤➤ How to interact with a Portal.\n➤➤ How to manage keyboard focus when closing a Portal.\nIn the next chapter, you’ll learn about accessibility concerns when programming React user interfaces.",
		"19\nAccessibility in React\nAccessibility (also known as a11y, because all those letters between the a and the y are too hard\nto type) means that websites and web applications are designed and built in such a way so that\npeople with disabilities can use them. The qualities that make a user interface built with React\naccessible are no different from those that make any web user interface accessible, but the way\nin which accessibility is implemented differs in some instances.\nIn this chapter, you’ll learn:\n➤➤ What makes a web application accessible.\n➤➤ Special considerations for making single page applications accessible.\n➤➤ What ARIA is.\n➤➤ How and why to use semantic HTML.\n➤➤ The importance of proper labeling of form elements.\n➤➤ How to use media queries in React components.\nWHY IS ACCESSIBILITY IMPORTANT?\nAccording to the World Health Organization, about 15 percent of the global population has\nsome form of disability. Accessibility studies have found that between 6 and 10 percent of",
		"➤➤ What ARIA is.\n➤➤ How and why to use semantic HTML.\n➤➤ The importance of proper labeling of form elements.\n➤➤ How to use media queries in React components.\nWHY IS ACCESSIBILITY IMPORTANT?\nAccording to the World Health Organization, about 15 percent of the global population has\nsome form of disability. Accessibility studies have found that between 6 and 10 percent of\npeople over 15 years old have a sight or hearing impairment. For people over 65, that number\nis over 20 percent. Eight percent of people over 65 have difficulty grasping objects— including a\ncomputer mouse.\nWith the average age increasing worldwide, the number of people who require some sort of\nalternative device or assistive technology to use the web is in the tens of millions, even by\nconservative estimates.\n414 ❘ CHAPTER 19 Accessibility in ReAct\nImplementing web accessibility is not just the right thing to do or good for business, it’s increasingly",
		"computer mouse.\nWith the average age increasing worldwide, the number of people who require some sort of\nalternative device or assistive technology to use the web is in the tens of millions, even by\nconservative estimates.\n414 ❘ CHAPTER 19 Accessibility in ReAct\nImplementing web accessibility is not just the right thing to do or good for business, it’s increasingly\nrequired by law. Public sector websites in many countries (including the U.S., Canada, and the E.U.)\nhave been required to meet certain accessibility standards for years, and private- sector websites in\nmany countries will be required by law to meet accessibility standards in the coming years.\nACCESSIBILITY BASICS\nMost of the techniques you’ll use for making web applications accessible are just good practices in\ngeneral, and they make your application better and easier to use for all users, not just those with\ndisabilities.",
		"many countries will be required by law to meet accessibility standards in the coming years.\nACCESSIBILITY BASICS\nMost of the techniques you’ll use for making web applications accessible are just good practices in\ngeneral, and they make your application better and easier to use for all users, not just those with\ndisabilities.\nA short list of the considerations to keep in mind when designing your app for accessibility includes:\n➤➤ Use valid HTML.\n➤➤ Make sure all images have alt attributes.\n➤➤ Add alternative content for all audio and video content.\n➤➤ Your app should be navigable without a mouse.\n➤➤ Form elements should be properly labeled.\n➤➤ The application should be usable by people with color blindness.\nWeb Content Accessibility Guidelines (WCAG)\nThe World Wide Web Consortium (W3C) has developed and maintains a collection of documents\nthat explain how to make websites accessible, which are collectively known as the Web Content",
		"➤➤ Your app should be navigable without a mouse.\n➤➤ Form elements should be properly labeled.\n➤➤ The application should be usable by people with color blindness.\nWeb Content Accessibility Guidelines (WCAG)\nThe World Wide Web Consortium (W3C) has developed and maintains a collection of documents\nthat explain how to make websites accessible, which are collectively known as the Web Content\nAccessibility Guidelines, or WCAG. WCAG is the standard used by governments for laws that require\naccessibility.\nThe WCAG has four main principles:\n➤➤ Perceivable. All user interface elements must be presentable to users in a way that they can\nreceive it. For example, images must have text alternatives that can be read by screen readers\nfor the blind. Perceivability also encompasses techniques such as responsive design, which\nensures that content can be presented in different ways without losing information or struc-",
		"➤➤ Perceivable. All user interface elements must be presentable to users in a way that they can\nreceive it. For example, images must have text alternatives that can be read by screen readers\nfor the blind. Perceivability also encompasses techniques such as responsive design, which\nensures that content can be presented in different ways without losing information or struc-\nture. For example, a user interface should respond to changes in orientation of a mobile\ndevice (from portrait to landscape) and to different sized screens.\n➤➤ Operable. Users should be able to operate the user interface. For example, it should be\npossible for all content and navigation and components to be used with a keyboard instead\nof a mouse.\n➤➤ Understandable. How the user interface works must be understandable. This principle\nincludes making sure the language of the content is specified in the code, providing proper\nlabels to user interface controls, and providing help to the user.",
		"possible for all content and navigation and components to be used with a keyboard instead\nof a mouse.\n➤➤ Understandable. How the user interface works must be understandable. This principle\nincludes making sure the language of the content is specified in the code, providing proper\nlabels to user interface controls, and providing help to the user.\nImplementing Accessibility in React Components ❘ 415\n➤➤ Robust. Content must be usable by a wide variety of devices and user agents, including assis-\ntive technologies. The most important factor in determining whether web content is robust\nis whether it complies with the HTML standard. For example, while a visual web browser\nmay be able to render something that works just fine from faulty markup, it’s much more dif-\nficult, or impossible, for an assistive device such as a screen reader to parse HTML that has\nduplicate attributes or missing end tags.\nA complete guide to implementing WCAG is beyond the scope of this book, but you can find the",
		"may be able to render something that works just fine from faulty markup, it’s much more dif-\nficult, or impossible, for an assistive device such as a screen reader to parse HTML that has\nduplicate attributes or missing end tags.\nA complete guide to implementing WCAG is beyond the scope of this book, but you can find the\ncomplete document, as well as a quick reference guide to the latest version of the standard, at\nhttps://www.w3.org/WAI/.\nWeb Accessibility Initiative - Accessible Rich Internet\nApplications (WAI- ARIA)\nThe Web Accessibility Initiative - Accessible Rich Internet Applications (WAI-A RIA) document,\npublished by the W3C, defines techniques for making web applications accessible to people who use\nassistive technologies, including people who use screen readers and people who cannot use a mouse.\nARIA provides standard HTML attributes that can be used to identify user interaction features and\nspecify how they relate to each other as well as their current state:",
		"published by the W3C, defines techniques for making web applications accessible to people who use\nassistive technologies, including people who use screen readers and people who cannot use a mouse.\nARIA provides standard HTML attributes that can be used to identify user interaction features and\nspecify how they relate to each other as well as their current state:\n➤➤ ARIA’s role attribute can be added to elements to point out landmarks such as nav, search,\ntab, and so forth to screen readers.\n➤➤ The aria- live attribute can be used to tell screen readers that particular content is updated.\nThis is particularly important in dynamic single page applications.\n➤➤ The tabindex attribute allows you to make the order of tabbing between user interface ele-\nments explicit. This is useful when the position of the elements in the document and the order\nin which you want them to be accessed are different.\n➤➤ Attributes such as aria- label and aria- required can be used to give more information",
		"This is particularly important in dynamic single page applications.\n➤➤ The tabindex attribute allows you to make the order of tabbing between user interface ele-\nments explicit. This is useful when the position of the elements in the document and the order\nin which you want them to be accessed are different.\n➤➤ Attributes such as aria- label and aria- required can be used to give more information\nabout form controls to screen readers.\nTo find out more about ARIA, visit the WAI-A RIA overview at https://www.w3.org/WAI/\nstandards- guidelines/aria/.\nIMPLEMENTING ACCESSIBILITY IN REACT COMPONENTS\nBecause the result of compiling a React application is a standard HTML, CSS, and JavaScript web\npage, implementing accessibility in user interfaces built with React is largely done using the same\nstandards and techniques that you use with a static HTML document.\nHowever, because you write the output of React components using JavaScript and JSX rather than",
		"Because the result of compiling a React application is a standard HTML, CSS, and JavaScript web\npage, implementing accessibility in user interfaces built with React is largely done using the same\nstandards and techniques that you use with a static HTML document.\nHowever, because you write the output of React components using JavaScript and JSX rather than\nHTML, there are some differences that you should be aware of.\nThe main things to consider when implementing accessibility with React are:\n➤➤ ARIA attributes.\n➤➤ Semantic HTML.\n416 ❘ CHAPTER 19 Accessibility in ReAct\n➤➤ Form accessibility.\n➤➤ Managing focus.\n➤➤ How to use media queries.\nARIA Attributes in React\nJSX supports all the ARIA attributes. Unlike most other attributes that you write in JSX, ARIA attrib-\nutes with multiple words, such as aria- label, are written the same as in HTML, using a hyphen\nbetween words rather than camelCase.",
		"➤➤ Semantic HTML.\n416 ❘ CHAPTER 19 Accessibility in ReAct\n➤➤ Form accessibility.\n➤➤ Managing focus.\n➤➤ How to use media queries.\nARIA Attributes in React\nJSX supports all the ARIA attributes. Unlike most other attributes that you write in JSX, ARIA attrib-\nutes with multiple words, such as aria- label, are written the same as in HTML, using a hyphen\nbetween words rather than camelCase.\nFor example, the following JSX code tells a screen reader that an input is required and specifies the\ncontrol’s label:\n<input\ntype=\"text\"\naria- label={labelText}\naria- required=\"true\"\nonChange={onchangeHandler}\nvalue={inputValue}\nname=\"name\"\n/>\nSemantic HTML\nSemantic HTML refers to using HTML elements that indicate the purpose, or role, of an element\nin the document. For example, a page’s navigation should be written using the nav element, and the\naddress element should be used to mark up contact information.\nWhen you use semantic HTML elements, the ARIA role of the element is implied, meaning there’s",
		"value={inputValue}\nname=\"name\"\n/>\nSemantic HTML\nSemantic HTML refers to using HTML elements that indicate the purpose, or role, of an element\nin the document. For example, a page’s navigation should be written using the nav element, and the\naddress element should be used to mark up contact information.\nWhen you use semantic HTML elements, the ARIA role of the element is implied, meaning there’s\nno need to explicitly define the ARIA role attribute. Writing semantic and valid HTML is the most\nimportant thing you can do to make a page or application usable by assistive technologies.\nBecause each React component must return a single element, there’s a tendency when writing React\nto wrap the return value of a component in an unnecessary div element, such as in the component\nshown in Listing 19-1.\nLISTING 19- 1: Using unnecessary elements to group elements\nfunction ListItem({ item }) {\nreturn (\n<div>\n<dt>{item.term}</dt>\n<dd>{item.description}</dd>\n</div>\n);\n}",
		"Because each React component must return a single element, there’s a tendency when writing React\nto wrap the return value of a component in an unnecessary div element, such as in the component\nshown in Listing 19-1.\nLISTING 19- 1: Using unnecessary elements to group elements\nfunction ListItem({ item }) {\nreturn (\n<div>\n<dt>{item.term}</dt>\n<dd>{item.description}</dd>\n</div>\n);\n}\nThese unnecessary elements can confuse screen readers, especially when they’re used inside lists. For\nexample, the component shown in Listing 19-2 makes use of the ListItem component to generate a\ndefinition list.\nImplementing Accessibility in React Components ❘ 417\nLISTING 19- 2: Using unnecessary grouping elements can result in invalid HTML\nfunction Glossary(props) {\nreturn (\n<dl>\n{props.items.map(item => (\n<ListItem item={item} key={item.id} />\n))}\n</dl>\n);\n}\nThe returned HTML from Listing 19-2 will have a div element around each group of terms and",
		"definition list.\nImplementing Accessibility in React Components ❘ 417\nLISTING 19- 2: Using unnecessary grouping elements can result in invalid HTML\nfunction Glossary(props) {\nreturn (\n<dl>\n{props.items.map(item => (\n<ListItem item={item} key={item.id} />\n))}\n</dl>\n);\n}\nThe returned HTML from Listing 19-2 will have a div element around each group of terms and\ndescriptions. The result is a definition list that doesn’t comply with the HTML standard way to make\ndefinition lists.\nThe solution to this problem is to use React.Fragment (or its shorthand element) to group elements\nin cases where there shouldn’t be a resulting HTML element from the necessary JSX grouping, as\nshown in Listing 19-3.\nLISTING 19- 3: Using React.Fragment to eliminate unnecessary HTML elements\nfunction ListItem({ item }) {\nreturn (\n<>\n<dt>{item.term}</dt>\n<dd>{item.description}</dd>\n</>\n);\n}\nForm Accessibility\nForm inputs need to have labels that are readable by screen readers and that are specifically associ-",
		"shown in Listing 19-3.\nLISTING 19- 3: Using React.Fragment to eliminate unnecessary HTML elements\nfunction ListItem({ item }) {\nreturn (\n<>\n<dt>{item.term}</dt>\n<dd>{item.description}</dd>\n</>\n);\n}\nForm Accessibility\nForm inputs need to have labels that are readable by screen readers and that are specifically associ-\nated with the inputs. It’s not enough, for example, to have a label that visually appears above or next\nto an input, like this:\n<form>\nfirst name: <input type=\"text\" />\n</form>\nAn accessible form is one that uses a label element and/or an aria- label attribute to label each\ninput field. The label element in JSX works the same as the HTML label element, except that the\nfor attribute in the HTML label element becomes the htmlFor attribute in JSX.\nThe value of htmlFor should be the value of the id attribute in the associated form control.\nListing 19-4 shows an accessible form written in JSX.\n418 ❘ CHAPTER 19 Accessibility in ReAct",
		"input field. The label element in JSX works the same as the HTML label element, except that the\nfor attribute in the HTML label element becomes the htmlFor attribute in JSX.\nThe value of htmlFor should be the value of the id attribute in the associated form control.\nListing 19-4 shows an accessible form written in JSX.\n418 ❘ CHAPTER 19 Accessibility in ReAct\nLISTING 19- 4: An accessible form, written using JSX\n<form onSubmit={handleSubmit}>\n<label htmlFor=\"firstName\">First Name</label>\n<input id=\"firstName\" type=\"text\" />\n<label htmlFor=\"lastName\">Last Name</label>\n<input id=\"lastName\" type=\"text\" />\n<label htmlfor=\"emailAddress\">Email Address</label>\n<input id=\"emailAddress\" type=\"email\" />\n<button type=\"submit\">Submit</button>\n</form>\nFocus Control in React\nYour web application should be fully accessible and usable with only the keyboard. One important\naspect of making an application usable with only the keyboard is to properly manage focus.\nSkip Links",
		"<input id=\"lastName\" type=\"text\" />\n<label htmlfor=\"emailAddress\">Email Address</label>\n<input id=\"emailAddress\" type=\"email\" />\n<button type=\"submit\">Submit</button>\n</form>\nFocus Control in React\nYour web application should be fully accessible and usable with only the keyboard. One important\naspect of making an application usable with only the keyboard is to properly manage focus.\nSkip Links\nUsers who navigate using the keyboard or voice commands typically must move from one interactive\nelement on the page to the next using the Tab key. For applications with a large number of navigation\nelements at the top of the page, this can mean that the user must tab through each element to get to\nthe main body of the page. To help keyboard or screen reader users to navigate to the part of the page\nthey want to use, you can implement a “Skip Navigation” link.\nSkip Navigation links are links at the top of a page that may be visible, or that are only visible for",
		"elements at the top of the page, this can mean that the user must tab through each element to get to\nthe main body of the page. To help keyboard or screen reader users to navigate to the part of the page\nthey want to use, you can implement a “Skip Navigation” link.\nSkip Navigation links are links at the top of a page that may be visible, or that are only visible for\nkeyboard and screen reader users. The Skip Navigation link uses an HTML anchor to move the focus\npast the navigation and directly to the main content of the page. You can implement Skip Navigation\nlinks easily yourself with a link and some styling, or you can use a pre-b uilt component that makes\nit easier. Listing 19-5 shows a React component that implements a Skip Navigation link using the\nreact- skip- nav component, which is available at npmjs.com/package/react- skip- nav or by\nrunning npm install react- skip- nav.\nLISTING 19- 5: Implementing Skip Navigation links with react- skip- nav\nimport React from 'react';",
		"it easier. Listing 19-5 shows a React component that implements a Skip Navigation link using the\nreact- skip- nav component, which is available at npmjs.com/package/react- skip- nav or by\nrunning npm install react- skip- nav.\nLISTING 19- 5: Implementing Skip Navigation links with react- skip- nav\nimport React from 'react';\nimport SkipNav from 'react- skip- nav';\nimport \"react- skip- nav/lib/style.css\";\nconst MyComponent = (props) => {\nreturn (\n<>\n<SkipNav\nid='main- content'\ntext='skip to main content'\nImplementing Accessibility in React Components ❘ 419\ntargetDomId='main- content'\n/>\n<Header/>\n<div id=\"main- content\">\n<MainContent />\n</div>\n</>\n)\n}\nexport default MyComponent;\nManaging Focus Programmatically\nWhen the browser’s focus is taken away from the normal flow of a page and then returned to it (such\nas what happens when a modal dialog is opened and closed), even users with a mouse must manu-",
		"targetDomId='main- content'\n/>\n<Header/>\n<div id=\"main- content\">\n<MainContent />\n</div>\n</>\n)\n}\nexport default MyComponent;\nManaging Focus Programmatically\nWhen the browser’s focus is taken away from the normal flow of a page and then returned to it (such\nas what happens when a modal dialog is opened and closed), even users with a mouse must manu-\nally return the focus to the form field or interactive element they were using prior to the opening of\nthe modal dialog. Without proper focus management, users of keyboard navigation or screen read-\ners must start again at the top of the page and move through each element until they get to the spot\nwhere they were when focus moved to the modal.\nYou can use a ref and the window.focus method to return focus to the correct place when a modal\ndialog is closed. Listing 19-6 shows how to open a modal and return the focus to the appropriate ele-\nment when the modal is closed.\nLISTING 19- 6: Managing focus upon closing a modal",
		"where they were when focus moved to the modal.\nYou can use a ref and the window.focus method to return focus to the correct place when a modal\ndialog is closed. Listing 19-6 shows how to open a modal and return the focus to the appropriate ele-\nment when the modal is closed.\nLISTING 19- 6: Managing focus upon closing a modal\nimport ReactDOM from 'react- dom';\nimport {useState,useRef,useEffect} from 'react';\nimport './styles.css';\nfunction Modal(props){\nreturn (\n<>\n{props.isOpen &&\nReactDOM.createPortal((\n<div className=\"modalOverlay\">\n<div className=\"modalContainer\">\n<div className=\"modalContent\">\n{props.children}\n</div>\n</div>\n</div>)\n,document.getElementById('modal'))}\n</>\n)\n}\nfunction App() {\nconst PasswordRef = useRef()\ncontinues\n420 ❘ CHAPTER 19 Accessibility in ReAct\nLISTING 19-6 (continued)\nconst[isModalOpen,setModalOpen] = useState(false);\nconst toggleModal = () => {\nsetModalOpen(()=>!isModalOpen);\n}\nuseEffect(() => {\n!isModalOpen && PasswordRef.current.focus()",
		"{props.children}\n</div>\n</div>\n</div>)\n,document.getElementById('modal'))}\n</>\n)\n}\nfunction App() {\nconst PasswordRef = useRef()\ncontinues\n420 ❘ CHAPTER 19 Accessibility in ReAct\nLISTING 19-6 (continued)\nconst[isModalOpen,setModalOpen] = useState(false);\nconst toggleModal = () => {\nsetModalOpen(()=>!isModalOpen);\n}\nuseEffect(() => {\n!isModalOpen && PasswordRef.current.focus()\n}, [isModalOpen]);\nreturn (\n<>\n<div style={{padding:\"60px\"}}>\n<label>Choose a Password:<input ref={PasswordRef} /></label>\n<button onClick={toggleModal}>?</button>\n<Modal title=\"Password Requirements\" isOpen={isModalOpen}>\n<p>Your password must contain at least 8 characters, an uppercase letter,\nthe name of your pet, your birthday, your child's birthday, the word\n\"password\" and several sequential numbers.</p>\n<button onClick={toggleModal}>close modal</button>\n</Modal>\n</div>\n</>\n);\n}\nexport default App;\nMedia Queries in React",
		"<Modal title=\"Password Requirements\" isOpen={isModalOpen}>\n<p>Your password must contain at least 8 characters, an uppercase letter,\nthe name of your pet, your birthday, your child's birthday, the word\n\"password\" and several sequential numbers.</p>\n<button onClick={toggleModal}>close modal</button>\n</Modal>\n</div>\n</>\n);\n}\nexport default App;\nMedia Queries in React\nMedia queries provide different CSS to a page or application based on the properties of the browser.\nThe most common use for media queries is for implementing responsive design.\nResponsive design is the technique used to make web pages and web applications adapt to different-\nsized devices. Besides making your application more usable for visual web browsers, responsive\ndesign also makes it possible for users with low vision to resize the user interface without needing to\nscroll horizontally. Media queries can also be used to detect non- visual browsers and customize the\nCSS for these devices.",
		"sized devices. Besides making your application more usable for visual web browsers, responsive\ndesign also makes it possible for users with low vision to resize the user interface without needing to\nscroll horizontally. Media queries can also be used to detect non- visual browsers and customize the\nCSS for these devices.\nBecause inline styles in React components are actually JavaScript, rather than CSS, it’s not easily pos-\nsible to write media queries as style modules or using inline styles. Two common ways to use media\nqueries in React components are by including a CSS stylesheet into the component or by using a\ncustom hook.\nImplementing Accessibility in React Components ❘ 421\nMedia Queries in Included CSS\nIf your React toolchain is configured to allow the importing of CSS files (as is the case if you use\nCreate React App), you can use media queries in React the same way that you’d use them in any web\napplication.",
		"custom hook.\nImplementing Accessibility in React Components ❘ 421\nMedia Queries in Included CSS\nIf your React toolchain is configured to allow the importing of CSS files (as is the case if you use\nCreate React App), you can use media queries in React the same way that you’d use them in any web\napplication.\nListing 19-7 shows how to use media queries in CSS to format a web application differently at\ndifferent viewport widths. Each width at which the styles change in responsive design is called a\n“breakpoint.”\nHOW MANY BREAKPOINTS SHOULD YOU HAVE?\nAt the very least, a responsive web application should have a separate design for\nmobile devices and desktop devices. While a mobile layout may work fine on a desk-\ntop device, mobile- specific user interface controls (especially those involving touch\nevents) may not work correctly on desktop computers.\nThe breakpoints specified in the sample CSS shown in Listing 19-7 are much more",
		"At the very least, a responsive web application should have a separate design for\nmobile devices and desktop devices. While a mobile layout may work fine on a desk-\ntop device, mobile- specific user interface controls (especially those involving touch\nevents) may not work correctly on desktop computers.\nThe breakpoints specified in the sample CSS shown in Listing 19-7 are much more\ngranular, and you can even refine your breakpoints further to customize the CSS for\ndevices that may fall in between these standard ones.\nMany websites and organizations have created sample media queries that you can\ncopy and paste into your applications. The ones in Listing 19-7 come from https://\nresponsivedesign.is.\nLISTING 19- 7: Responsive media queries in a CSS file\n/* Smartphones (portrait and landscape) - - - - - - - - - - - */\n@media only screen and (min-d evice-w idth : 320px) and (max-d evice-w idth : 480px) {\n/* Styles */\n}\n/* iPads (portrait and landscape) - - - - - - - - - - - */",
		"copy and paste into your applications. The ones in Listing 19-7 come from https://\nresponsivedesign.is.\nLISTING 19- 7: Responsive media queries in a CSS file\n/* Smartphones (portrait and landscape) - - - - - - - - - - - */\n@media only screen and (min-d evice-w idth : 320px) and (max-d evice-w idth : 480px) {\n/* Styles */\n}\n/* iPads (portrait and landscape) - - - - - - - - - - - */\n@media only screen and (min-d evice-w idth : 768px) and (max-d evice-w idth : 1024px) {\n/* Styles */\n}\n/* Desktops and laptops - - - - - - - - - - - */\n@media only screen and (min- width : 1224px) {\n/* Styles */\n}\n/* Large screens - - - - - - - - - - - */\n@media only screen and (min- width : 1824px) {\n/* Styles */\n}\n422 ❘ CHAPTER 19 Accessibility in ReAct\nUsing useMediaQuery\nThe useMediaQuery hook is part of the react- responsive library. To use it, you first need to install\nit using npm install react- responsive and then import it into your component. Once you’ve",
		"/* Styles */\n}\n/* Large screens - - - - - - - - - - - */\n@media only screen and (min- width : 1824px) {\n/* Styles */\n}\n422 ❘ CHAPTER 19 Accessibility in ReAct\nUsing useMediaQuery\nThe useMediaQuery hook is part of the react- responsive library. To use it, you first need to install\nit using npm install react- responsive and then import it into your component. Once you’ve\nimported it, you can use either the MediaQuery component or the useMediaQuery hook.\nTo use the useMediaQuery hook, pass a query to it as a parameter. The result will be a Boolean\nvalue that you can use to conditionally render JSX. Listing 19-8 shows an example of using\nuseMediaQuery to conditionally render one of four different components based on the size of\nthe viewport.\nLISTING 19- 8: Conditionally rendering children based on a media query\nimport { useMediaQuery } from 'react-r esponsive'\nconst Desktop = ({ children }) => {\nconst isDesktop = useMediaQuery({ minWidth: 992 })\nreturn isDesktop ? children : null\n}",
		"useMediaQuery to conditionally render one of four different components based on the size of\nthe viewport.\nLISTING 19- 8: Conditionally rendering children based on a media query\nimport { useMediaQuery } from 'react-r esponsive'\nconst Desktop = ({ children }) => {\nconst isDesktop = useMediaQuery({ minWidth: 992 })\nreturn isDesktop ? children : null\n}\nconst Tablet = ({ children }) => {\nconst isTablet = useMediaQuery({ minWidth: 768, maxWidth: 991 })\nreturn isTablet ? children : null\n}\nconst Mobile = ({ children }) => {\nconst isMobile = useMediaQuery({ maxWidth: 767 })\nreturn isMobile ? children : null\n}\nconst Default = ({ children }) => {\nconst isNotMobile = useMediaQuery({ minWidth: 768 })\nreturn isNotMobile ? children : null\n}\nconst Example = () => (\n<div>\n<Desktop>Desktop or laptop</Desktop>\n<Tablet>Tablet</Tablet>\n<Mobile>Mobile</Mobile>\n<Default>Not mobile (desktop or laptop or tablet)</Default>\n</div>\n)\nexport default Example;\nSUMMARY",
		"return isMobile ? children : null\n}\nconst Default = ({ children }) => {\nconst isNotMobile = useMediaQuery({ minWidth: 768 })\nreturn isNotMobile ? children : null\n}\nconst Example = () => (\n<div>\n<Desktop>Desktop or laptop</Desktop>\n<Tablet>Tablet</Tablet>\n<Mobile>Mobile</Mobile>\n<Default>Not mobile (desktop or laptop or tablet)</Default>\n</div>\n)\nexport default Example;\nSUMMARY\nAccessibility is an essential element in the design and implementation of any user interface. It helps to\nensure that the largest possible number of users will be able to access and make use of your applica-\ntion. The techniques for implementing accessibility with React are largely the same as with any web\nUI, but with some important technical differences.\nSummary ❘ 423\nIn this chapter, you learned:\n➤➤ Why accessibility is important.\n➤➤ What the main accessibility standards are.\n➤➤ How ARIA attributes help to identify user interface components.\n➤➤ The importance of semantic and valid HTML.",
		"tion. The techniques for implementing accessibility with React are largely the same as with any web\nUI, but with some important technical differences.\nSummary ❘ 423\nIn this chapter, you learned:\n➤➤ Why accessibility is important.\n➤➤ What the main accessibility standards are.\n➤➤ How ARIA attributes help to identify user interface components.\n➤➤ The importance of semantic and valid HTML.\n➤➤ How to make forms accessible.\n➤➤ How to control focus in a React component.\n➤➤ How to implement media queries in React.\nIn the next chapter, you’ll be introduced to some additional tools and resources that will help you to\ncontinue to become a better React programmer long beyond the limits of this book.",
		"20\nGoing Further\nI’ve covered a lot of material in this book, but your React learning journey is just beginning.\nThe React ecosystem is giant, active, and growing. What this means is that developers are con-\nstantly creating new tools to use with React and improving existing ones.\nWith all the activity, having a guide to the next steps can be invaluable. In this chapter, I’ll give\nyou a head start on where to go from here by discussing or expanding on some of the topics\nthat I didn’t have room for earlier in the book.\nIn this chapter, you’ll learn:\n➤➤ About testing and popular testing libraries.\n➤➤ What server- side rendering is.\n➤➤ How GraphQL works.\n➤➤ How to use GraphQL with Apollo.\n➤➤ What Flux and Redux are.\n➤➤ What Next.js and Gatsby are and how they’re used.\n➤➤ What organizations and people to follow to keep up to date on React.\nTESTING\nThe process of testing React components and user interfaces is similar to the process for test-",
		"➤➤ About testing and popular testing libraries.\n➤➤ What server- side rendering is.\n➤➤ How GraphQL works.\n➤➤ How to use GraphQL with Apollo.\n➤➤ What Flux and Redux are.\n➤➤ What Next.js and Gatsby are and how they’re used.\n➤➤ What organizations and people to follow to keep up to date on React.\nTESTING\nThe process of testing React components and user interfaces is similar to the process for test-\ning any JavaScript application, and there are many automated testing tools to choose from. If\nyou’re using Create React App, the most straightforward choice is simple—C reate React App\ninstalls and configures Facebook’s Jest testing framework for you.\nAlthough Jest is popular and quite good, other tools and libraries may offer features or a way\nof working that you prefer. You might choose to use some of these tools together with Jest or in\nplace of similar functionality that’s provided by Jest. Here are a few of the most popular testing\ntools for React besides Jest.",
		"installs and configures Facebook’s Jest testing framework for you.\nAlthough Jest is popular and quite good, other tools and libraries may offer features or a way\nof working that you prefer. You might choose to use some of these tools together with Jest or in\nplace of similar functionality that’s provided by Jest. Here are a few of the most popular testing\ntools for React besides Jest.\n426 ❘ CHAPTER 20 GoinG Further\nMocha\nMocha, like Jest, is an automated testing framework. Mocha is more configurable than Jest, and as a\nresult, it may require more initial configuration. Mocha tests run sequentially, unlike Jest, which runs\ntests in parallel. Also unlike Jest, Mocha doesn’t include its own assertion library. Instead, it’s com-\nmonly used along with the Chai assertion library, which you’ll learn about in the next section.\nTest suites created with Mocha look very similar to those created with Jest. They use a function",
		"tests in parallel. Also unlike Jest, Mocha doesn’t include its own assertion library. Instead, it’s com-\nmonly used along with the Chai assertion library, which you’ll learn about in the next section.\nTest suites created with Mocha look very similar to those created with Jest. They use a function\nnamed describe() to create a test suite, and a function named it to define assertions (aka tests).\nListing 20-1 shows a simple test suite created with Mocha and the Assert assertion library.\nLISTING 20- 1: A test suite created with Mocha\nconst assert = require('assert');\ndescribe('Array', function() {\ndescribe('#indexOf()', function() {\nit('should return - 1 when the value is not present', function() {\nassert.equal([1, 2, 3].indexOf(4), -1 );\n});\n});\n});\nEnzyme\nEnzyme is a testing utility for React that was developed by AirBnB. It can be used in place of React’s\nbuilt- in testing library (which you saw in Chapter 15). Enzyme’s interface for selecting and work-",
		"describe('Array', function() {\ndescribe('#indexOf()', function() {\nit('should return - 1 when the value is not present', function() {\nassert.equal([1, 2, 3].indexOf(4), -1 );\n});\n});\n});\nEnzyme\nEnzyme is a testing utility for React that was developed by AirBnB. It can be used in place of React’s\nbuilt- in testing library (which you saw in Chapter 15). Enzyme’s interface for selecting and work-\ning with nodes in the output of components is similar to how jQuery works with the DOM. With\nEnzyme, you can use familiar CSS- style selectors to locate nodes that you want to test. Enzyme makes\nit easier to traverse and inspect the elements output from your application’s React components, which\nis an essential part of unit testing a React application.\nTo use Enzyme, you first render a component using one of its three render methods:\n➤➤ shallow: Renders a single component. The shallow method is most often used for unit test-",
		"it easier to traverse and inspect the elements output from your application’s React components, which\nis an essential part of unit testing a React application.\nTo use Enzyme, you first render a component using one of its three render methods:\n➤➤ shallow: Renders a single component. The shallow method is most often used for unit test-\ning, in which it’s important to be sure that you’re not indirectly testing the behavior of child\ncomponents.\n➤➤ mount: Renders a component and mounts it in the DOM. The mount method is typically used\nwith a browser simulator such as jsdom. Jsdom is a “headless” browser that runs completely\nin JavaScript. Use mount for testing higher-o rder components and components that interact\nwith the DOM.\n➤➤ render: Renders static HTML from your component. You can use the render method to test\nthe structure of the HTML returned by a component.\nAmong the functions included with Enzyme is the find method, which is a simple way to locate",
		"in JavaScript. Use mount for testing higher-o rder components and components that interact\nwith the DOM.\n➤➤ render: Renders static HTML from your component. You can use the render method to test\nthe structure of the HTML returned by a component.\nAmong the functions included with Enzyme is the find method, which is a simple way to locate\nand select elements in a component. The find method takes the place of several functions that are\nincluded with ReactDOM’s testing utilities, including findRenderedDOMComponentWithClass,\nfindRenderedDOMComponentWithTag, and findRenderedComponentWithType.\nTesting ❘ 427\nListing 20-2 shows how to use the shallow method to render a component and the find method to\nlocate a node within it. Once you’ve rendered the component and made a selection with find, you\ncan test the selected node using an assertion library (such as Chai, in this example).\nLISTING 20- 2: Rendering and finding a node with Enzyme\nimport React from 'react';\nimport { expect } from 'chai';",
		"Listing 20-2 shows how to use the shallow method to render a component and the find method to\nlocate a node within it. Once you’ve rendered the component and made a selection with find, you\ncan test the selected node using an assertion library (such as Chai, in this example).\nLISTING 20- 2: Rendering and finding a node with Enzyme\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'enzyme';\nimport MyComponent from './MyComponent';\nimport Foo from './Foo';\ndescribe('<MyComponent />', () => {\nit('renders three <Foo/> components', () => {\nconst wrapper = shallow(<MyComponent />);\nexpect(wrapper.find(Foo)).to.have.lengthOf(3);\n});\n});\nChai\nChai is an assertion library. Assertion libraries are used with testing frameworks and testing librar-\nies to provide functions for declaring what result you expect in a test. Chai is often used along with\nMocha and Enzyme, but it can also be used with Jest.\nChai has three different ways that you can write assertions:",
		"expect(wrapper.find(Foo)).to.have.lengthOf(3);\n});\n});\nChai\nChai is an assertion library. Assertion libraries are used with testing frameworks and testing librar-\nies to provide functions for declaring what result you expect in a test. Chai is often used along with\nMocha and Enzyme, but it can also be used with Jest.\nChai has three different ways that you can write assertions:\n➤➤ Assert\n➤➤ Expect\n➤➤ Should\nAssert\nThe assert style is similar to the assert function that comes with Node.js. It uses the assert function,\nfollowed by a matcher function, as shown in Listing 20-3.\nLISTING 20- 3: Using Chai’s assert method\nconst assert = require('chai').assert;\nlet foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\nassert.typeOf(foo, 'string'); // without optional message\nassert.typeOf(foo, 'string', 'foo is a string'); // with optional message\nassert.equal(foo, 'bar', 'foo equal `bar`');\nassert.lengthOf(foo, 3, 'foo`s value has a length of 3');",
		"LISTING 20- 3: Using Chai’s assert method\nconst assert = require('chai').assert;\nlet foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\nassert.typeOf(foo, 'string'); // without optional message\nassert.typeOf(foo, 'string', 'foo is a string'); // with optional message\nassert.equal(foo, 'bar', 'foo equal `bar`');\nassert.lengthOf(foo, 3, 'foo`s value has a length of 3');\nassert.lengthOf(beverages.tea, 3, 'beverages has 3 types of tea');\n428 ❘ CHAPTER 20 GoinG Further\nExpect\nExpect is commonly used for Behavior Driven Development (BDD). It uses a chain of functions to\nproduce an assertion that resembles how you would describe a test in English. An example of using\nexpect is shown in Listing 20-4.\nLISTING 20- 4: Using Chai’s expect method\nconst assert = require('chai').assert;\nlet foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\nexpect(foo).to.be.a('string');\nexpect(foo).to.equal('bar');\nexpect(foo).to.have.lengthOf(3);",
		"produce an assertion that resembles how you would describe a test in English. An example of using\nexpect is shown in Listing 20-4.\nLISTING 20- 4: Using Chai’s expect method\nconst assert = require('chai').assert;\nlet foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\nexpect(foo).to.be.a('string');\nexpect(foo).to.equal('bar');\nexpect(foo).to.have.lengthOf(3);\nexpect(beverages).to.have.property('tea').with.lengthOf(3);\nShould\nThe should method extends each object with a should property that starts a chain similar to the\nchains used by expect. Listing 20-5 shows examples of assertions written with should.\nLISTING 20- 5: Using Chai’s should method\nconst should = require('chai').should(); //actually call the function\nlet foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\nfoo.should.be.a('string');\nfoo.should.equal('bar');\nfoo.should.have.lengthOf(3);\nbeverages.should.have.property('tea').with.lengthOf(3);\nKarma",
		"LISTING 20- 5: Using Chai’s should method\nconst should = require('chai').should(); //actually call the function\nlet foo = 'bar';\nconst beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\nfoo.should.be.a('string');\nfoo.should.equal('bar');\nfoo.should.have.lengthOf(3);\nbeverages.should.have.property('tea').with.lengthOf(3);\nKarma\nJest and Mocha both run in Node.js and can test your code using a simulated web browser. Even\nthe best simulated web browser isn’t the same as a real one, however, and there’s a possibility\nthat your React code may not run exactly the same in Firefox as it does in Chrome running on an\nAndroid device.\nKarma is a tool for testing JavaScript code in real browsers. It works by launching an HTTP server\nand then loading your tests (written with whichever tools you prefer) into each of a list of browsers\nthat you specify. Karma then reports the result of running each test in each browser.\nNightwatch.js",
		"Android device.\nKarma is a tool for testing JavaScript code in real browsers. It works by launching an HTTP server\nand then loading your tests (written with whichever tools you prefer) into each of a list of browsers\nthat you specify. Karma then reports the result of running each test in each browser.\nNightwatch.js\nNightwatch is an end- to- end testing tool. The idea of end-t o- end testing is to test scenarios as if from\nthe eyes of the user. Nightwatch controls web browsers to simulate user actions.\nServer- Side Rendering ❘ 429\nListing 20-6 shows an example test suite (from the nightwatchjs.org website) that opens\nthe Ecosia search engine, searches for “nightwatch,” and checks that the first result is the\nnightwatchjs.org website.\nLISTING 20- 6: A Nightwatch test suite\nmodule.exports = {\n'Demo test ecosia.org' : function(browser) {\nbrowser\n.url('https://www.ecosia.org/')\n.waitForElementVisible('body')\n.assert.titleContains('Ecosia')\n.assert.visible('input[type=search]')",
		"the Ecosia search engine, searches for “nightwatch,” and checks that the first result is the\nnightwatchjs.org website.\nLISTING 20- 6: A Nightwatch test suite\nmodule.exports = {\n'Demo test ecosia.org' : function(browser) {\nbrowser\n.url('https://www.ecosia.org/')\n.waitForElementVisible('body')\n.assert.titleContains('Ecosia')\n.assert.visible('input[type=search]')\n.setValue('input[type=search]', 'nightwatch')\n.assert.visible('button[type=submit]')\n.click('button[type=submit]')\n.assert.containsText('.mainline-r esults', 'Nightwatch.js')\n.end();\n}\n};\nSERVER- SIDE RENDERING\nMost of the time, React runs in a web browser and manages rendering and updating of components\nby manipulating the DOM. However, because React components are just JavaScript functions, they\ncan also run inside of any other JavaScript engine. Server- side React runs React components to\ngenerate static files that can be sent to a web browser when a React user interface is first requested.",
		"Most of the time, React runs in a web browser and manages rendering and updating of components\nby manipulating the DOM. However, because React components are just JavaScript functions, they\ncan also run inside of any other JavaScript engine. Server- side React runs React components to\ngenerate static files that can be sent to a web browser when a React user interface is first requested.\nThe result is that the initial rendering of the page is faster, because it doesn’t have to happen in the\nuser’s browser.\nServer- side rendering works by having an instance of the ReactDOMServer library on the server (typi-\ncally in a Node.js server) and using one of its render methods to generate static HTML. ReactDOM-\nServer has four render methods you can choose from, depending on your needs:\n➤➤ renderToString: Renders the app to a static HTML string. Inside the browser,\nthis HTML string can be turned into a functioning React user interface using the\nReactDOM.hydrate method.",
		"cally in a Node.js server) and using one of its render methods to generate static HTML. ReactDOM-\nServer has four render methods you can choose from, depending on your needs:\n➤➤ renderToString: Renders the app to a static HTML string. Inside the browser,\nthis HTML string can be turned into a functioning React user interface using the\nReactDOM.hydrate method.\n➤➤ renderToStaticMarkup: Renders the app to static HTML, without the attributes that React\nnormally adds to HTML. The result is a smaller file, but one that can’t be made interactive\nusing ReactDOM.hydrate. You can use renderToStaticMarkup to create a static file server.\n➤➤ renderToNodeStream: Returns the same HTML as renderToString but encoded as a Node\nStream rather than as a string.\n➤➤ renderToStaticNodeStream: Returns the same HTML as renderToStaticMarkup, but for-\nmatted as a Node Stream.\n430 ❘ CHAPTER 20 GoinG Further\nFlux\nFlux is a pattern for how to manage data within an application. With the Flux pattern, data is kept",
		"➤➤ renderToNodeStream: Returns the same HTML as renderToString but encoded as a Node\nStream rather than as a string.\n➤➤ renderToStaticNodeStream: Returns the same HTML as renderToStaticMarkup, but for-\nmatted as a Node Stream.\n430 ❘ CHAPTER 20 GoinG Further\nFlux\nFlux is a pattern for how to manage data within an application. With the Flux pattern, data is kept\nin stores that can be subscribed to by user interface components. When a store that a component is\nsubscribed to changes, the user interface component (also known as the view) fetches the new data\nand uses it to update.\nChanging the data in a store is done using actions, which are dispatched in response to events in\nthe view. All data in a Flux application flows in a single direction. Figure 20-1 shows the basic\nFlux pattern.\nAction Dispatcher Store View\nFIGURE 20- 1: The Flux pattern\nRedux\nAs your user interface gets larger, it can be helpful to centralize some or all of the data used in it,",
		"Changing the data in a store is done using actions, which are dispatched in response to events in\nthe view. All data in a Flux application flows in a single direction. Figure 20-1 shows the basic\nFlux pattern.\nAction Dispatcher Store View\nFIGURE 20- 1: The Flux pattern\nRedux\nAs your user interface gets larger, it can be helpful to centralize some or all of the data used in it,\nrather than having stateful variables spread throughout your components.\nRedux is a library for managing state in a React application that implements the Flux pattern.\nRedux centralizes the state data in an application into a single state tree. This state tree is modi-\nfied from within components by dispatching “actions.” These actions, in turn, trigger pure functions\ncalled reducers, which update the Redux state tree. Figure 20-2 shows how data flows in a Redux\napplication.\nActions Reducers Store\nReact\nComponents\nFIGURE 20- 2: Data flow in a Redux application",
		"Redux centralizes the state data in an application into a single state tree. This state tree is modi-\nfied from within components by dispatching “actions.” These actions, in turn, trigger pure functions\ncalled reducers, which update the Redux state tree. Figure 20-2 shows how data flows in a Redux\napplication.\nActions Reducers Store\nReact\nComponents\nFIGURE 20- 2: Data flow in a Redux application\nA React application that uses Redux has a single object that contains all of its data. This object is\ncalled the Redux store. A store is created using the createStore method. The createStore method\ntakes a function parameter, called a reducer, as its argument. The reducer contains all the methods\nthat can be used to work with the data in the store.\nThe following is an example of a reducer function for a simple counter application:\nconst counterReducer = (state = 0, action) => {\nswitch (action.type) {\nServer- Side Rendering ❘ 431\ncase 'INCREMENT':\nreturn state + 1\ncase 'DECREMENT':",
		"takes a function parameter, called a reducer, as its argument. The reducer contains all the methods\nthat can be used to work with the data in the store.\nThe following is an example of a reducer function for a simple counter application:\nconst counterReducer = (state = 0, action) => {\nswitch (action.type) {\nServer- Side Rendering ❘ 431\ncase 'INCREMENT':\nreturn state + 1\ncase 'DECREMENT':\nreturn state - 1\ndefault:\nreturn state\n}\n}\nTo create a store, pass the reducer function into Redux’s createStore function, like this:\nimport { createStore } from 'redux';\nconst store = createStore(counterReducer)\nEach possible case in the reducer’s switch statement corresponds to an action that can be dispatched\nin response to an event in the user interface.\nAn action in Redux is a JavaScript object that has a type and an optional payload. For example, in a\nRedux counter app, clicking an “Increment” button doesn’t call a setState function. Rather, it trig-",
		"const store = createStore(counterReducer)\nEach possible case in the reducer’s switch statement corresponds to an action that can be dispatched\nin response to an event in the user interface.\nAn action in Redux is a JavaScript object that has a type and an optional payload. For example, in a\nRedux counter app, clicking an “Increment” button doesn’t call a setState function. Rather, it trig-\ngers the Redux dispatcher (which is a method of the store object) and passes it an action object:\n<button onClick={() => store.dispatch({ type: 'INCREMENT' })}>\n+\n</button>\n<button onClick={() => store.dispatch({ type: 'DECREMENT' })}>\n-\n</button>\nThe store’s reducer function receives the action and uses its type property to decide how to change\nthe store. Changing the store causes the application to re-r ender.\nPutting it all together, Listing 20-7 shows a complete Redux counter example.\nLISTING 20- 7: A Redux counter\nimport React from 'react'\nimport ReactDOM from 'react- dom'",
		"-\n</button>\nThe store’s reducer function receives the action and uses its type property to decide how to change\nthe store. Changing the store causes the application to re-r ender.\nPutting it all together, Listing 20-7 shows a complete Redux counter example.\nLISTING 20- 7: A Redux counter\nimport React from 'react'\nimport ReactDOM from 'react- dom'\nimport { createStore } from 'redux'\nconst counterReducer = (state = 0, action) => {\nswitch (action.type) {\ncase 'INCREMENT':\nreturn state + 1\ncase 'DECREMENT':\nreturn state - 1\ndefault:\nreturn state\n}\n}\nconst store = createStore(counterReducer)\nconst rootEl = document.getElementById('root')\ncontinues\n432 ❘ CHAPTER 20 GoinG Further\nLISTING 20-7 (continued)\nconst Counter = (props)=>{\nreturn (\n<p>\nClicked: {props.value} times\n<button onClick={props.onIncrement}>\n+\n</button>\n<button onClick={props.onDecrement}>\n-\n</button>\n</p>\n)\n}\nconst render = () => ReactDOM.render(\n<Counter\nvalue={store.getState()}",
		"const rootEl = document.getElementById('root')\ncontinues\n432 ❘ CHAPTER 20 GoinG Further\nLISTING 20-7 (continued)\nconst Counter = (props)=>{\nreturn (\n<p>\nClicked: {props.value} times\n<button onClick={props.onIncrement}>\n+\n</button>\n<button onClick={props.onDecrement}>\n-\n</button>\n</p>\n)\n}\nconst render = () => ReactDOM.render(\n<Counter\nvalue={store.getState()}\nonIncrement={() => store.dispatch({ type: 'INCREMENT' })}\nonDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n/>,\nrootEl\n)\nrender()\nstore.subscribe(render)\nIf this example looks complicated to you, that’s because it is. Redux is not meant to be used for such\nsimple applications. However, even for larger applications, Redux often involves more complexity\nthan is necessary.\nGraphQL\nGraphQL is a query language for APIs. GraphQL services are created by defining types and fields on\nthose types. For example, you might have a type named User that might look like this:\ntype User {\nid: ID\nfname: String\nlname: String\n}",
		"simple applications. However, even for larger applications, Redux often involves more complexity\nthan is necessary.\nGraphQL\nGraphQL is a query language for APIs. GraphQL services are created by defining types and fields on\nthose types. For example, you might have a type named User that might look like this:\ntype User {\nid: ID\nfname: String\nlname: String\n}\nA GraphQL server accepts requests and returns JSON data to the client application. Here’s an exam-\nple of a GraphQL query:\n{\nuser(id:\"1\") {\nfname\nlname\n}\n}\nServer- Side Rendering ❘ 433\nThe response from the preceding query might look something like the following:\n{\n\"data\": {\n\"user\": {\n\"fname\": \"Chris\",\n\"lname\": \"Minnick\"\n}\n}\n}\nBecause a GraphQL query has the same shape as the returned data, GraphQL is a more declarative\nway to fetch remote data than using REST.\nApollo\nLike Redux, Apollo is a state management library. Unlike Redux, Apollo lets you manage both",
		"The response from the preceding query might look something like the following:\n{\n\"data\": {\n\"user\": {\n\"fname\": \"Chris\",\n\"lname\": \"Minnick\"\n}\n}\n}\nBecause a GraphQL query has the same shape as the returned data, GraphQL is a more declarative\nway to fetch remote data than using REST.\nApollo\nLike Redux, Apollo is a state management library. Unlike Redux, Apollo lets you manage both\nyour local and remote data. Apollo has a client component that interacts with a remote GraphQL\nserver to fetch data, and a provider component that makes the data available to components in your\nReact app.\nThe first step in using Apollo is to have a GraphQL server to connect to. This is the most involved\npart of the process of using GraphQL and Apollo. You can create your own GraphQL server by\nfollowing the instructions from the “How to Create a GraphQL Server” tutorial on Apollo’s web-\nsite at https://www.apollographql.com/blog/tutorial- building- a- graphql- server-\ncddaa023c035/.",
		"React app.\nThe first step in using Apollo is to have a GraphQL server to connect to. This is the most involved\npart of the process of using GraphQL and Apollo. You can create your own GraphQL server by\nfollowing the instructions from the “How to Create a GraphQL Server” tutorial on Apollo’s web-\nsite at https://www.apollographql.com/blog/tutorial- building- a- graphql- server-\ncddaa023c035/.\nOnce you have a GraphQL server, you can connect to it with the Apollo client. Listing 20-8 shows\nhow to create an Apollo client.\nLISTING 20- 8: Creating an Apollo client\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nconst client = new ApolloClient({\nuri: 'https://my.graphql.server',\ncache: new InMemoryCache()\n});\nTo connect an Apollo client to your React app, you can use the ApolloProvider component, as\nshown in Listing 20-9.\nLISTING 20- 9: Using an Apollo provider\nimport React from 'react';\nimport { render } from 'react- dom';",
		"import { ApolloClient, InMemoryCache } from '@apollo/client';\nconst client = new ApolloClient({\nuri: 'https://my.graphql.server',\ncache: new InMemoryCache()\n});\nTo connect an Apollo client to your React app, you can use the ApolloProvider component, as\nshown in Listing 20-9.\nLISTING 20- 9: Using an Apollo provider\nimport React from 'react';\nimport { render } from 'react- dom';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\ncontinues\n434 ❘ CHAPTER 20 GoinG Further\nLISTING 20-9 (continued)\nconst client = new ApolloClient({\nuri: 'https://my.graphql.server',\ncache: new InMemoryCache()\n});\nfunction App() {\nreturn (\n<div>\n<h2>My first Apollo app</h2>\n</div>\n);\n}\nrender(\n<ApolloProvider client={client}>\n<App/>\n</ApolloProvider>,\ndocument.getElementById('root'),\n);\nReact Native\nReact Native is a framework for creating native mobile apps using React. React Native works the",
		"const client = new ApolloClient({\nuri: 'https://my.graphql.server',\ncache: new InMemoryCache()\n});\nfunction App() {\nreturn (\n<div>\n<h2>My first Apollo app</h2>\n</div>\n);\n}\nrender(\n<ApolloProvider client={client}>\n<App/>\n</ApolloProvider>,\ndocument.getElementById('root'),\n);\nReact Native\nReact Native is a framework for creating native mobile apps using React. React Native works the\nsame way as React: components are JavaScript functions or classes that return JSX. The difference\nbetween React and React Native is that React Native doesn’t manipulate the HTML DOM. Instead,\nReact Native components return JSX elements that map to mobile user interface building blocks such\nas Text, View, and Image. React Native was explored further in Chapter 4.\nNext.js\nNext.js is a React development web framework, similar to Create React App. Like Create React\nApp, Next.js helps you to get started with your React app quickly and provides tools that you’ll use",
		"React Native components return JSX elements that map to mobile user interface building blocks such\nas Text, View, and Image. React Native was explored further in Chapter 4.\nNext.js\nNext.js is a React development web framework, similar to Create React App. Like Create React\nApp, Next.js helps you to get started with your React app quickly and provides tools that you’ll use\nthroughout the development and building of your application.\nIn terms of features, the two main differences between Next.js and Create React App are:\n➤➤ Next.js is more configurable than Create React App.\n➤➤ Next.js supports server- side rendering. Create React App can be configured to support server-\nside rendering, but it doesn’t support it by default.\nGatsby\nGatsby is a static site generator. It pre-r enders React user interfaces and pre-f etches data on the server,\nwhich makes rendering of the site happen faster on the client. Besides speed, another benefit to serv-",
		"➤➤ Next.js supports server- side rendering. Create React App can be configured to support server-\nside rendering, but it doesn’t support it by default.\nGatsby\nGatsby is a static site generator. It pre-r enders React user interfaces and pre-f etches data on the server,\nwhich makes rendering of the site happen faster on the client. Besides speed, another benefit to serv-\ning static pages to browsers is that static pages may be more easily accessible by search engines, which\ncan mean that static sites will receive higher search engine placement. Since static sites don’t interact\nwith the server or a database from the browser, they are also often more secure and provide less\nopportunity for a malicious script or user to access or modify data they’re not authorized to access.\nUseful Links and Resources ❘ 435\nPEOPLE TO FOLLOW\nGiven how active the React developer community is and how popular React is, it’s important to stay",
		"with the server or a database from the browser, they are also often more secure and provide less\nopportunity for a malicious script or user to access or modify data they’re not authorized to access.\nUseful Links and Resources ❘ 435\nPEOPLE TO FOLLOW\nGiven how active the React developer community is and how popular React is, it’s important to stay\non top of the latest developments. A great place to find out about the latest React news and trends\nin the React community is on Twitter. The following is a list of React and JavaScript developers and\norganizations you may want to follow:\n➤➤ React News (@ReactExpo): ReactJS and React Native news, templates, and jobs.\n➤➤ Rectiflux (@reactiflux): A chat community of over 147,000 React and React Native\ndevelopers.\n➤➤ Andrew Clark (@acdlite): ReactJS developer at Facebook. Co- creator of Redux.\n➤➤ ReactJS News (@ReactJSNews): The latest ReactJS news and articles.\n➤➤ React (@reactjs): The official ReactJS Twitter account.",
		"➤➤ React News (@ReactExpo): ReactJS and React Native news, templates, and jobs.\n➤➤ Rectiflux (@reactiflux): A chat community of over 147,000 React and React Native\ndevelopers.\n➤➤ Andrew Clark (@acdlite): ReactJS developer at Facebook. Co- creator of Redux.\n➤➤ ReactJS News (@ReactJSNews): The latest ReactJS news and articles.\n➤➤ React (@reactjs): The official ReactJS Twitter account.\n➤➤ React Newsletter (@reactnewsletter): The free, weekly newsletter of the latest React news,\ntutorials, resources, and more.\n➤➤ Becca Bailey (@beccaliz): Engineering manager at Formidable labs.\n➤➤ MadeWithReactJS (@madewith_react): A collection of projects made with ReactJS.\n➤➤ Jessica Carter (@jesss_codes): Freelance software engineer who frequently tweets\nabout React.\n➤➤ Dan Abramov (@dan_abramov): Software engineer at Facebook. Co- creator of Redux and\nCreate React App.\n➤➤ Mark Dalgleish (@markdalgleish): React developer and co- creator of CSS Modules.",
		"➤➤ MadeWithReactJS (@madewith_react): A collection of projects made with ReactJS.\n➤➤ Jessica Carter (@jesss_codes): Freelance software engineer who frequently tweets\nabout React.\n➤➤ Dan Abramov (@dan_abramov): Software engineer at Facebook. Co- creator of Redux and\nCreate React App.\n➤➤ Mark Dalgleish (@markdalgleish): React developer and co- creator of CSS Modules.\n➤➤ John- David Dalton (@jdalton): JavaScript developer and creator of the Lodash library.\n➤➤ Sean Larkin (@TheLarkinn): Webpack developer.\nUSEFUL LINKS AND RESOURCES\nWhen you need help or have questions about how to do something in React, chances are good that\nsomeone else has had a similar problem and the solution can be found with a quick search. If you run\ninto a new problem, finding help is usually not a problem and your question may help others who are\nhaving the same issue. The open source community thrives because of users helping each other out,",
		"When you need help or have questions about how to do something in React, chances are good that\nsomeone else has had a similar problem and the solution can be found with a quick search. If you run\ninto a new problem, finding help is usually not a problem and your question may help others who are\nhaving the same issue. The open source community thrives because of users helping each other out,\nand as you gain more experience, you may be able to solve others’ problems as well. Here are some of\nthe best places to give and find help with React programming:\n➤➤ Stack Overflow: Stack Overflow is the first place to check, and the place where you’re most\nlikely to find an answer. You can find questions tagged with reactjs at https://stack-\noverflow.com/questions/tagged/reactjs.\n➤➤ Reddit’s React community: Although you’re less likely to find answers to specific questions\non Reddit, you can often find interesting discussions or projects posted at https://www\n.reddit.com/r/reactjs/.",
		"likely to find an answer. You can find questions tagged with reactjs at https://stack-\noverflow.com/questions/tagged/reactjs.\n➤➤ Reddit’s React community: Although you’re less likely to find answers to specific questions\non Reddit, you can often find interesting discussions or projects posted at https://www\n.reddit.com/r/reactjs/.\n436 ❘ CHAPTER 20 GoinG Further\n➤➤ Dev.to: The react tag on Dev.to is an active place to find links to articles and tutorials about\nReact and React- related topics. https://dev.to/t/react\n➤➤ React Community on Facebook: React was created by Facebook, and so it’s logical that there\nwould be an active React Facebook community. In reality, this isn’t really the case, but fol-\nlowing the React Facebook community is a good way to stay on top of announcements from\nFacebook related to React.\n➤➤ Reactiflux: The Reactiflux website and the online chat at https://discord.gg/reactiflux\nare both great resources for learning about React and for getting and giving help.",
		"would be an active React Facebook community. In reality, this isn’t really the case, but fol-\nlowing the React Facebook community is a good way to stay on top of announcements from\nFacebook related to React.\n➤➤ Reactiflux: The Reactiflux website and the online chat at https://discord.gg/reactiflux\nare both great resources for learning about React and for getting and giving help.\n➤➤ Hashnode: Hashnode is another site with an active React community. Check it out at\nhttps://hashnode.com/n/reactjs.\nSUMMARY\nYou’ve come to the end of this book, and hopefully you’ve gained a good understanding of the foun-\ndations of ReactJS. There’s always more to learn, and the brief summaries in this chapter should give\nyou some good jumping off points.\nIn this chapter, you learned:\n➤➤ Several popular testing libraries and frameworks.\n➤➤ What server- side rendering is.\n➤➤ What GraphQL and Apollo are.\n➤➤ About Next.js and how it compares to Create React App.",
		"dations of ReactJS. There’s always more to learn, and the brief summaries in this chapter should give\nyou some good jumping off points.\nIn this chapter, you learned:\n➤➤ Several popular testing libraries and frameworks.\n➤➤ What server- side rendering is.\n➤➤ What GraphQL and Apollo are.\n➤➤ About Next.js and how it compares to Create React App.\n➤➤ About using Gatsby for static site generation.\n➤➤ Who to follow on Twitter.\n➤➤ Resources to use for getting help with React.\nEvery React developer benefits from the amazing React community. Now that you have a solid foun-\ndation of React knowledge, one of the best ways to continue to learn and to ensure that React will\ncontinue to thrive is by giving back. Ways to give back include answering React questions on Stack\nOverflow and elsewhere, contributing to an open source project, or teaching React to someone else or\nwriting a book. Best wishes!\nINDEX\nA working React app, 357\nARIA attributes, 416\nAbramov, Dan (React developer community), 435",
		"continue to thrive is by giving back. Ways to give back include answering React questions on Stack\nOverflow and elsewhere, contributing to an open source project, or teaching React to someone else or\nwriting a book. Best wishes!\nINDEX\nA working React app, 357\nARIA attributes, 416\nAbramov, Dan (React developer community), 435\narray\naccessibility\nchanging of with spread, 158\nalso known as a 1 1 y, 413\ncopying of with spread, 158–159\nbasics of, 414–415\npassing an empty array to only run\nform accessibility, 417–418 useEffect on mount, 268\nimplementing of in React components, 415–422 array.map function, 53\nwhy is it important, 413–414 arrow functions, 39, 216–217\naddEventListener, 200 assertions, writing of with Chai, 427–428\nAJAX (Asynchronous JavaScript and XML), 290 asset- manifest- json, 342–343\nAMD (Asynchronous Module Definition), 25 async, 372\nAngular (angular.io), 18 asynchronous code\nanimation events, 211 described, 369–370\nApollo, 433–434 where to run in React, 374–377",
		"why is it important, 413–414 arrow functions, 39, 216–217\naddEventListener, 200 assertions, writing of with Chai, 427–428\nAJAX (Asynchronous JavaScript and XML), 290 asset- manifest- json, 342–343\nAMD (Asynchronous Module Definition), 25 async, 372\nAngular (angular.io), 18 asynchronous code\nanimation events, 211 described, 369–370\nApollo, 433–434 where to run in React, 374–377\nApp component Asynchronous JavaScript and XML (AJAX), 290\nadding methods and binding them to, 191–192 Asynchronous Module Definition (AMD), 25\nconverted App component, 193–195 asynchronous tasks, 371\ncopying and modifying of JSX in, 191 attributes\ninitializing state in, 190 ARIA attributes, 416\nlisting for, 407 component attribute, 305–306\nrendering NavBar inside of, 87 custom attributes, 56\nstatic version of, 163 exact attribute, 301–303, 304\napply function, 67 non- standard attributes, 56\napps vs. props, 52–56\nbuilding of, 339–343 React as supporting many HTML attributes, 55",
		"copying and modifying of JSX in, 191 attributes\ninitializing state in, 190 ARIA attributes, 416\nlisting for, 407 component attribute, 305–306\nrendering NavBar inside of, 87 custom attributes, 56\nstatic version of, 163 exact attribute, 301–303, 304\napply function, 67 non- standard attributes, 56\napps vs. props, 52–56\nbuilding of, 339–343 React as supporting many HTML attributes, 55\nClicker app, 381, 383, 384 renaming of, 54\nexample of, 396–398 render attribute, 306–307\ninspecting of with Portal in Chrome Developer some as behaving differently, 55\nTools, 402 standard HTML attributes, 54–56\ninspecting of with Portal in React Developer as using camelCase, 54\nTool, 403 using event listener attributes, 202\nputting it on the web, 344–349 await, 372\nrunning built app from filesystem, 342 Axios, getting data with, 377–379\nwhat’s in a name, 343 axios- hooks, 286\n437\nBabel – commits\nB CDN links, 3\nChai, testing with, 427–428\nBabel, 31–32\nChange Detection, 19\nbackend as a service (BaaS), 345",
		"inspecting of with Portal in React Developer as using camelCase, 54\nTool, 403 using event listener attributes, 202\nputting it on the web, 344–349 await, 372\nrunning built app from filesystem, 342 Axios, getting data with, 377–379\nwhat’s in a name, 343 axios- hooks, 286\n437\nBabel – commits\nB CDN links, 3\nChai, testing with, 427–428\nBabel, 31–32\nChange Detection, 19\nbackend as a service (BaaS), 345\ncheckout form, with help links, 410\nback- end environment, 20\nchildren\nBailey, Becca (React developer community), 435\naccessing of imperatively with useRef,\nbidirectional data flow, 125\n279–280\nbind function, 67, 215–216\ncloning of in NavBar.js, 88\nbreakpoints, 421\nconditionally rendering children based on media\nbrowser incompatibilities, elimination of, 33\nquery, 422\nBrowseRouter, 294\ncreating new CartItem children, 110\nbuild directory, examining of, 340\ndefined, 84, 104\nbuild script, running of, 340\nan HTML textarea's value as, 230\nbuild toolchain, React without, 1–7",
		"279–280\nbind function, 67, 215–216\ncloning of in NavBar.js, 88\nbreakpoints, 421\nconditionally rendering children based on media\nbrowser incompatibilities, elimination of, 33\nquery, 422\nBrowseRouter, 294\ncreating new CartItem children, 110\nbuild directory, examining of, 340\ndefined, 84, 104\nbuild script, running of, 340\nan HTML textarea's value as, 230\nbuild toolchain, React without, 1–7\nmaking us of props in, 88–89\nbuilt app, running of from filesystem, 342\nmanipulating, 86–88\nbuilt- in components, 47–56\nrendering of using props.children, 87–88\nbuilt- in hooks\nCJS (CommonJS), 26–27\naccessing children imperatively with useRef,\nClark, Andrew (React developer community), 435\n279–280\nclass, basing new class on external style, 253\ncaching computer values with useMemo, 278–279\nclass body, and constructor method, 62–63\ncombining logic and state with useReducer,\nclass components\n273–274\nconsuming a Context in, 390\ncustomizing exposed values with\ncontrolling of inputs in, 224–225",
		"accessing children imperatively with useRef,\nClark, Andrew (React developer community), 435\n279–280\nclass, basing new class on external style, 253\ncaching computer values with useMemo, 278–279\nclass body, and constructor method, 62–63\ncombining logic and state with useReducer,\nclass components\n273–274\nconsuming a Context in, 390\ncustomizing exposed values with\ncontrolling of inputs in, 224–225\nuseImperativeHandle, 280–281\nconverting to, 190–197\nhooking into lifecycle with useEffect, 264–272\ncreating ref in, 234\nlist of, 259\ndefined, 103\nmanaging state with useState, 260–264\ndifferences between function and class\nmemoized callbacks with useCallback, 275–278\ncomponents, 84\nsubscribing to global data with useContext,\ninitializing state in, 146–147\n272–273\nintroduction to, 57–68\nupdating DOM synchronously with\nloading initial data in, 374–375\nuseLayoutEffect, 281\nmanaging state in, 71–72\nbytecode, 31\nupdating state with setState, 150\nusing Context in, 390\nC using state and setState in, 72",
		"memoized callbacks with useCallback, 275–278\ncomponents, 84\nsubscribing to global data with useContext,\ninitializing state in, 146–147\n272–273\nintroduction to, 57–68\nupdating DOM synchronously with\nloading initial data in, 374–375\nuseLayoutEffect, 281\nmanaging state in, 71–72\nbytecode, 31\nupdating state with setState, 150\nusing Context in, 390\nC using state and setState in, 72\nwriting event handlers in, 213–214\ncall function, 67 class composition, use of, 252–253\ncallback function, 67 class declarations, 60–61\ncallback refs, creating of, 236–238 class expression, 61–62\ncallbacks class property, initializing state in, 147\nwithin callbacks, 372 Clicker app, 381, 383, 384\nmemoized callbacks with useCallback, 275 clipboard events, 206\ncamelCase, 33, 54, 201, 248, 252, 416 cloneElement, 87\ncaption, rendering of, 74 command- line interface (CLI), 101–102\nCarter, Jessica (React developer community), 435 commit phase, of component lifecycle, 89, 327",
		"callbacks class property, initializing state in, 147\nwithin callbacks, 372 Clicker app, 381, 383, 384\nmemoized callbacks with useCallback, 275 clipboard events, 206\ncamelCase, 33, 54, 201, 248, 252, 416 cloneElement, 87\ncaption, rendering of, 74 command- line interface (CLI), 101–102\nCarter, Jessica (React developer community), 435 commit phase, of component lifecycle, 89, 327\ncascading styles, in components, 245–246 commits, 327\n438\nCommonJS (CJS) – const keyword\nCommonJS (CJS), 26–27 passing children into, 85–86\ncomponent attribute, use of, 305–306 presentational components, 79\ncomponent data, editing of in React DevTools, Provider component, 389–390\n114–117 pure component, 96, 103\ncomponent tree, 108–110, 113 putting everything in one, 46–47\ncomponentDidCatch(), 92, 327–328 React component, 23–24\ncomponentDidMount method, 90 React.Component, 68–76\ncomponentDidUpdate, 92 rendering of, 98–103\ncomponents root component, 43, 103, 353–354",
		"component data, editing of in React DevTools, Provider component, 389–390\n114–117 pure component, 96, 103\ncomponent tree, 108–110, 113 putting everything in one, 46–47\ncomponentDidCatch(), 92, 327–328 React component, 23–24\ncomponentDidMount method, 90 React.Component, 68–76\ncomponentDidUpdate, 92 rendering of, 98–103\ncomponents root component, 43, 103, 353–354\nas able to be imported into other components, 45 route component, 294\nApp component. See App component router component, 294\nattributes vs. props, 52–56 SalesChart component, 401, 402\nbuilt- in components, 47–56 SearchBox component, 227\ncascading styles in, 245–246 searching for, 110–112\nchanging state data in, 4–5 SearchInput component, 227\nclass components, 57–68, 103, 213–214, SearchResults component, 227–228\n224–225, 234, 374–375, 390 selecting, 114–117\nas compared to elements, 44–47 setting an event listener in, 201\nContext.Consumer component, 390–391 shell components, 163–164",
		"cascading styles in, 245–246 searching for, 110–112\nchanging state data in, 4–5 SearchInput component, 227\nclass components, 57–68, 103, 213–214, SearchResults component, 227–228\n224–225, 234, 374–375, 390 selecting, 114–117\nas compared to elements, 44–47 setting an event listener in, 201\nContext.Consumer component, 390–391 shell components, 163–164\nCounter component, 94 SidebarHelp component, 401\ncreating component using a class, 58 simple routing component, 291–292\ncreating component with React stateful component, 103\n.createClass, 57 stateless component, 103, 147\ncreating configurable ones, 15 stateless functional components, 79\ncustom components, 30, 56 terminology of, 103–104\ndefined, 15, 43 TextReader component, 236\nas defining elements, 44–45 types of, 56–84\ndumb components, 79 use of to reduce complexity, 45–46\nelements as invoking, 45 user- defined components, 30, 56\nwith errors, 326 without default props, 142\nFigureList component, 74–76 Components window, 108–109, 114, 115",
		"custom components, 30, 56 terminology of, 103–104\ndefined, 15, 43 TextReader component, 236\nas defining elements, 44–45 types of, 56–84\ndumb components, 79 use of to reduce complexity, 45–46\nelements as invoking, 45 user- defined components, 30, 56\nwith errors, 326 without default props, 142\nFigureList component, 74–76 Components window, 108–109, 114, 115\nfiltering of, 112–114 componentWillUnmount, 92\nfunction components, 76–84, 103, 212–213, 224, composing, defined, 15\n375, 391 composition\nhigher- order components, 114, 311–312 as alternative to Context, 392–396\nHTML element components, 47–51 defined, 15\nimproving performance and avoiding errors, vs. inheritance, 15–16\n92–98 use of instead of Context, 395–396\nincluding CSS in, 245 using, 16\ninspecting, 107–114 composition events, 206\nlifecycle of, 89–98 conditional rendering\nlifecyle of, 104 with && operator, 37–38\nlinking component, 294 with conditional operator, 38\nLogger component, 329 defined, 36",
		"HTML element components, 47–51 defined, 15\nimproving performance and avoiding errors, vs. inheritance, 15–16\n92–98 use of instead of Context, 395–396\nincluding CSS in, 245 using, 16\ninspecting, 107–114 composition events, 206\nlifecycle of, 89–98 conditional rendering\nlifecyle of, 104 with && operator, 37–38\nlinking component, 294 with conditional operator, 38\nLogger component, 329 defined, 36\nmade up of three child components, 85 with if/else and element variables, 36–37\nModal component, 408 const keyword, 82, 156\n439\nconstant – defaults\nconstant, defined, 82 using plain old CSS in components, 245–247\nconstructor CSS- in- JS, and styled components, 253–254\nbinding function in, 215–216 curly braces\nclass body and constructor method, 62–63 putting comments in, 35–36\nin mounting stage, 90 use of double curly braces with objects, 35\nContext use of to include literal JavaScript, 35\ncommon use cases for, 391–392 custom attributes",
		"constant, defined, 82 using plain old CSS in components, 245–247\nconstructor CSS- in- JS, and styled components, 253–254\nbinding function in, 215–216 curly braces\nclass body and constructor method, 62–63 putting comments in, 35–36\nin mounting stage, 90 use of double curly braces with objects, 35\nContext use of to include literal JavaScript, 35\ncommon use cases for, 391–392 custom attributes\ncomposition as alternative to, 392–396 prefacing of in DOM elements with data-, 34\nconsuming a Context in a function component, written using only lower- case letters, 56\n391 custom components, 30, 56\nconsuming of, 390–391, 397–398 custom domains, enabling of and HTTPS, 348\ncreating Provider, 389 custom hooks\neliminating prop drilling with, 393–394 finding and using, 286–288\nuse of composition instead of, 395–396 inspecting of, 283\nuse of with useContext hook, 272 labeling of with useDebugValue, 283–285\nfor user preferences, 389 other fun hooks, 288",
		"391 custom components, 30, 56\nconsuming of, 390–391, 397–398 custom domains, enabling of and HTTPS, 348\ncreating Provider, 389 custom hooks\neliminating prop drilling with, 393–394 finding and using, 286–288\nuse of composition instead of, 395–396 inspecting of, 283\nuse of with useContext hook, 272 labeling of with useDebugValue, 283–285\nfor user preferences, 389 other fun hooks, 288\nuser preferences component with, 396 viewing debug value of, 285\nusing a component outside of a required Context, writing of, 281–283\n394–395\nusing in function component, 391\nD\nwhen not to use, 392\nContext API, as solving the problem, 388–391 Dalgleish, Mark (React developer community), 435\nContext object, creating of, 388–389 Dalton, John- David (React developer community),\nContext.Consumer component, use of, 390–391 435\ncontrolled inputs data\nadding value attribute as creating, 223 fetching and caching of, 369–385\nsimplifying of in a class, 225–226 getting data to a deeply nested component with",
		"Context object, creating of, 388–389 Dalton, John- David (React developer community),\nContext.Consumer component, use of, 390–391 435\ncontrolled inputs data\nadding value attribute as creating, 223 fetching and caching of, 369–385\nsimplifying of in a class, 225–226 getting data to a deeply nested component with\nvs. uncontrolled inputs, 221–226 prop drilling, 392–393\nupdating of with function components, 223–224 getting of with Axios, 377–379\nCounter, with useReducer, 273–274 getting of with fetch, 377\nCounter component, toggling render of, 94 reading of from localStorage, 382–385\nCounterClass button, result of clicking, 153 removing of from localStorage, 383–384\nCreate React App data flow\nBabel as integrated into, 31 bidirectional data flow, 125\ninteractive “Hello, World” with, 7–8 one- way data flow, 123–126, 224\nuse of to build boilerplate user interface, 1–7 two- way data flow, 125\nCSS unidirectional data flow, 123–126",
		"CounterClass button, result of clicking, 153 removing of from localStorage, 383–384\nCreate React App data flow\nBabel as integrated into, 31 bidirectional data flow, 125\ninteractive “Hello, World” with, 7–8 one- way data flow, 123–126, 224\nuse of to build boilerplate user interface, 1–7 two- way data flow, 125\nCSS unidirectional data flow, 123–126\nadvanced CSS Modules functionality, 252–253 data type, validation of, 133–134\nCSS rule- sets vs. JavaScript style objects, 248 declarative programming, 16–17\nimporting of into HTML file, 243–245 default actions, preventing of, 231–232\nmedia queries in included CSS, 421 default exports, 28–29\nmodules of, 250–253 default values, adding of to InputForm, 174–175\nnaming CSS Module files, 251–252 defaultProps object, 143, 178\nresponsive media queries in CSS file, 421 defaults\n440\ndeployment – errors\ndestructuring props and setting of, 143 using unnecessary grouping elements can result in\nsetting defaultProps as static property, invalid HTML, 417",
		"modules of, 250–253 default values, adding of to InputForm, 174–175\nnaming CSS Module files, 251–252 defaultProps object, 143, 178\nresponsive media queries in CSS file, 421 defaults\n440\ndeployment – errors\ndestructuring props and setting of, 143 using unnecessary grouping elements can result in\nsetting defaultProps as static property, invalid HTML, 417\n143–144 elementType validator, 137\nsetting defaultProps for function component, Enzyme, testing with, 426–427\n145 error boundaries\nsetting defaultProps outside of component best laid plans, 319–320\nbody, 144–145 building your own ErrorBoundary component,\nsetting of with OR operator, 142 323–334\ndeployment crashed React app, 320\ndefined, 339 defined, 320–323\na deployed React app, 348 ErrorBoundary component, 324\nhow is a deployed app different? 343 getDerivedStateFromErrors as static method,\nwith Netlify, 345–349 324\ndestructuring assignment syntax, 81, 83 handling an error with, 323",
		"body, 144–145 building your own ErrorBoundary component,\nsetting of with OR operator, 142 323–334\ndeployment crashed React app, 320\ndefined, 339 defined, 320–323\na deployed React app, 348 ErrorBoundary component, 324\nhow is a deployed app different? 343 getDerivedStateFromErrors as static method,\nwith Netlify, 345–349 324\ndestructuring assignment syntax, 81, 83 handling an error with, 323\nDeveloper Tools, 344. See also React DevTools implementing of, 323–338\ndevelopment environment, 20, 21 providing reset option in, 335\ndevelopment mode, vs. production, testing of, 326–327\n343–344 what it can’t catch, 336–337\ndevelopment server, and hot reloading, error handling, as stage of component’s life, 89, 92\n360 error message\nDev.to, 436 cannot read property, 173\nDocument Object Model (DOM) cannot read property ‘map’ of undefined, 175\ndefined, 13 not- renderable error message, 135\nrole of, 13 ErrorBoundary component\nDOM method building your own, 323–334",
		"343–344 what it can’t catch, 336–337\ndevelopment server, and hot reloading, error handling, as stage of component’s life, 89, 92\n360 error message\nDev.to, 436 cannot read property, 173\nDocument Object Model (DOM) cannot read property ‘map’ of undefined, 175\ndefined, 13 not- renderable error message, 135\nrole of, 13 ErrorBoundary component\nDOM method building your own, 323–334\ncalling of on child using a ref, 235 exporting with, 326\nupdating of synchronously with installing a pre- built one, 334–336\nuseLayoutEffect, 281 listing for, 324\ndumb components, 79 providing reset link in, 334\nupdated of with remote logging, 331–332\nerrors\nE\nautomatically fixable errors or warnings, 362\nECMAScript Modules (ESM), 27 catching ones in error boundaries with\neffects try/catch, 336–337\ncleaning up after, 265–266 catching ones in event handlers with\nrunning of only after mounting, 268 react- error- boundary, 337–338\nelement tree component that sometimes errors, 333",
		"updated of with remote logging, 331–332\nerrors\nE\nautomatically fixable errors or warnings, 362\nECMAScript Modules (ESM), 27 catching ones in error boundaries with\neffects try/catch, 336–337\ncleaning up after, 265–266 catching ones in event handlers with\nrunning of only after mounting, 268 react- error- boundary, 337–338\nelement tree component that sometimes errors, 333\nafter user clicks a link, 100 component with, 326\ninitial element tree, 100 how to fix, 362\nelement validator, 137 logging of and the info object to console, 328\nelements logging of with ComponentDidCatch(),\ncomponents as defining, 44–45 327–328\nas invoking components, 45 uncaught error, 322\nusing unnecessary elements to group elements, viewing caught ones in Loggly, 332\n416 viewing of and info parameters in console, 329\n441\nES205 module rules – fecthing\nES205 module rules, 28–29 events\nESLint animation events, 211\nconfiguration of, 361 clipboard events, 206\nhow to fix errors, 362 composition events, 206",
		"as invoking components, 45 uncaught error, 322\nusing unnecessary elements to group elements, viewing caught ones in Loggly, 332\n416 viewing of and info parameters in console, 329\n441\nES205 module rules – fecthing\nES205 module rules, 28–29 events\nESLint animation events, 211\nconfiguration of, 361 clipboard events, 206\nhow to fix errors, 362 composition events, 206\ninstalling and configuring of, 360–361 event bubbling, 202\nESM (ECMAScript Modules), 27 Event object, 203–204\nEvent API documentation, 205 focus events, 206\nevent bubbling, 202 form events, 206–207\nevent handler generic events, 207\nbinding event handler functions, 214–216 how they work in React, 199–201\nbinding of, 70–71 image events, 210\nbinding of inline, 216 keyboard events, 206\ncatching errors in with react- error- boundary, media events, 209–210\n337–338 mouse events, 207–208\ndefining state using class property, 217–218 other events, 211\nFilterSelect with, 187–188 pointer events, 208–209",
		"binding event handler functions, 214–216 how they work in React, 199–201\nbinding of, 70–71 image events, 210\nbinding of inline, 216 keyboard events, 206\ncatching errors in with react- error- boundary, media events, 209–210\n337–338 mouse events, 207–208\ndefining state using class property, 217–218 other events, 211\nFilterSelect with, 187–188 pointer events, 208–209\nfunctions of, 211–219 selection events, 209\nInputForm component with event handlers and setting an event listener in a React component,\nevent listeners, 181–182 201\npassing data to, 218–219 supported events, 204–211\npassing Event object to, 219 SyntheticEvent, 201–202\nuse of arrow function as, 39, 216–217 touch events, 209\nusing inline event handler to call setState, transition events, 211\n212 UI events, 209\nusing inline event handler to show an alert, 211 using addEventListener, 200\nwriting and binding an event handler method in a using an event attribute in HTML, 200\nclass, 213–214 using event listener attributes, 202",
		"use of arrow function as, 39, 216–217 touch events, 209\nusing inline event handler to call setState, transition events, 211\n212 UI events, 209\nusing inline event handler to show an alert, 211 using addEventListener, 200\nwriting and binding an event handler method in a using an event attribute in HTML, 200\nclass, 213–214 using event listener attributes, 202\nwriting inline event handlers, 211–212 wheel events, 209\nwriting of in function components, 212–213 writing of in class components, 213–214\nevent handler function, 211–219 Event.target, 203\nevent listeners Event.type, 203\nFilterSelect with, 187–188 exact attribute\nInputForm component with event handlers and adding of to Routes to restrict matching, 304\nevent listeners, 181–182 use of on NavLink components, 301–303\nsetting of in React component, 201 export statement, 27–29\nusing event listener attributes, 202 exporting, with ErrorBoundary, 326–327\nEvent object expressions, 38–39\nadding properties to, 205\nbase Event properties, 203\nF",
		"InputForm component with event handlers and adding of to Routes to restrict matching, 304\nevent listeners, 181–182 use of on NavLink components, 301–303\nsetting of in React component, 201 export statement, 27–29\nusing event listener attributes, 202 exporting, with ErrorBoundary, 326–327\nEvent object expressions, 38–39\nadding properties to, 205\nbase Event properties, 203\nF\npassing of automatically, 218\npassing of to event handler, 219 Facebook\nviewing properties of, 203 React as created by, 11\nEvent.cancelable, 203 React Community on, 436\nEvent.preventDefault, 203 fecthing, ways to, 376\n442\nfetch – global data\nfetch, getting data with, 377 optimizations and shortcuts with, 80\nfigure, rendering of, 74 setting defaultProps for, 145\nFigureList component, 74–76 as simpler than class components, 76–79\nfilteredReminders, creating new one, 184–185 updating state with, 154–155\nfiltering use of PropTypes with, 133\nof components, 112–114 writing event handlers in, 212–213",
		"442\nfetch – global data\nfetch, getting data with, 377 optimizations and shortcuts with, 80\nfigure, rendering of, 74 setting defaultProps for, 145\nFigureList component, 74–76 as simpler than class components, 76–79\nfilteredReminders, creating new one, 184–185 updating state with, 154–155\nfiltering use of PropTypes with, 133\nof components, 112–114 writing event handlers in, 212–213\nreminders, 183–190 function constructors, 58\nreminders list, 185 function declarations, 61\nfilterList function, implementing of, 186–187 function dependencies\nFilterSelect as causing unnecessary renders, 275–277\nwith an event handler and event listener, 187–188 unnecessary renders warning due to, 276\nfiltering reminders, 183–190 function hoisting, 61\npure FilterSelect, 172 function scope, 81\nround two of, 166 functional programming, 64\nshell component for, 163 functions\nvalidating and setting defaults for, 177–178 apply function, 67\nfixed counter class, 155 array.map function, 53",
		"with an event handler and event listener, 187–188 unnecessary renders warning due to, 276\nfiltering reminders, 183–190 function hoisting, 61\npure FilterSelect, 172 function scope, 81\nround two of, 166 functional programming, 64\nshell component for, 163 functions\nvalidating and setting defaults for, 177–178 apply function, 67\nfixed counter class, 155 array.map function, 53\nFlamegraph chart, 119 arrow functions, 39, 216–217\nFlux, use of, 430 binding of in the constructor, 215–216\nfocus call function, 67\nmanaging of, 239 callback function, 67\nmanaging of programmatically, 419 higher- order functions, 311–312\nfocus control (in React), 418–420 immediately invoking of in JSX, 39\nfocus events, 206 passing of to a setter, 263\nform events, 206–207 setter function, 262–264\nforms\ncontrolled inputs vs. uncontrolled inputs,\nG\n221–226\nas having state, 221–222 Gatsby, use of, 434\nlifting up input state, 226–228 generic events, 207\npreventing default actions, 231–232 getDerivedStateFromErrors",
		"focus control (in React), 418–420 immediately invoking of in JSX, 39\nfocus events, 206 passing of to a setter, 263\nform events, 206–207 setter function, 262–264\nforms\ncontrolled inputs vs. uncontrolled inputs,\nG\n221–226\nas having state, 221–222 Gatsby, use of, 434\nlifting up input state, 226–228 generic events, 207\npreventing default actions, 231–232 getDerivedStateFromErrors\nusing different form elements, 229–231 receives error as parameter, 325\nusing uncontrolled inputs, 228–229 as running during render phase, 325\nfront- end environment, 20 should return an object for updating state,\nfunction binding, 67 325–326\nfunction components as static method, 324\nconsuming a Context in, 391 getDerivedStateFromProps, 90, 91, 92\ncontrolling of input in, 224 getElementById function, 13\ncreating ref in, 234 getSnapshotBeforeUpdate, 91–92\ndefined, 79, 103 Git button, clicking New site from, 346\nhow to write them, 79–80 Git provider, choosing of, 346\ninitializing state in, 147–149 global data",
		"function components as static method, 324\nconsuming a Context in, 391 getDerivedStateFromProps, 90, 91, 92\ncontrolling of input in, 224 getElementById function, 13\ncreating ref in, 234 getSnapshotBeforeUpdate, 91–92\ndefined, 79, 103 Git button, clicking New site from, 346\nhow to write them, 79–80 Git provider, choosing of, 346\ninitializing state in, 147–149 global data\nloading initial data in, 375 defined, 272\nmanaging state in, 83–85 subscribing to with useContext, 272\n443\nglobal scope – InputForm\nglobal scope, 82 standard HTML attributes, 54–56\nGoogle, Angular (angular.io), 18 using an event attribute in, 200\nGraphQL, use of, 432–433 using unnecessary grouping elements can result in\ninvalid HTML, 417\nHTTPS, enabling custom domains and, 348\nH\nhash string, defined, 343\nI\nHashnode, 436\nHashRouter, 294, 295 image events, 210\nHello, World immutabilty, 156\ninteractive Hello, World component, 7 imperative programming, 16\nrunning in browser, 5 implicit globals, 82",
		"GraphQL, use of, 432–433 using unnecessary grouping elements can result in\ninvalid HTML, 417\nHTTPS, enabling custom domains and, 348\nH\nhash string, defined, 343\nI\nHashnode, 436\nHashRouter, 294, 295 image events, 210\nHello, World immutabilty, 156\ninteractive Hello, World component, 7 imperative programming, 16\nrunning in browser, 5 implicit globals, 82\nHello React Learner, 8 import statement, 27–29\nhigher- order components, 114, 257, 311–312 index.html\nhigher- order functions, 114, 311–312 the built index.html, 341\nhistory object, 309, 310, 312 creating React App’s, 99\nhoisting, 61, 81 finished one, 352–353\nhooks importing index.js into, 354\nbuilt- in hooks, 259–281 index.js\ncustom hooks, 281–288 attempt to load without compiling, 355\ndefined, 257 finished index.js, 353\nimporting of, 260 importing of into index.html, 354\nReact Router hooks, 317–318 initial element tree, 100\nresources on, 288 initializing state, 146–149\nrole of, 79, 147 inline event handlers, 211–212",
		"hooks importing index.js into, 354\nbuilt- in hooks, 259–281 index.js\ncustom hooks, 281–288 attempt to load without compiling, 355\ndefined, 257 finished index.js, 353\nimporting of, 260 importing of into index.html, 354\nReact Router hooks, 317–318 initial element tree, 100\nresources on, 288 initializing state, 146–149\nrole of, 79, 147 inline event handlers, 211–212\nrules of, 259 inline styles\nand state, 116 importing multiple styles, 250\nwhy they were introduced, 257–259 improvement of with style modules, 249\nhot reloading, 8, 360 using of in React, 247–248\nHTML using variables to hold style objects, 249\nadding HTML link to HTML file, 244 why not to use, 249\nadding React to page, 1–7 why to use, 249\ncustom attributes in, 34 innerHTML function, 13\nelement components, 47–51 input elements\nfile for using React without toolchain, 4 controlling of, 230\nHTML document, 352–353 list of, 229–230\nHTML document with multiple nodes in the InputForm\nbody, 400 adding PropTypes and default values to,",
		"adding HTML link to HTML file, 244 why not to use, 249\nadding React to page, 1–7 why to use, 249\ncustom attributes in, 34 innerHTML function, 13\nelement components, 47–51 input elements\nfile for using React without toolchain, 4 controlling of, 230\nHTML document, 352–353 list of, 229–230\nHTML document with multiple nodes in the InputForm\nbody, 400 adding PropTypes and default values to,\nimporting CSS into, 243–245 174–175\ninput elements, 229–230 converted InputForm component, 196–197\nmaking HTML template, 359–360 with event handlers and event listeners, 181–182\nReact as supporting many HTML attributes, 55 pure InputForm, 172\nselect element in, 231 round two of, 165–166\nsemantic HTML, 416 shell component for, 163\n444\ninputs – list virtualization\ninputs. See also controlled inputs; uncontrolled Jest, testing with, 363, 425\ninputs JSX\ncontrolling of in class component, 224–225 accessible form, writing using, 418\ncontrolling of in function component, 224 Babel, 31–32",
		"select element in, 231 round two of, 165–166\nsemantic HTML, 416 shell component for, 163\n444\ninputs – list virtualization\ninputs. See also controlled inputs; uncontrolled Jest, testing with, 363, 425\ninputs JSX\ncontrolling of in class component, 224–225 accessible form, writing using, 418\ncontrolling of in function component, 224 Babel, 31–32\nlifting up input state, 226–228 Boolean attributes, 34–35\nupdating input element with one- way data flow, conditionals in, 36\n224 copying and modifying of in App, 191\nisComplete, implementing isComplete changing defined, 30\nfunctionality, 188–190 expressions in, 38–39\nIsomorphic React, 103 how it works, 30–31\nisRequired validator, 134 JSX Transform, 31, 32\nisValidElement, 87 as not HTML, 23, 33\nas requiring loader, 356\nas supporting all ARIA attributes, 416\nJ\nsyntax basics of, 33–41\nJavaScript transpilation, 31–33\narray.map function, 53 use of curly braces to include literal JavaScript, 35",
		"functionality, 188–190 expressions in, 38–39\nIsomorphic React, 103 how it works, 30–31\nisRequired validator, 134 JSX Transform, 31, 32\nisValidElement, 87 as not HTML, 23, 33\nas requiring loader, 356\nas supporting all ARIA attributes, 416\nJ\nsyntax basics of, 33–41\nJavaScript transpilation, 31–33\narray.map function, 53 use of curly braces to include literal JavaScript, 35\nclass body and constructor method, 62–63 as using camelCase, 33\nclass declarations, 60–61 using children in, 40\nclass expression, 61–62 when to use JavaScript in, 36\nclass validation, 138 as XML, 33\nclasses in, 58–68\nCSS rule- sets vs. JavaScript style objects, 248\nK\nequality operators, 261\nexecuting asynchronous JavaScript, 371 Karma, testing with, 428\nfunction (or method) invocation in, 64–66 key prop, 177–183\nas functional programming language, 64 keyboard events, 206\nhistory of modules in, 25–29 keyboard focus, use of ref to set, 410–411\nmain JavaScript file, 353\nmethod definition syntax, 214\nL\nmethod syntax, 65",
		"K\nequality operators, 261\nexecuting asynchronous JavaScript, 371 Karma, testing with, 428\nfunction (or method) invocation in, 64–66 key prop, 177–183\nas functional programming language, 64 keyboard events, 206\nhistory of modules in, 25–29 keyboard focus, use of ref to set, 410–411\nmain JavaScript file, 353\nmethod definition syntax, 214\nL\nmethod syntax, 65\nas never sleeping, 370–374 Larkin, Sean (React developer community), 435\npromises and async/await, 372–374 let keyword, 82\nREST (Representational State Transfer), 376 lexical variable scoping, 82\nrouting, 291 lifting state up, 170–176\nshallow copies and spread operator, 157–160 Link, internal linking with, 296–297\nside effects, 264 linking\nstatic methods, 324–325 automatic linking with Redirect, 302\nin strict mode, 65 with object, 297\nstyle syntax, 248 to routes, 296–302\nsubclasses with extends keyword, 63–64 with string, 297\ntagged template literals, 254–255 linking component, 294\nvariables in, 81–83 linting, defined, 360",
		"shallow copies and spread operator, 157–160 Link, internal linking with, 296–297\nside effects, 264 linking\nstatic methods, 324–325 automatic linking with Redirect, 302\nin strict mode, 65 with object, 297\nstyle syntax, 248 to routes, 296–302\nsubclasses with extends keyword, 63–64 with string, 297\ntagged template literals, 254–255 linking component, 294\nvariables in, 81–83 linting, defined, 360\nwhen to use it in JSX, 36 list virtualization, 120\n445\nliteral JavaScript – oneOfType validator\nliteral JavaScript, using of inside JSX, 35 modal\nloader managing keyboard focus with, 409–410\nJSX as requiring, 356 one way to style, 405–406\nrole of, 358 opened modal, 409\nlocalStorage Modal component, finished Modal component, 408\nclearing of in the Clicker, 384–385 modal dialog, rendering and interacting with,\nreading data from, 382 404–409\nreading of in Clicker, 383–384 model, managing focus upon closing of, 419–420\nremoving of data from, 383–384 Model- View- Controller (MVC) pattern, 12",
		"role of, 358 opened modal, 409\nlocalStorage Modal component, finished Modal component, 408\nclearing of in the Clicker, 384–385 modal dialog, rendering and interacting with,\nreading data from, 382 404–409\nreading of in Clicker, 383–384 model, managing focus upon closing of, 419–420\nremoving of data from, 383–384 Model- View- Controller (MVC) pattern, 12\nstoring data with, 381–382 modularization, 24–29\nviewing of in Chrome Developer Tools, 383 mounting, as stage of component’s life, 89, 90\nworking with, 381 mouse events, 207–208\nwriting to when state changes, 382 mouse position, component to track, 354\nlocation object, 309, 313, 314 mouse tracker, testing of, 363\nlog source, adding of, 330 multiple component trees, why not just render? 403\nLogger component, 329\nlogging service, use of, 328–329\nN\nLoggly, 329–330, 331, 332\nNativeEvent, 204, 205\nNativeRouter, 294, 295\nM\nNavBar, 87\nMadeWithReactJS, 435 NavBar.js, cloning children in, 88",
		"location object, 309, 313, 314 mouse tracker, testing of, 363\nlog source, adding of, 330 multiple component trees, why not just render? 403\nLogger component, 329\nlogging service, use of, 328–329\nN\nLoggly, 329–330, 331, 332\nNativeEvent, 204, 205\nNativeRouter, 294, 295\nM\nNavBar, 87\nMadeWithReactJS, 435 NavBar.js, cloning children in, 88\nMartin, Robert C. (“Uncle Bob”), 15 navigation menu with sub- items, 299\nmatch object, 309, 313–314, 316 NavLink\nmedia events, 209–210 internal navigation with, 298–302\nmedia playback, controlling of, 241 list of NavLinks with sub- items, 299–300\nmedia queries (in React) using exact attribute on NavLink components,\noverview, 420 301\nconditionally rendering children based on, 422 Netlify\nin included CSS, 421 deployment with, 345–349\nresponsive media queries in CSS file, 421 domain management in, 349\nusing useMediaQuery, 422 enabling routing with, 347–348\nmemoization, 121 new operator, 59\nmemory leaks Next.js, use of, 434",
		"media queries (in React) using exact attribute on NavLink components,\noverview, 420 301\nconditionally rendering children based on, 422 Netlify\nin included CSS, 421 deployment with, 345–349\nresponsive media queries in CSS file, 421 domain management in, 349\nusing useMediaQuery, 422 enabling routing with, 347–348\nmemoization, 121 new operator, 59\nmemory leaks Next.js, use of, 434\navoiding, 93–98 Nightwatch.js, testing with, 428–429\nfixing, 96 node hosting, 345\nReact component with potential one, 93 nodes, validation of, 134–137\nMemoryRouter, 294, 295 npm scripts, creating of, 364–365\nmethod definition syntax, 214\nmethods\nO\nas properties too, 60\nthis keyword in, 65–66 object, copying of with spread, 159–160\nMicrosoft, TypeScript, 19 object- oriented programming (OOP), 15\nMocha, testing with, 426 oneOfType validator, 139\n446\none-w ay data flow – PropTypes\none- way data flow running in the browser, 354–357\ndefined, 123 structuring your source directory, 365–367",
		"method definition syntax, 214\nmethods\nO\nas properties too, 60\nthis keyword in, 65–66 object, copying of with spread, 159–160\nMicrosoft, TypeScript, 19 object- oriented programming (OOP), 15\nMocha, testing with, 426 oneOfType validator, 139\n446\none-w ay data flow – PropTypes\none- way data flow running in the browser, 354–357\ndefined, 123 structuring your source directory, 365–367\nreason for, 125 prop drilling\nunderstanding, 124–125 defined, 387–388\nupdating input element with, 224 elimination of with Context, 393–394\noperators, equality operators, 261 getting data to a deeply nested component with,\noptimization, 120–121 392–393\nuse of, 388\nprops (properties)\nP\naccessing props, 52–54\nparameters additional Link props, 296–297\nusing URL parameters, 304–305 attributes vs., 52–56\nusing useParams hook, 305 as being any data type, 126–127\nparent component Prop, 305–306\ndefined, 84, 104 component that uses string prop, 130\npassing onClick into, 88 components as receiving, 126",
		"optimization, 120–121 392–393\nuse of, 388\nprops (properties)\nP\naccessing props, 52–54\nparameters additional Link props, 296–297\nusing URL parameters, 304–305 attributes vs., 52–56\nusing useParams hook, 305 as being any data type, 126–127\nparent component Prop, 305–306\ndefined, 84, 104 component that uses string prop, 130\npassing onClick into, 88 components as receiving, 126\npath matching, restricting of, 304 creating, 126\npayload, passing of to reducer, 274 creating and using, 74–76\nperformance, solving performance problems, 279 default props, 141–145, 175–176\nplugins, role of, 358 defined, 103, 126\nplugins object, creating of, 359 difference between state and, 149\npointer events, 208–209 key prop, 177–183\nPortals limiting of to certain values or types, 139\ncommon use cases for, 403–411 local variable and props confusion, 129\ncreating of, 401 methods as, 60\ndefined, 399 passing props, 52\nas enabling modal dialogs, 400 passing setter function as, 263",
		"plugins, role of, 358 defined, 103, 126\nplugins object, creating of, 359 difference between state and, 149\npointer events, 208–209 key prop, 177–183\nPortals limiting of to certain values or types, 139\ncommon use cases for, 403–411 local variable and props confusion, 129\ncreating of, 401 methods as, 60\ndefined, 399 passing props, 52\nas enabling modal dialogs, 400 passing setter function as, 263\nhow to make, 399–403 passing the wrong prop type, 131\ninspecting an app with Portal in Chrome as read- only, 127\nDeveloper Tools, 402 render props, 257, 306–307\ninspecting an app with Portal in React Developer rendering render prop, 307\nTools, 403 as storing data, 69\npre- commit phase, of component lifecycle, 89 string prop, 130\npresentational components, 79 validating incoming ones with PropTypes,\npreventDefault, use of, 232 129–130\nproduction, development mode vs., 343–344 validating that a prop is a string, 130–131\nProfiler tab, 119 validation of required props, 134\nproject props.children, 87",
		"Tools, 403 as storing data, 69\npre- commit phase, of component lifecycle, 89 string prop, 130\npresentational components, 79 validating incoming ones with PropTypes,\npreventDefault, use of, 232 129–130\nproduction, development mode vs., 343–344 validating that a prop is a string, 130–131\nProfiler tab, 119 validation of required props, 134\nproject props.children, 87\nautomating build process, 358–365 PropTypes\nHTML document, 352–353 adding of and default values to InputForm,\ninitializing a React project from scratch, 351–367 174–175\ninitializing yours, 352 appending the isRequired validator, 134\nmain JavaScript file, 353 creating custom ones, 140–141\nroot component, 353–354 defined, 130\n447\nPropTypes.arrayOf – React.Component\nPropTypes (continued) philosophy of, 14–21\ndisplaying a warning, 132 and ReactDOM, 12\nfailing PropTypes.element validation, 138 reason for name, 11–13\ngetting started with, 131–133 reason to learn, 17\ninside component’s body, 132 Twitter account, 435",
		"main JavaScript file, 353 creating custom ones, 140–141\nroot component, 353–354 defined, 130\n447\nPropTypes.arrayOf – React.Component\nPropTypes (continued) philosophy of, 14–21\ndisplaying a warning, 132 and ReactDOM, 12\nfailing PropTypes.element validation, 138 reason for name, 11–13\ngetting started with, 131–133 reason to learn, 17\ninside component’s body, 132 Twitter account, 435\nputting propTypes outside the class body, 133 useful links and resources, 435–436\nReminder with and defaultProps, 178 what it is not, 19–21\nas telling which attribute caused the error, 136 React audio player, 241\ntrying to render non-n ode value, 135 React Bookstore, 105–107, 108\nuse of with function component, 133 React component tree, 43, 44\nusing PropTypes.node, 136 React DevTools\nusing PropTypes.oneOf, 139 additional functionality of, 118–119\nvalidating incoming props with, 129–131 editing component data in, 114–117\nvalidation with, 133 Flamegraph chart, 119",
		"trying to render non-n ode value, 135 React Bookstore, 105–107, 108\nuse of with function component, 133 React component tree, 43, 44\nusing PropTypes.node, 136 React DevTools\nusing PropTypes.oneOf, 139 additional functionality of, 118–119\nvalidating incoming props with, 129–131 editing component data in, 114–117\nvalidation with, 133 Flamegraph chart, 119\nPropTypes.arrayOf, 139 getting started with, 105–107\nPropTypes.exact, 140 for inspecting components, 107–114\nPropTypes.objectOf, 139 installation of, 105–107\nPropTypes.shape, 140 logging component data to console, 118\nprototypal inheritance, 58–60 profiling, 119–121\nprototypes Ranked chart after optimizing, 121\nJavaScript as having, 58 role of, 107\nmodifying and using of, 59 Select tool, 115\nProvider component View Settings, 113\nmaking of, 396 viewing Ranked chart, 120\nuse of, 389–390 React element type, validation of, 137\npublic field, 147 React elements, validation of, 137\npublic instance field, 147 React Konsul, 103",
		"prototypes Ranked chart after optimizing, 121\nJavaScript as having, 58 role of, 107\nmodifying and using of, 59 Select tool, 115\nProvider component View Settings, 113\nmaking of, 396 viewing Ranked chart, 120\nuse of, 389–390 React element type, validation of, 137\npublic field, 147 React elements, validation of, 137\npublic instance field, 147 React Konsul, 103\npure component, 96, 103 React Native\npure function, 96 React Native CLI, 101–102\nas rendering engine, 101\nuse of, 434\nR\nyour first React Native component, 101\nRanked chart, 120, 121 React News, 435\nReact React Newsletter, 435\nas compared to Angular (angular.io), 18–19 React UI\nas compared to Vue.js (vujs.org), 19 as having many components nested within other\nas compared to what you already know, 18–19 components, 84\nas declarative, 16–17 rendering of, 100\ndeveloper community, 435 React.Children, 86\nevents supported by, 206 React.Component\nfoundation of, 11–22 class header, 69\nas front-e nd library, 19 constructor function, 69",
		"as compared to Vue.js (vujs.org), 19 as having many components nested within other\nas compared to what you already know, 18–19 components, 84\nas declarative, 16–17 rendering of, 100\ndeveloper community, 435 React.Children, 86\nevents supported by, 206 React.Component\nfoundation of, 11–22 class header, 69\nas front-e nd library, 19 constructor function, 69\nas idiomatic, 17 defined, 68\norigins of, 11 importing of, 68–69\n448\nReact.createClass – rendering\ninitializing local state, 69 creating callback ref, 236–237\nmanaging state in, 71 creating of in class component, 234\nReact.createClass, 57 creating of in function component, 234\nReact.createElement(), 32 customizing value exposed by, 280–281\nReact.createElement method, 31 defined, 233\nreact.development.js, 2 examples of, 239–242\nReactDOM, 12–14, 101 passing ref callback as inline functions, 237–238\nreact- dom.development.js, 2 use of, 234–236\nReactDOM.render(), 6, 13, 98–99 use of to set keyboard focus, 410–411",
		"React.createClass, 57 creating of in function component, 234\nReact.createElement(), 32 customizing value exposed by, 280–281\nReact.createElement method, 31 defined, 233\nreact.development.js, 2 examples of, 239–242\nReactDOM, 12–14, 101 passing ref callback as inline functions, 237–238\nreact- dom.development.js, 2 use of, 234–236\nReactDOM.render(), 6, 13, 98–99 use of to set keyboard focus, 410–411\nReactDOMServer, 102–103 when not to use, 238–239\nreact- error- boundary, specifying fallback when to use, 238\ncomponent with, 335–336 regular expressions\nreact- fetch- hook, 286 defined, 110\nReact.Fragment use of, 110–112\nuse of short syntax of, 40–41 @rehooks/local- storage, 287\nuse of to eliminate unnecessary HTML elements, Reminder\n417 with PropTypes and defaultProps, 178\nreact- hook- form, 286 round two of, 167\nReactiflux, 435, 436 shell component for, 164\nreactive programming, defined, 12 reminders\nReactJS News, 435 adding of to list, 183\nReact.memo(), 97–98 filtering of, 183–190",
		"use of short syntax of, 40–41 @rehooks/local- storage, 287\nuse of to eliminate unnecessary HTML elements, Reminder\n417 with PropTypes and defaultProps, 178\nreact- hook- form, 286 round two of, 167\nReactiflux, 435, 436 shell component for, 164\nreactive programming, defined, 12 reminders\nReactJS News, 435 adding of to list, 183\nReact.memo(), 97–98 filtering of, 183–190\nreact.pdf, 103 filtering of reminders list, 185\nReact.PureComponent, 96, 97 Reminders App\nReact.render(), 6 building, 161–168\nreact- router- dom initial render of, 179\ninstalling and importing of, 293–294 static version of, 167–168\nas one version of React Router, 293 RemindersList\nreact- router- native, as one version of React with default props and PropTypes,\nRouter, 293 175–176\nreact- skip- nav, implementing Skip Navigation pure RemindersList, 172–173\nlinks with, 418–419 with Reminder imported, 164\nReact.StrictMode, 98 round two of, 166\nreconciliation, 14, 100 shell component for, 164",
		"as one version of React Router, 293 RemindersList\nreact- router- native, as one version of React with default props and PropTypes,\nRouter, 293 175–176\nreact- skip- nav, implementing Skip Navigation pure RemindersList, 172–173\nlinks with, 418–419 with Reminder imported, 164\nReact.StrictMode, 98 round two of, 166\nreconciliation, 14, 100 shell component for, 164\nReddit’s React community, 435 render(), 6\nRedirect render attribute, 306–307\nautomatic linking with, 302 render function, 73–74\nrouting with, 308–309 render method, 90, 91\nreducer, 274, 430 render phase, of component lifecycle, 89\nRedux, use of, 430–432 render props, 257, 306–307\nreference values, 157 rendering\nreferential equality, testing of, 278 of caption, 74\nrefs of children using props.children, 87–88\ncalling a DOM method on a child using, 235 of components, 98–103\n449\nrenders – setState function\nrendering (continued) routes\nconditional rendering, 36–38 creating of, 302–309",
		"Redux, use of, 430–432 render props, 257, 306–307\nreference values, 157 rendering\nreferential equality, testing of, 278 of caption, 74\nrefs of children using props.children, 87–88\ncalling a DOM method on a child using, 235 of components, 98–103\n449\nrenders – setState function\nrendering (continued) routes\nconditional rendering, 36–38 creating of, 302–309\nconditionally rendering children based on media dynamic links and routes in nested routes,\nquery, 422 314–316\ndefault route, 308 linking to, 296–302\na fallback UI, 327 multiple ones in component may have matches,\nof figure, 74 302–303\nand finding node with Enzyme, 427 multiple routes can match the URL, 303\nand interacting with a modal dialog, rendering default route, 308\n404–409 switching of, 307–308\nmodal without React Portals can have unexpected routing\nresults, 404 behind the scenes, 309–316\nof NavBar inside of App, 87 changing routes and viewing the window\nother rendering engines, 101 .location.href property, 293",
		"and finding node with Enzyme, 427 multiple routes can match the URL, 303\nand interacting with a modal dialog, rendering default route, 308\n404–409 switching of, 307–308\nmodal without React Portals can have unexpected routing\nresults, 404 behind the scenes, 309–316\nof NavBar inside of App, 87 changing routes and viewing the window\nother rendering engines, 101 .location.href property, 293\nof React UI, 100 defined, 289–290\nReactDOM as most commonly used rendering enabling routing with Netlify, 347–348\nengine, 101 how it works in React, 291–293\nof render props, 307 linking to routes, 296–302\nof SalesChart component, 402 purposes of, 291\nserver- side rendering, 429–434 React Router hooks, 317–318\nof uncontrolled input, 223 with Redirect, 308–309\nrenders redirecting from one location to another, 309\nfunction dependencies as causing unnecessary simple routing component, 291–292\nones, 275–276 using React router, 293–316\nsolving unnecessary ones, 278–279",
		"of SalesChart component, 402 purposes of, 291\nserver- side rendering, 429–434 React Router hooks, 317–318\nof uncontrolled input, 223 with Redirect, 308–309\nrenders redirecting from one location to another, 309\nfunction dependencies as causing unnecessary simple routing component, 291–292\nones, 275–276 using React router, 293–316\nsolving unnecessary ones, 278–279\nunnecessary renders warning due to function\nS\ndependence, 276\nrepository, choosing of, 347 SalesChart component, 401, 402\nRequireJS, 25–26 scroll position\nreserved words, cautions with, 33 scrolling to element with a ref, 242\nrest parameters, 160 setting of, 241–242\nreturn statement, 40 Search input box, 110\nroot component, 43, 103, 353–354 SearchBox component, 227\nroute component, 294 SearchInput component, 227\nrouter SearchResults component, 227–228\ncomponents of, 294, 295–296 select elements, controlling of, 231\ninstalling and importing react- router- dom, select inputs, use of in React, 231\n293–294 selection events, 209",
		"return statement, 40 Search input box, 110\nroot component, 43, 103, 353–354 SearchBox component, 227\nroute component, 294 SearchInput component, 227\nrouter SearchResults component, 227–228\ncomponents of, 294, 295–296 select elements, controlling of, 231\ninstalling and importing react- router- dom, select inputs, use of in React, 231\n293–294 selection events, 209\nlinking component, 294 setState function\nroute component, 294 as asynchronous, 72–73\nrouter component, 294 calls to as asynchronous, 152–153\nselecting of, 294–295 managing of in class components, 71\nusing React router, 293–316 merging object into state with, 151–152\nrouter component, 294, 295–296 as not setState, 149\n450\nsetState method – textarea\npassing a function info, 153–154 stateless functional components, 79\nusing updater function with, 154 static directory, 342\nsetState method, 150–151 static method, getDerivedStateFromErrors\nsetter as, 324\npassing function to, 263–264 StaticRouter, 294, 295",
		"router component, 294, 295–296 as not setState, 149\n450\nsetState method – textarea\npassing a function info, 153–154 stateless functional components, 79\nusing updater function with, 154 static directory, 342\nsetState method, 150–151 static method, getDerivedStateFromErrors\nsetter as, 324\npassing function to, 263–264 StaticRouter, 294, 295\npassing value to, 263 store (in Redux), 430\nsetter function string\nas bound to their creator components, 262 hash string, 343\npassing one as a prop, 263 linking with, 297\nuse of, 262 validating that a prop is one, 130–131\nvalue comparison, 264 string prop, 130\nshallow copy, 157, 158 style objects\nshallowCompare function, 96, 97 importing multiple styles, 250\nshell components, 163–164 style object library, 250\nshouldComponentUpdate, 91, 96, 97 using variables to hold, 249\nside effects, 264 styled components, use of, 253–254\nSidebarHelp component, use of, 401 styles\nsingle page application (SPA), 290 CSS Modules, 250–253",
		"shallow copy, 157, 158 style objects\nshallowCompare function, 96, 97 importing multiple styles, 250\nshell components, 163–164 style object library, 250\nshouldComponentUpdate, 91, 96, 97 using variables to hold, 249\nside effects, 264 styled components, use of, 253–254\nSidebarHelp component, use of, 401 styles\nsingle page application (SPA), 290 CSS Modules, 250–253\nsingle responsibility principle, 15 CSS- in- JS and styled components, 253–254\nSkip Navigation links, 418–419 importance of, 243–244\nsource directory importing CSS into HTML file, 243–245\ngrouping by features, 367 using plain old CSS in components, 245–247\ngrouping by file type, 366 writing inline styles, 247–250\nstructuring yours, 365–367 subclasses with extends keyword, 63–64\nspread operator, 157–160 syntactic sugar, use of term, 58\nStack Overflow, 435 SyntheticBaseEvent object, 203–204\nstate SyntheticEvent, 201–202, 204\nApp with lifted state, 171–172\ndefined, 103\nT\ndefining of using class property, 217–218",
		"grouping by file type, 366 writing inline styles, 247–250\nstructuring yours, 365–367 subclasses with extends keyword, 63–64\nspread operator, 157–160 syntactic sugar, use of term, 58\nStack Overflow, 435 SyntheticBaseEvent object, 203–204\nstate SyntheticEvent, 201–202, 204\nApp with lifted state, 171–172\ndefined, 103\nT\ndefining of using class property, 217–218\ndifference between props and, 149 tagged template literals, 254–255\nhooks and, 116 templates, making HTML template,\ninitializing state in App, 190 359–360\nlifting it up, 170–176 test- driven development, 363\nlifting up input state, 226–228 testing tools, 360–364, 425\nresetting of, 333 text\nsetter function as replacing, 156 automatic selection of, 239\nupdating, 149–150 selecting and copying of with ref, 239–240\nupdating of with function components, 154–155 selecting of and displaying temporary message,\nwhat not to put in, 168 240\nwhat to put in state, 161 textarea\nwhere to put it, 168–170 controlling of, 230",
		"resetting of, 333 text\nsetter function as replacing, 156 automatic selection of, 239\nupdating, 149–150 selecting and copying of with ref, 239–240\nupdating of with function components, 154–155 selecting of and displaying temporary message,\nwhat not to put in, 168 240\nwhat to put in state, 161 textarea\nwhere to put it, 168–170 controlling of, 230\nstate object, 69–70, 71, 145–149 getting value of and counting its words, 279–280\nstateful component, 103 an HTML textarea's value as, 230\nstateless component, 103, 147 use of in React, 230\n451\nTextReader component – useReducer\nTextReader component, 236 useContext\nThingsLike, 86 subscribing to global data with, 272–273\nThingsThatAreFunny, 85 using Context with, 272–273\nthis keyword, 64–66 useDebugValue\nthis.props.children, 85 labeling of custom hooks with, 283–285\ntimer use of, 284\ncreating new timer with each render, 266–267 useEffect\nstarting of with each render, 266 asynchronous requests with, 270–271",
		"TextReader component, 236 useContext\nThingsLike, 86 subscribing to global data with, 272–273\nThingsThatAreFunny, 85 using Context with, 272–273\nthis keyword, 64–66 useDebugValue\nthis.props.children, 85 labeling of custom hooks with, 283–285\ntimer use of, 284\ncreating new timer with each render, 266–267 useEffect\nstarting of with each render, 266 asynchronous requests with, 270–271\ntoolchain, building your own, 351–357 cleaning up after effects, 265–266\ntouch events, 209 creating new timer with each render, 266–267\ntransition events, 211 customizing of, 266–270\ntranspilation, 31–33 hooking into lifecycle with, 264–272\ntry/catch, catching errors in error boundaries most basic form of, 265\nwith, 336–337 passing an empty array to only run useEffect\ntwo- way data flow, 125 on mount, 268\nTypeScript (Microsoft), 19 running asynchronous code with, 270–272\nspecifying useEffect’s dependencies, 269\nstarting timer with each render, 266\nU\nusing default useEffect behavior, 265",
		"try/catch, catching errors in error boundaries most basic form of, 265\nwith, 336–337 passing an empty array to only run useEffect\ntwo- way data flow, 125 on mount, 268\nTypeScript (Microsoft), 19 running asynchronous code with, 270–272\nspecifying useEffect’s dependencies, 269\nstarting timer with each render, 266\nU\nusing default useEffect behavior, 265\nUI useErrorHandler(), use of, 337–338\ndiagram of typical one, 321 useForm, use of, 287\nrendering a fallback UI, 327 useGeolocation, 288\nUI events, 209 useHistory, 310–311, 317\nUI layer, 12 use- http, 285\nUMD (Universal Module Definition), 3 useImperativeHandle, customizing exposed\nuncontrolled inputs values with, 280–281\nblog comment interface using, 228–229 useKonomiCode, 288\nvs. controlled inputs, 221–226 useLayoutEffect, updating DOM synchronously\nomitting value attribute as creating, 222 with, 281\nrendering of, 223 use- local- storage- state, 287\nuse of, 228–229 useLocation, 317",
		"UMD (Universal Module Definition), 3 useImperativeHandle, customizing exposed\nuncontrolled inputs values with, 280–281\nblog comment interface using, 228–229 useKonomiCode, 288\nvs. controlled inputs, 221–226 useLayoutEffect, updating DOM synchronously\nomitting value attribute as creating, 222 with, 281\nrendering of, 223 use- local- storage- state, 287\nuse of, 228–229 useLocation, 317\nunidirectional data flow, 123, 124–125 useMediaQuery, use of, 422\nUniversal React, 103 useMemo\nunmounting, as stage of component’s life, 89, 92 caching computed values with, 278–279\nupdater function, 153–154 solving performance problems with, 279\nupdating, as state of component’s life, 89, 90–92 solving unnecessary renders with, 278–279\nURL parameters, use of, 304–305 useNetworkStatus, 288\nuseAxios, use of, 286 useParams, 317\nuseCallback user preferences (app), 396–398\nfunction dependences cause unnecessary renders, user- defined components\n275–277 custom components as also known as, 30",
		"updating, as state of component’s life, 89, 90–92 solving unnecessary renders with, 278–279\nURL parameters, use of, 304–305 useNetworkStatus, 288\nuseAxios, use of, 286 useParams, 317\nuseCallback user preferences (app), 396–398\nfunction dependences cause unnecessary renders, user- defined components\n275–277 custom components as also known as, 30\nmemoized callbacks fix the unnecessary effect as having any attributes, 34\nproblem, 277–278 possibilities for, 56\nmemoized callbacks with, 275–278 useReducer\n452\nuseRef – wrapper hell\ncombining logic and state with, 273–274 customizing value exposed by ref, 280–281\nCounter with, 273–274 debug value, 283–285\npassing payload to reducer, 274 getting value of textarea and counting its\nuseRef, accessing children imperatively with, words, 279–280\n279–280 passing of to a setter, 263\nuseRouteMatch, 317–318 var keyword, 81–82\nuseState variables\ncalling of hook as returning an array, 155–156 block scope variables with let, 82",
		"Counter with, 273–274 debug value, 283–285\npassing payload to reducer, 274 getting value of textarea and counting its\nuseRef, accessing children imperatively with, words, 279–280\n279–280 passing of to a setter, 263\nuseRouteMatch, 317–318 var keyword, 81–82\nuseState variables\ncalling of hook as returning an array, 155–156 block scope variables with let, 82\nmanaging state with, 260–264 changing local variables doesn’t update the view,\nnumber guessing game with, 260–261 127–128\nsetting initial state, 262 goodbye to var, 81–82\nsetting initial state with, 156 in JavaScript, 81–83\nuse of to create and update a counter, 84–85 local variable and props confusion, 129\nwhy use const with, 156 use of to hold style objects, 249\nuseState function, 147, 149 using const, 82\nuseZipLookup Virtual DOM, 13–14, 100–101\ndefined, 282 Vue.js (vujs.org), 19\nuse of, 282–283\nW\nV\nweb\nvalidation how it works, 290\nof data type, 133–134 putting app on, 344–349",
		"use of to create and update a counter, 84–85 local variable and props confusion, 129\nwhy use const with, 156 use of to hold style objects, 249\nuseState function, 147, 149 using const, 82\nuseZipLookup Virtual DOM, 13–14, 100–101\ndefined, 282 Vue.js (vujs.org), 19\nuse of, 282–283\nW\nV\nweb\nvalidation how it works, 290\nof data type, 133–134 putting app on, 344–349\nfailing PropTypes.element validation, 138 Web Accessibility Initiative - Accessible Rich\nof incoming props, 129–131 Internet Applications (WAI- ARIA),\nJavaScript class validation, 138 415\nof nodes, 134–137 Web Content Accessibility Guidelines (WCAG),\nwith PropTypes, 133 414–415\nof React element type, 137 web server hosting, 344–345\nof React elements, 137 Web Storage\nof required props, 134 remembering user with, 380\nand setting defaults for FilterSelect, 177–178 as synchronous, 380\nthat prop is a string, 130–131 types of, 379\nthat prop is an instance of a class, 138 use of, 379–385\nvalidators when not to use, 380",
		"with PropTypes, 133 414–415\nof React element type, 137 web server hosting, 344–345\nof React elements, 137 Web Storage\nof required props, 134 remembering user with, 380\nand setting defaults for FilterSelect, 177–178 as synchronous, 380\nthat prop is a string, 130–131 types of, 379\nthat prop is an instance of a class, 138 use of, 379–385\nvalidators when not to use, 380\ncustom validators, 140–141 when to use, 380\nelement validator, 137 Webpack, how it works, 357–358\nelementType validator, 137 Webpack Dev Server, 360\nisRequired validator, 134 wheel events, 209\nvalues windowing, 120\ncustomizing exposure values with withRouter, use of, 310\nuseImperiatveHandle, 280–281 wrapper hell, 258\n453\nWILEY END USER LICENSE AGREE-\nMENT\nGo to www.wiley.com/go/eula to access Wiley’s ebook EULA."
	]
}
